
==================== Desugar (after optimization) ====================
2020-11-24 12:41:53.5381808 UTC

Result size of Desugar (after optimization)
  = {terms: 1,342, types: 1,611, coercions: 23, joins: 1/41}

-- RHS size: {terms: 5, types: 4, coercions: 0, joins: 0/0}
po_align_check :: PtrOpts -> Bool
[LclIdX[[RecSel]],
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)}]
po_align_check
  = \ (ds_d19ZZ :: PtrOpts) ->
      case ds_d19ZZ of { PtrOpts _ [Occ=Dead] ds_d1a01 -> ds_d1a01 }

-- RHS size: {terms: 5, types: 4, coercions: 0, joins: 0/0}
po_profile :: PtrOpts -> Profile
[LclIdX[[RecSel]],
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)}]
po_profile
  = \ (ds_d19ZW :: PtrOpts) ->
      case ds_d19ZW of { PtrOpts ds_d19ZX _ [Occ=Dead] -> ds_d19ZX }

-- RHS size: {terms: 8, types: 6, coercions: 0, joins: 0/0}
mkEmptyContInfoTable :: CLabel -> CmmInfoTable
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 30 60}]
mkEmptyContInfoTable
  = \ (info_lbl_a19tf :: CLabel) ->
      GHC.Cmm.CmmInfoTable
        info_lbl_a19tf
        (mkStackRep (ghc-prim-0.6.1:GHC.Types.[] @ Bool))
        GHC.Cmm.NoProfilingInfo
        (GHC.Maybe.Nothing @ CLabel)
        (GHC.Maybe.Nothing
           @ (GHC.Types.Var.Id, GHC.Types.CostCentre.CostCentreStack))

-- RHS size: {terms: 28, types: 8, coercions: 0, joins: 0/0}
makeRelativeRefTo :: Platform -> CLabel -> CmmLit -> CmmLit
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 70] 140 100}]
makeRelativeRefTo
  = \ (platform_a19v0 :: Platform)
      (info_lbl_a19v1 :: CLabel)
      (lit_a19v2 :: CmmLit) ->
      case platformTablesNextToCode platform_a19v0 of {
        False -> lit_a19v2;
        True ->
          case lit_a19v2 of {
            __DEFAULT -> lit_a19v2;
            CmmLabel lbl_a19v3 ->
              GHC.Cmm.Expr.CmmLabelDiffOff
                lbl_a19v3
                info_lbl_a19v1
                (ghc-prim-0.6.1:GHC.Types.I# 0#)
                (wordWidth platform_a19v0);
            CmmLabelOff lbl_a19v4 off_a19v5 ->
              GHC.Cmm.Expr.CmmLabelDiffOff
                lbl_a19v4 info_lbl_a19v1 off_a19v5 (wordWidth platform_a19v0)
          }
      }

-- RHS size: {terms: 25, types: 11, coercions: 0, joins: 0/1}
wordAligned :: PtrOpts -> CmmExpr -> CmmExpr
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 200 30}]
wordAligned
  = \ (opts_a19vA :: PtrOpts) (e_a19vB :: CmmExpr) ->
      let {
        platform_a19vC :: Platform
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 40 0}]
        platform_a19vC = profilePlatform (po_profile opts_a19vA) } in
      case po_align_check opts_a19vA of {
        False -> e_a19vB;
        True ->
          GHC.Cmm.Expr.CmmMachOp
            (GHC.Cmm.MachOp.MO_AlignmentCheck
               (platformWordSizeInBytes platform_a19vC)
               (wordWidth platform_a19vC))
            (GHC.Base.build
               @ CmmExpr
               (\ (@ a_d19Pn)
                  (c_d19Po :: CmmExpr -> a_d19Pn -> a_d19Pn)
                  (n_d19Pp :: a_d19Pn) ->
                  c_d19Po e_a19vB n_d19Pp))
      }

-- RHS size: {terms: 10, types: 2, coercions: 0, joins: 0/0}
closureInfoPtr :: PtrOpts -> CmmExpr -> CmmExpr
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 120 0}]
closureInfoPtr
  = \ (opts_a19vD :: PtrOpts) (e_a19vE :: CmmExpr) ->
      GHC.Cmm.Expr.$WCmmLoad
        (wordAligned opts_a19vD e_a19vE)
        (bWord (profilePlatform (po_profile opts_a19vD)))

-- RHS size: {terms: 12, types: 3, coercions: 0, joins: 0/0}
entryCode :: Platform -> CmmExpr -> CmmExpr
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 90 0}]
entryCode
  = \ (platform_a19vF :: Platform) (e_a19vG :: CmmExpr) ->
      case platformTablesNextToCode platform_a19vF of {
        False -> GHC.Cmm.Expr.$WCmmLoad e_a19vG (bWord platform_a19vF);
        True -> e_a19vG
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
fixedInfoTableSizeW :: WordOff
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
fixedInfoTableSizeW = ghc-prim-0.6.1:GHC.Types.I# 2#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
profInfoTableSizeW :: WordOff
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
profInfoTableSizeW = ghc-prim-0.6.1:GHC.Types.I# 2#

-- RHS size: {terms: 5, types: 0, coercions: 0, joins: 0/0}
GHC.Cmm.Info.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 90 30}]
GHC.Cmm.Info.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module
      (ghc-prim-0.6.1:GHC.Types.TrNameS "ghc"#)
      (ghc-prim-0.6.1:GHC.Types.TrNameS "GHC.Cmm.Info"#)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_a19OQ [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.6.1:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
$krep_a19OQ
  = ghc-prim-0.6.1:GHC.Types.KindRepTyConApp
      ghc-prim-0.6.1:GHC.Types.$tcBool
      (ghc-prim-0.6.1:GHC.Types.[] @ ghc-prim-0.6.1:GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_a19OO [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.6.1:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
$krep_a19OO
  = ghc-prim-0.6.1:GHC.Types.KindRepTyConApp
      GHC.Platform.Profile.$tcProfile
      (ghc-prim-0.6.1:GHC.Types.[] @ ghc-prim-0.6.1:GHC.Types.KindRep)

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
GHC.Cmm.Info.$tcPtrOpts :: ghc-prim-0.6.1:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 70}]
GHC.Cmm.Info.$tcPtrOpts
  = ghc-prim-0.6.1:GHC.Types.TyCon
      10783844252980521413##
      13019815378033756893##
      GHC.Cmm.Info.$trModule
      (ghc-prim-0.6.1:GHC.Types.TrNameS "PtrOpts"#)
      0#
      ghc-prim-0.6.1:GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_a19OR [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.6.1:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
$krep_a19OR
  = ghc-prim-0.6.1:GHC.Types.KindRepTyConApp
      GHC.Cmm.Info.$tcPtrOpts
      (ghc-prim-0.6.1:GHC.Types.[] @ ghc-prim-0.6.1:GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a19OP [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.6.1:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
$krep_a19OP
  = ghc-prim-0.6.1:GHC.Types.KindRepFun $krep_a19OQ $krep_a19OR

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a19ON [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.6.1:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
$krep_a19ON
  = ghc-prim-0.6.1:GHC.Types.KindRepFun $krep_a19OO $krep_a19OP

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
GHC.Cmm.Info.$tc'PtrOpts :: ghc-prim-0.6.1:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 70}]
GHC.Cmm.Info.$tc'PtrOpts
  = ghc-prim-0.6.1:GHC.Types.TyCon
      11086577099826734001##
      4931096801432934088##
      GHC.Cmm.Info.$trModule
      (ghc-prim-0.6.1:GHC.Types.TrNameS "'PtrOpts"#)
      0#
      $krep_a19ON

-- RHS size: {terms: 20, types: 3, coercions: 11, joins: 0/0}
$dIP_a19J3 :: HasCallStack
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 390 0}]
$dIP_a19J3
  = (GHC.Stack.Types.pushCallStack
       (ghc-prim-0.6.1:GHC.CString.unpackCString# "pprPanic"#,
        GHC.Stack.Types.SrcLoc
          (ghc-prim-0.6.1:GHC.CString.unpackCString# "ghc"#)
          (ghc-prim-0.6.1:GHC.CString.unpackCString# "GHC.Cmm.Info"#)
          (ghc-prim-0.6.1:GHC.CString.unpackCString#
             "E:\\\\ghc_inferTags\\\\compiler\\\\GHC\\\\Cmm\\\\Info.hs"#)
          (ghc-prim-0.6.1:GHC.Types.I# 264#)
          (ghc-prim-0.6.1:GHC.Types.I# 25#)
          (ghc-prim-0.6.1:GHC.Types.I# 264#)
          (ghc-prim-0.6.1:GHC.Types.I# 57#))
       ((GHC.Stack.Types.emptyCallStack
         `cast` (Sym (ghc-prim-0.6.1:GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: GHC.Stack.Types.CallStack
                    ~R# (?callStack::GHC.Stack.Types.CallStack)))
        `cast` (ghc-prim-0.6.1:GHC.Classes.N:IP[0]
                    <"callStack">_N <GHC.Stack.Types.CallStack>_N
                :: (?callStack::GHC.Stack.Types.CallStack)
                   ~R# GHC.Stack.Types.CallStack)))
    `cast` (Sym (ghc-prim-0.6.1:GHC.Classes.N:IP[0]
                     <"callStack">_N <GHC.Stack.Types.CallStack>_N)
            :: GHC.Stack.Types.CallStack
               ~R# (?callStack::GHC.Stack.Types.CallStack))

-- RHS size: {terms: 9, types: 2, coercions: 0, joins: 0/0}
inlineSRT :: Platform -> Bool
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 110 0}]
inlineSRT
  = \ (platform_a19uZ :: Platform) ->
      &&
        (==
           @ Arch
           GHC.Platform.ArchOS.$fEqArch
           (platformArch platform_a19uZ)
           GHC.Platform.ArchOS.ArchX86_64)
        (platformTablesNextToCode platform_a19uZ)

-- RHS size: {terms: 40, types: 26, coercions: 0, joins: 0/0}
mkSRTLit
  :: Platform -> CLabel -> Maybe CLabel -> ([CmmLit], CmmLit)
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 190] 490 90}]
mkSRTLit
  = \ (platform_a19uT :: Platform)
      (info_lbl_a19uU :: CLabel)
      (ds_d19Rv :: Maybe CLabel) ->
      case ds_d19Rv of {
        Nothing ->
          (ghc-prim-0.6.1:GHC.Types.[] @ CmmLit,
           GHC.Cmm.Expr.$WCmmInt 0 (halfWordWidth platform_a19uT));
        Just lbl_a19uV ->
          case inlineSRT platform_a19uT of {
            False ->
              (GHC.Base.build
                 @ CmmLit
                 (\ (@ a_d19RC)
                    (c_d19RD :: CmmLit -> a_d19RC -> a_d19RC)
                    (n_d19RE :: a_d19RC) ->
                    c_d19RD (GHC.Cmm.Expr.CmmLabel lbl_a19uV) n_d19RE),
               GHC.Cmm.Expr.$WCmmInt 1 (halfWordWidth platform_a19uT));
            True ->
              (ghc-prim-0.6.1:GHC.Types.[] @ CmmLit,
               GHC.Cmm.Expr.CmmLabelDiffOff
                 lbl_a19uV
                 info_lbl_a19uU
                 (ghc-prim-0.6.1:GHC.Types.I# 0#)
                 (halfWordWidth platform_a19uT))
          }
      }

-- RHS size: {terms: 14, types: 26, coercions: 0, joins: 0/0}
newStringLit
  :: forall info stmt.
     ByteString -> UniqSM (CmmLit, GenCmmDecl RawCmmStatics info stmt)
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 150 0}]
newStringLit
  = \ (@ info_a19En) (@ stmt_a19Eo) (bytes_a19vx :: ByteString) ->
      >>=
        @ UniqSM
        GHC.Types.Unique.Supply.$fMonadUniqSM
        @ GHC.Types.Unique.Unique
        @ (CmmLit, GenCmmDecl RawCmmStatics info_a19En stmt_a19Eo)
        (getUniqueM @ UniqSM GHC.Types.Unique.Supply.$fMonadUniqueUniqSM)
        (\ (uniq_a19vy :: GHC.Types.Unique.Unique) ->
           return
             @ UniqSM
             GHC.Types.Unique.Supply.$fMonadUniqSM
             @ (CmmLit, GenCmmDecl (GenCmmStatics 'True) info_a19En stmt_a19Eo)
             (mkByteStringCLit
                @ 'True
                @ info_a19En
                @ stmt_a19Eo
                (mkStringLitLabel uniq_a19vy)
                bytes_a19vx))

-- RHS size: {terms: 46, types: 131, coercions: 0, joins: 0/0}
mkProfLits
  :: Platform
     -> ProfilingInfo -> UniqSM ((CmmLit, CmmLit), [RawCmmDecl])
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 120] 400 0}]
mkProfLits
  = \ (platform_a19vq :: Platform) (ds_d19PE :: ProfilingInfo) ->
      case ds_d19PE of {
        NoProfilingInfo ->
          return
            @ UniqSM
            GHC.Types.Unique.Supply.$fMonadUniqSM
            @ ((CmmLit, CmmLit), [RawCmmDecl])
            ((zeroCLit platform_a19vq, zeroCLit platform_a19vq),
             ghc-prim-0.6.1:GHC.Types.[] @ RawCmmDecl);
        ProfilingInfo td_a19vr cd_a19vs ->
          >>=
            @ UniqSM
            GHC.Types.Unique.Supply.$fMonadUniqSM
            @ (CmmLit,
               GenCmmDecl
                 RawCmmStatics
                 (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                 CmmGraph)
            @ ((CmmLit, CmmLit), [RawCmmDecl])
            (newStringLit
               @ (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
               @ CmmGraph
               td_a19vr)
            (\ (ds_d19PR
                  :: (CmmLit,
                      GenCmmDecl
                        RawCmmStatics
                        (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                        CmmGraph)) ->
               case ds_d19PR of { (td_lit_a19vt, td_decl_a19vu) ->
               >>=
                 @ UniqSM
                 GHC.Types.Unique.Supply.$fMonadUniqSM
                 @ (CmmLit,
                    GenCmmDecl
                      RawCmmStatics
                      (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                      CmmGraph)
                 @ ((CmmLit, CmmLit), [RawCmmDecl])
                 (newStringLit
                    @ (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                    @ CmmGraph
                    cd_a19vs)
                 (\ (ds_d19PM
                       :: (CmmLit,
                           GenCmmDecl
                             RawCmmStatics
                             (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                             CmmGraph)) ->
                    case ds_d19PM of { (cd_lit_a19vv, cd_decl_a19vw) ->
                    return
                      @ UniqSM
                      GHC.Types.Unique.Supply.$fMonadUniqSM
                      @ ((CmmLit, CmmLit),
                         [GenCmmDecl
                            RawCmmStatics
                            (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                            CmmGraph])
                      ((td_lit_a19vt, cd_lit_a19vv),
                       GHC.Base.build
                         @ (GenCmmDecl
                              RawCmmStatics
                              (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                              CmmGraph)
                         (\ (@ a_d19PJ)
                            (c_d19PK
                               :: GenCmmDecl
                                    RawCmmStatics
                                    (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                                    CmmGraph
                                  -> a_d19PJ -> a_d19PJ)
                            (n_d19PL :: a_d19PJ) ->
                            c_d19PK td_decl_a19vu (c_d19PK cd_decl_a19vw n_d19PL)))
                    })
               })
      }

-- RHS size: {terms: 6, types: 2, coercions: 0, joins: 0/0}
srtEscape :: Platform -> StgHalfWord
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 160 0}]
srtEscape
  = \ (platform_a19vz :: Platform) ->
      toStgHalfWord
        platform_a19vz (negate @ Integer GHC.Num.$fNumInteger 1)

-- RHS size: {terms: 44, types: 32, coercions: 0, joins: 0/1}
mkStdInfoTable
  :: DynFlags
     -> (CmmLit, CmmLit) -> Int -> CmmLit -> CmmLit -> [CmmLit]
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 20 0 0 0] 390 0}]
mkStdInfoTable
  = \ (dflags_a19vh :: DynFlags)
      (ds_d19Q2 :: (CmmLit, CmmLit))
      (cl_type_a19vk :: Int)
      (srt_a19vl :: CmmLit)
      (layout_lit_a19vm :: CmmLit) ->
      case ds_d19Q2 of { (type_descr_a19vi, closure_descr_a19vj) ->
      let {
        tag_a19vp :: CmmLit
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 110 0}]
        tag_a19vp
          = GHC.Cmm.Expr.$WCmmInt
              (fromIntegral
                 @ Int
                 @ Integer
                 GHC.Real.$fIntegralInt
                 GHC.Num.$fNumInteger
                 cl_type_a19vk)
              (halfWordWidth (targetPlatform dflags_a19vh)) } in
      ++
        @ CmmLit
        (case sccProfilingEnabled dflags_a19vh of {
           False -> ghc-prim-0.6.1:GHC.Types.[] @ CmmLit;
           True ->
             GHC.Base.build
               @ CmmLit
               (\ (@ a_d19Qc)
                  (c_d19Qd :: CmmLit -> a_d19Qc -> a_d19Qc)
                  (n_d19Qe :: a_d19Qc) ->
                  c_d19Qd type_descr_a19vi (c_d19Qd closure_descr_a19vj n_d19Qe))
         })
        (GHC.Base.build
           @ CmmLit
           (\ (@ a_d19Q5)
              (c_d19Q6 :: CmmLit -> a_d19Q5 -> a_d19Q5)
              (n_d19Q7 :: a_d19Q5) ->
              c_d19Q6
                layout_lit_a19vm (c_d19Q6 tag_a19vp (c_d19Q6 srt_a19vl n_d19Q7))))
      }

-- RHS size: {terms: 89, types: 85, coercions: 0, joins: 0/5}
mkLivenessBits
  :: DynFlags -> Liveness -> UniqSM (CmmLit, [RawCmmDecl])
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=NEVER}]
mkLivenessBits
  = \ (dflags_a19v6 :: DynFlags) (liveness_a19v7 :: Liveness) ->
      let {
        n_bits_a19v9 :: Int
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
        n_bits_a19v9
          = length @ [] Data.Foldable.$fFoldable[] @ Bool liveness_a19v7 } in
      let {
        platform_a19v8 :: Platform
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
        platform_a19v8 = targetPlatform dflags_a19v6 } in
      let {
        bitmap_a19va :: Bitmap
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
        bitmap_a19va = mkBitmap platform_a19v8 liveness_a19v7 } in
      let {
        lits_a19vd :: [CmmLit]
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 130 30}]
        lits_a19vd
          = ghc-prim-0.6.1:GHC.Types.:
              @ CmmLit
              (mkWordCLit
                 platform_a19v8
                 (fromIntegral
                    @ Int
                    @ Integer
                    GHC.Real.$fIntegralInt
                    GHC.Num.$fNumInteger
                    n_bits_a19v9))
              (map
                 @ StgWord
                 @ CmmLit
                 (mkStgWordCLit platform_a19v8)
                 bitmap_a19va) } in
      case > @ Int
             ghc-prim-0.6.1:GHC.Classes.$fOrdInt
             n_bits_a19v9
             (mAX_SMALL_BITMAP_SIZE platform_a19v8)
      of {
        False ->
          return
            @ UniqSM
            GHC.Types.Unique.Supply.$fMonadUniqSM
            @ (CmmLit, [RawCmmDecl])
            (mkStgWordCLit
               platform_a19v8
               (.|.
                  @ StgWord
                  GHC.Runtime.Heap.Layout.$fBitsStgWord
                  (toStgWord
                     platform_a19v8
                     (fromIntegral
                        @ Int
                        @ Integer
                        GHC.Real.$fIntegralInt
                        GHC.Num.$fNumInteger
                        n_bits_a19v9))
                  (shiftL
                     @ StgWord
                     GHC.Runtime.Heap.Layout.$fBitsStgWord
                     (case bitmap_a19va of {
                        [] -> toStgWord platform_a19v8 0;
                        : b_a19ve ds_d19QT ->
                          case ds_d19QT of {
                            __DEFAULT ->
                              panic
                                @ StgWord
                                (ghc-prim-0.6.1:GHC.CString.unpackCString# "mkLiveness"#);
                            [] -> b_a19ve
                          }
                      })
                     (pc_BITMAP_BITS_SHIFT (platformConstants platform_a19v8)))),
             ghc-prim-0.6.1:GHC.Types.[] @ RawCmmDecl);
        True ->
          >>=
            @ UniqSM
            GHC.Types.Unique.Supply.$fMonadUniqSM
            @ GHC.Types.Unique.Unique
            @ (CmmLit, [RawCmmDecl])
            (getUniqueM @ UniqSM GHC.Types.Unique.Supply.$fMonadUniqueUniqSM)
            (\ (uniq_a19vf :: GHC.Types.Unique.Unique) ->
               let {
                 bitmap_lbl_a19vg :: CLabel
                 [LclId,
                  Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                          WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
                 bitmap_lbl_a19vg = mkBitmapLabel uniq_a19vf } in
               return
                 @ UniqSM
                 GHC.Types.Unique.Supply.$fMonadUniqSM
                 @ (CmmLit,
                    [GenCmmDecl
                       (GenCmmStatics 'True)
                       (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                       CmmGraph])
                 (GHC.Cmm.Expr.CmmLabel bitmap_lbl_a19vg,
                  GHC.Base.build
                    @ (GenCmmDecl
                         (GenCmmStatics 'True)
                         (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                         CmmGraph)
                    (\ (@ a_d19Qn)
                       (c_d19Qo
                          :: GenCmmDecl
                               (GenCmmStatics 'True)
                               (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                               CmmGraph
                             -> a_d19Qn -> a_d19Qn)
                       (n_d19Qp :: a_d19Qn) ->
                       c_d19Qo
                         (mkRODataLits
                            @ 'True
                            @ (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                            @ CmmGraph
                            bitmap_lbl_a19vg
                            lits_a19vd)
                         n_d19Qp)))
      }

-- RHS size: {terms: 17, types: 7, coercions: 0, joins: 0/0}
packIntsCLit :: Platform -> Int -> Int -> CmmLit
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 180 0}]
packIntsCLit
  = \ (platform_a19uQ :: Platform)
      (a_a19uR :: Int)
      (b_a19uS :: Int) ->
      packHalfWordsCLit
        platform_a19uQ
        (toStgHalfWord
           platform_a19uQ
           (fromIntegral
              @ Int
              @ Integer
              GHC.Real.$fIntegralInt
              GHC.Num.$fNumInteger
              a_a19uR))
        (toStgHalfWord
           platform_a19uQ
           (fromIntegral
              @ Int
              @ Integer
              GHC.Real.$fIntegralInt
              GHC.Num.$fNumInteger
              b_a19uS))

Rec {
-- RHS size: {terms: 338, types: 541, coercions: 0, joins: 1/12}
mkInfoTableContents [Occ=LoopBreaker]
  :: DynFlags
     -> CmmInfoTable
     -> Maybe Int
     -> UniqSM ([RawCmmDecl], InfoTableContents)
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=NEVER}]
mkInfoTableContents
  = \ (dflags_a19tU :: DynFlags)
      (info_a19tV :: CmmInfoTable)
      (mb_rts_tag_a19u0 :: Maybe Int) ->
      case info_a19tV of wild_00
      { CmmInfoTable ds_d19Wv ds_d19Ww ds_d19Wx ds_d19Wy _ [Occ=Dead] ->
      let {
        platform_a19u1 :: Platform
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
        platform_a19u1 = targetPlatform dflags_a19tU } in
      let {
        mk_pieces_a19u2
          :: ClosureTypeInfo
             -> [CmmLit]
             -> UniqSM (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
                 WorkFree=True, Expandable=True, Guidance=NEVER}]
        mk_pieces_a19u2
          = \ (ds_d19WG :: ClosureTypeInfo) (_no_srt_a19u5 :: [CmmLit]) ->
              join {
                fail_d19XP
                  :: ghc-prim-0.6.1:GHC.Prim.Void#
                     -> UniqSM (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])
                [LclId[JoinId(1)],
                 Str=<L,U>,
                 Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
                         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 130 0}]
                fail_d19XP _ [Occ=Dead, OS=OneShot]
                  = pprPanic
                      @ (UniqSM (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl]))
                      $dIP_a19J3
                      (ghc-prim-0.6.1:GHC.CString.unpackCString# "mk_pieces"#)
                      (ppr
                         @ ClosureTypeInfo
                         GHC.Runtime.Heap.Layout.$fOutputableClosureTypeInfo
                         ds_d19WG) } in
              case ds_d19WG of {
                __DEFAULT -> jump fail_d19XP ghc-prim-0.6.1:GHC.Prim.void#;
                Constr con_tag_a19u3 con_descr_a19u4 ->
                  >>=
                    @ UniqSM
                    GHC.Types.Unique.Supply.$fMonadUniqSM
                    @ (CmmLit,
                       GenCmmDecl
                         RawCmmStatics
                         (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                         CmmGraph)
                    @ (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])
                    (newStringLit
                       @ (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                       @ CmmGraph
                       con_descr_a19u4)
                    (\ (ds_d19WP
                          :: (CmmLit,
                              GenCmmDecl
                                RawCmmStatics
                                (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                                CmmGraph)) ->
                       case ds_d19WP of { (descr_lit_a19u6, decl_a19u7) ->
                       return
                         @ UniqSM
                         GHC.Types.Unique.Supply.$fMonadUniqSM
                         @ (Maybe CmmLit, Maybe CmmLit, [CmmLit],
                            [GenCmmDecl
                               RawCmmStatics
                               (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                               CmmGraph])
                         (GHC.Maybe.Just
                            @ CmmLit
                            (GHC.Cmm.Expr.$WCmmInt
                               (fromIntegral
                                  @ GHC.Types.Basic.ConTagZ
                                  @ Integer
                                  GHC.Real.$fIntegralInt
                                  GHC.Num.$fNumInteger
                                  con_tag_a19u3)
                               (halfWordWidth platform_a19u1)),
                          GHC.Maybe.Nothing @ CmmLit,
                          GHC.Base.build
                            @ CmmLit
                            (\ (@ a_d19WM)
                               (c_d19WN :: CmmLit -> a_d19WM -> a_d19WM)
                               (n_d19WO :: a_d19WM) ->
                               c_d19WN descr_lit_a19u6 n_d19WO),
                          GHC.Base.build
                            @ (GenCmmDecl
                                 RawCmmStatics
                                 (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                                 CmmGraph)
                            (\ (@ a_d19WJ)
                               (c_d19WK
                                  :: GenCmmDecl
                                       RawCmmStatics
                                       (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                                       CmmGraph
                                     -> a_d19WJ -> a_d19WJ)
                               (n_d19WL :: a_d19WJ) ->
                               c_d19WK decl_a19u7 n_d19WL))
                       });
                Fun arity_a19ub ds_d19XO ->
                  case ds_d19XO of {
                    __DEFAULT -> jump fail_d19XP ghc-prim-0.6.1:GHC.Prim.void#;
                    ArgSpec fun_type_a19uc ->
                      return
                        @ UniqSM
                        GHC.Types.Unique.Supply.$fMonadUniqSM
                        @ (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])
                        (GHC.Maybe.Nothing @ CmmLit, GHC.Maybe.Nothing @ CmmLit,
                         ghc-prim-0.6.1:GHC.Types.:
                           @ CmmLit
                           (packIntsCLit platform_a19u1 fun_type_a19uc arity_a19ub)
                           _no_srt_a19u5,
                         ghc-prim-0.6.1:GHC.Types.[] @ RawCmmDecl);
                    ArgGen arg_bits_a19ug ->
                      let {
                        srt_lit_a19uj :: CmmLit
                        [LclId,
                         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 350 0}]
                        srt_lit_a19uj
                          = case _no_srt_a19u5 of {
                              [] -> mkIntCLit platform_a19u1 (ghc-prim-0.6.1:GHC.Types.I# 0#);
                              : lit_a19uk _rest_a19ul ->
                                case &&
                                       debugIsOn
                                       (not
                                          (null
                                             @ [] Data.Foldable.$fFoldable[] @ CmmLit _rest_a19ul))
                                of {
                                  False -> lit_a19uk;
                                  True ->
                                    assertPanic
                                      @ CmmLit
                                      (ghc-prim-0.6.1:GHC.CString.unpackCString#
                                         "E:\\\\ghc_inferTags\\\\compiler\\\\GHC\\\\Cmm\\\\Info.hs"#)
                                      (ghc-prim-0.6.1:GHC.Types.I# 262#)
                                }
                            } } in
                      let {
                        slow_entry_a19ui :: CmmLit
                        [LclId,
                         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
                                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 20}]
                        slow_entry_a19ui
                          = GHC.Cmm.Expr.CmmLabel
                              (toSlowEntryLbl platform_a19u1 ds_d19Wv) } in
                      >>=
                        @ UniqSM
                        GHC.Types.Unique.Supply.$fMonadUniqSM
                        @ (CmmLit, [RawCmmDecl])
                        @ (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])
                        (mkLivenessBits dflags_a19tU arg_bits_a19ug)
                        (\ (ds_d19Xp :: (CmmLit, [RawCmmDecl])) ->
                           case ds_d19Xp of { (liveness_lit_a19um, liveness_data_a19un) ->
                           let {
                             fun_type_a19uo :: Int
                             [LclId,
                              Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                                      WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
                             fun_type_a19uo
                               = case null
                                        @ []
                                        Data.Foldable.$fFoldable[]
                                        @ RawCmmDecl
                                        liveness_data_a19un
                                 of {
                                   False -> aRG_GEN_BIG;
                                   True -> aRG_GEN
                                 } } in
                           return
                             @ UniqSM
                             GHC.Types.Unique.Supply.$fMonadUniqSM
                             @ (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])
                             (GHC.Maybe.Nothing @ CmmLit, GHC.Maybe.Nothing @ CmmLit,
                              ++
                                @ CmmLit
                                (GHC.Base.build
                                   @ CmmLit
                                   (\ (@ a_d19X8)
                                      (c_d19X9 :: CmmLit -> a_d19X8 -> a_d19X8)
                                      (n_d19Xa :: a_d19X8) ->
                                      c_d19X9
                                        (packIntsCLit platform_a19u1 fun_type_a19uo arity_a19ub)
                                        n_d19Xa))
                                (++
                                   @ CmmLit
                                   (case inlineSRT platform_a19u1 of {
                                      False ->
                                        GHC.Base.build
                                          @ CmmLit
                                          (\ (@ a_d19Xb)
                                             (c_d19Xc :: CmmLit -> a_d19Xb -> a_d19Xb)
                                             (n_d19Xd :: a_d19Xb) ->
                                             c_d19Xc srt_lit_a19uj n_d19Xd);
                                      True -> ghc-prim-0.6.1:GHC.Types.[] @ CmmLit
                                    })
                                   (GHC.Base.build
                                      @ CmmLit
                                      (\ (@ a_d19Xe)
                                         (c_d19Xf :: CmmLit -> a_d19Xe -> a_d19Xe)
                                         (n_d19Xg :: a_d19Xe) ->
                                         c_d19Xf
                                           liveness_lit_a19um (c_d19Xf slow_entry_a19ui n_d19Xg)))),
                              liveness_data_a19un)
                           })
                  };
                Thunk ->
                  return
                    @ UniqSM
                    GHC.Types.Unique.Supply.$fMonadUniqSM
                    @ (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])
                    (GHC.Maybe.Nothing @ CmmLit, GHC.Maybe.Nothing @ CmmLit,
                     _no_srt_a19u5, ghc-prim-0.6.1:GHC.Types.[] @ RawCmmDecl);
                ThunkSelector offset_a19u9 ->
                  return
                    @ UniqSM
                    GHC.Types.Unique.Supply.$fMonadUniqSM
                    @ (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])
                    (GHC.Maybe.Just
                       @ CmmLit (GHC.Cmm.Expr.$WCmmInt 0 (halfWordWidth platform_a19u1)),
                     GHC.Maybe.Just
                       @ CmmLit
                       (mkWordCLit
                          platform_a19u1
                          (fromIntegral
                             @ GHC.Runtime.Heap.Layout.SelectorOffset
                             @ Integer
                             GHC.Real.$fIntegralInt
                             GHC.Num.$fNumInteger
                             offset_a19u9)),
                     ghc-prim-0.6.1:GHC.Types.[] @ CmmLit,
                     ghc-prim-0.6.1:GHC.Types.[] @ RawCmmDecl)
              } } in
      case ds_d19Ww of {
        __DEFAULT ->
          case ds_d19Ww of {
            __DEFAULT ->
              case ds_d19Ww of {
                __DEFAULT ->
                  panic
                    @ (UniqSM ([RawCmmDecl], InfoTableContents))
                    (ghc-prim-0.6.1:GHC.CString.unpackCString# "mkInfoTableContents"#);
                HeapRep _ [Occ=Dead] ptrs_a19uD nonptrs_a19uE closure_type_a19uF ->
                  let {
                    layout_a19uG :: CmmLit
                    [LclId,
                     Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                             WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
                    layout_a19uG
                      = packIntsCLit platform_a19u1 ptrs_a19uD nonptrs_a19uE } in
                  >>=
                    @ UniqSM
                    GHC.Types.Unique.Supply.$fMonadUniqSM
                    @ ((CmmLit, CmmLit), [RawCmmDecl])
                    @ ([RawCmmDecl], InfoTableContents)
                    (mkProfLits platform_a19u1 ds_d19Wx)
                    (\ (ds_d19UR :: ((CmmLit, CmmLit), [RawCmmDecl])) ->
                       case ds_d19UR of { (prof_lits_a19uH, prof_data_a19uI) ->
                       let {
                         ds_d19UI :: ([CmmLit], CmmLit)
                         [LclId,
                          Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                                  WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
                         ds_d19UI = mkSRTLit platform_a19u1 ds_d19Wv ds_d19Wy } in
                       let {
                         srt_bitmap_a19uK :: CmmLit
                         [LclId,
                          Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                                  WorkFree=True, Expandable=False, Guidance=IF_ARGS [] 10 0}]
                         srt_bitmap_a19uK
                           = case ds_d19UI of { (_ [Occ=Dead], srt_bitmap_a19uK) ->
                             srt_bitmap_a19uK
                             } } in
                       >>=
                         @ UniqSM
                         GHC.Types.Unique.Supply.$fMonadUniqSM
                         @ (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])
                         @ ([RawCmmDecl], InfoTableContents)
                         (mk_pieces_a19u2
                            closure_type_a19uF
                            (case ds_d19UI of { (srt_label_a19uJ, _ [Occ=Dead]) ->
                             srt_label_a19uJ
                             }))
                         (\ (ds_d19UD
                               :: (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])) ->
                            case ds_d19UD of
                            { (mb_srt_field_a19uL, mb_layout_a19uM, extra_bits_a19uN,
                               ct_data_a19uO) ->
                            return
                              @ UniqSM
                              GHC.Types.Unique.Supply.$fMonadUniqSM
                              @ ([RawCmmDecl], ([CmmLit], [CmmLit]))
                              (++ @ RawCmmDecl prof_data_a19uI ct_data_a19uO,
                               (mkStdInfoTable
                                  dflags_a19tU
                                  prof_lits_a19uH
                                  (orElse @ Int mb_rts_tag_a19u0 (rtsClosureType ds_d19Ww))
                                  (orElse @ CmmLit mb_srt_field_a19uL srt_bitmap_a19uK)
                                  (orElse @ CmmLit mb_layout_a19uM layout_a19uG),
                                extra_bits_a19uN))
                            })
                       })
              };
            StackRep frame_a19ut ->
              >>=
                @ UniqSM
                GHC.Types.Unique.Supply.$fMonadUniqSM
                @ ((CmmLit, CmmLit), [RawCmmDecl])
                @ ([RawCmmDecl], InfoTableContents)
                (mkProfLits platform_a19u1 ds_d19Wx)
                (\ (ds_d19TE :: ((CmmLit, CmmLit), [RawCmmDecl])) ->
                   case ds_d19TE of { (prof_lits_a19uu, prof_data_a19uv) ->
                   let {
                     ds_d19Tv :: ([CmmLit], CmmLit)
                     [LclId,
                      Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                              WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
                     ds_d19Tv = mkSRTLit platform_a19u1 ds_d19Wv ds_d19Wy } in
                   let {
                     srt_label_a19uw :: [CmmLit]
                     [LclId,
                      Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                              WorkFree=True, Expandable=False, Guidance=IF_ARGS [] 10 0}]
                     srt_label_a19uw
                       = case ds_d19Tv of { (srt_label_a19uw, _ [Occ=Dead]) ->
                         srt_label_a19uw
                         } } in
                   let {
                     srt_bitmap_a19ux :: CmmLit
                     [LclId,
                      Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                              WorkFree=True, Expandable=False, Guidance=IF_ARGS [] 10 0}]
                     srt_bitmap_a19ux
                       = case ds_d19Tv of { (_ [Occ=Dead], srt_bitmap_a19ux) ->
                         srt_bitmap_a19ux
                         } } in
                   >>=
                     @ UniqSM
                     GHC.Types.Unique.Supply.$fMonadUniqSM
                     @ (CmmLit, [RawCmmDecl])
                     @ ([RawCmmDecl], InfoTableContents)
                     (mkLivenessBits dflags_a19tU frame_a19ut)
                     (\ (ds_d19Tq :: (CmmLit, [RawCmmDecl])) ->
                        case ds_d19Tq of { (liveness_lit_a19uy, liveness_data_a19uz) ->
                        return
                          @ UniqSM
                          GHC.Types.Unique.Supply.$fMonadUniqSM
                          @ ([RawCmmDecl], ([CmmLit], [CmmLit]))
                          (++ @ RawCmmDecl prof_data_a19uv liveness_data_a19uz,
                           (mkStdInfoTable
                              dflags_a19tU
                              prof_lits_a19uu
                              (case mb_rts_tag_a19u0 of {
                                 __DEFAULT ->
                                   case null
                                          @ []
                                          Data.Foldable.$fFoldable[]
                                          @ RawCmmDecl
                                          liveness_data_a19uz
                                   of {
                                     False -> rET_BIG;
                                     True -> rET_SMALL
                                   };
                                 Just tag_a19uC -> tag_a19uC
                               })
                              srt_bitmap_a19ux
                              liveness_lit_a19uy,
                            srt_label_a19uw))
                        })
                   })
          };
        RTSRep rts_tag_a19ur rep_a19us ->
          mkInfoTableContents
            dflags_a19tU
            (case wild_00 of
             { CmmInfoTable ds_d19RZ _ [Occ=Dead] ds_d19S1 ds_d19S2 ds_d19S3 ->
             GHC.Cmm.CmmInfoTable ds_d19RZ rep_a19us ds_d19S1 ds_d19S2 ds_d19S3
             })
            (GHC.Maybe.Just @ Int rts_tag_a19ur)
      }
      }
end Rec }

-- RHS size: {terms: 178, types: 329, coercions: 12, joins: 0/4}
mkInfoTable :: DynFlags -> CmmDeclSRTs -> UniqSM [RawCmmDecl]
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=NEVER}]
mkInfoTable
  = \ (ds_d19Y2 :: DynFlags)
      (ds_d19Y3 :: GenCmmDecl RawCmmStatics CmmTopInfo CmmGraph) ->
      case ds_d19Y3 of {
        CmmProc infos_a19tx entry_lbl_a19ty live_a19tz blocks_a19tA ->
          let {
            platform_a19tB :: Platform
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
            platform_a19tB = targetPlatform ds_d19Y2 } in
          case not (platformTablesNextToCode (targetPlatform ds_d19Y2)) of {
            False ->
              >>=
                @ UniqSM
                GHC.Types.Unique.Supply.$fMonadUniqSM
                @ ([[RawCmmDecl]],
                   [(GHC.Cmm.Dataflow.Label.Label, GenCmmStatics 'True)])
                @ [RawCmmDecl]
                (fmap
                   @ UniqSM
                   GHC.Types.Unique.Supply.$fFunctorUniqSM
                   @ [([RawCmmDecl],
                       (GHC.Cmm.Dataflow.Label.Label, GenCmmStatics 'True))]
                   @ ([[RawCmmDecl]],
                      [(GHC.Cmm.Dataflow.Label.Label, GenCmmStatics 'True)])
                   (unzip
                      @ [RawCmmDecl]
                      @ (GHC.Cmm.Dataflow.Label.Label, GenCmmStatics 'True))
                   (mapM
                      @ []
                      Data.Traversable.$fTraversable[]
                      @ UniqSM
                      @ (GHC.Cmm.Dataflow.Label.Label, CmmInfoTable)
                      @ ([RawCmmDecl],
                         (GHC.Cmm.Dataflow.Label.Label, GenCmmStatics 'True))
                      GHC.Types.Unique.Supply.$fMonadUniqSM
                      (\ (ds_d19Zm :: (GHC.Cmm.Dataflow.Label.Label, CmmInfoTable)) ->
                         case ds_d19Zm of { (lbl_a19tD, itbl_a19tE) ->
                         >>=
                           @ UniqSM
                           GHC.Types.Unique.Supply.$fMonadUniqSM
                           @ ([RawCmmDecl], InfoTableContents)
                           @ ([RawCmmDecl],
                              (GHC.Cmm.Dataflow.Label.Label, GenCmmStatics 'True))
                           (mkInfoTableContents ds_d19Y2 itbl_a19tE (GHC.Maybe.Nothing @ Int))
                           (\ (ds_d19Zp :: ([RawCmmDecl], InfoTableContents)) ->
                              case ds_d19Zp of { (top_decls_a19tF, ds_d19Zz) ->
                              case ds_d19Zz of { (std_info_a19tG, extra_bits_a19tH) ->
                              let {
                                info_lbl_a19tI :: CLabel
                                [LclId,
                                 Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                                         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
                                info_lbl_a19tI = cit_lbl itbl_a19tE } in
                              return
                                @ UniqSM
                                GHC.Types.Unique.Supply.$fMonadUniqSM
                                @ ([RawCmmDecl],
                                   (GHC.Cmm.Dataflow.Label.Label, GenCmmStatics 'True))
                                (top_decls_a19tF,
                                 (lbl_a19tD,
                                  $ @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
                                    @ [CmmStatic]
                                    @ (GenCmmStatics 'True)
                                    (GHC.Cmm.CmmStaticsRaw @ 'True info_lbl_a19tI)
                                    ($ @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
                                       @ [CmmLit]
                                       @ [CmmStatic]
                                       (map @ CmmLit @ CmmStatic GHC.Cmm.CmmStaticLit)
                                       (++
                                          @ CmmLit
                                          (reverse
                                             @ CmmLit
                                             (map
                                                @ CmmLit
                                                @ CmmLit
                                                (makeRelativeRefTo platform_a19tB info_lbl_a19tI)
                                                extra_bits_a19tH))
                                          (map
                                             @ CmmLit
                                             @ CmmLit
                                             (makeRelativeRefTo platform_a19tB info_lbl_a19tI)
                                             std_info_a19tG)))))
                              }
                              })
                         })
                      ((mapToList
                          @ GHC.Cmm.Dataflow.Label.LabelMap
                          GHC.Cmm.Dataflow.Label.$fIsMapLabelMap
                          @ CmmInfoTable
                          (info_tbls infos_a19tx))
                       `cast` (([((,)
                                    (Sub (GHC.Cmm.Dataflow.Label.D:R:KeyOfLabelMap[0]))
                                    <CmmInfoTable>_R)_R])_R
                               :: [(KeyOf GHC.Cmm.Dataflow.Label.LabelMap, CmmInfoTable)]
                                  ~R# [(GHC.Cmm.Dataflow.Label.Label, CmmInfoTable)]))))
                (\ (ds_d19Z1
                      :: ([[RawCmmDecl]],
                          [(GHC.Cmm.Dataflow.Label.Label, GenCmmStatics 'True)])) ->
                   case ds_d19Z1 of { (top_declss_a19tS, raw_infos_a19tT) ->
                   return
                     @ UniqSM
                     GHC.Types.Unique.Supply.$fMonadUniqSM
                     @ [RawCmmDecl]
                     (++
                        @ RawCmmDecl
                        (concat
                           @ [] @ RawCmmDecl Data.Foldable.$fFoldable[] top_declss_a19tS)
                        (GHC.Base.build
                           @ RawCmmDecl
                           (\ (@ a_d19YY)
                              (c_d19YZ :: RawCmmDecl -> a_d19YY -> a_d19YY)
                              (n_d19Z0 :: a_d19YY) ->
                              c_d19YZ
                                (GHC.Cmm.CmmProc
                                   @ RawCmmStatics
                                   @ (GHC.Cmm.Dataflow.Label.LabelMap (GenCmmStatics 'True))
                                   @ CmmGraph
                                   (mapFromList
                                      @ GHC.Cmm.Dataflow.Label.LabelMap
                                      GHC.Cmm.Dataflow.Label.$fIsMapLabelMap
                                      @ (GenCmmStatics 'True)
                                      (raw_infos_a19tT
                                       `cast` (([((,)
                                                    (Sub (Sym (GHC.Cmm.Dataflow.Label.D:R:KeyOfLabelMap[0])))
                                                    <GenCmmStatics 'True>_R)_R])_R
                                               :: [(GHC.Cmm.Dataflow.Label.Label,
                                                    GenCmmStatics 'True)]
                                                  ~R# [(KeyOf GHC.Cmm.Dataflow.Label.LabelMap,
                                                        GenCmmStatics 'True)])))
                                   entry_lbl_a19ty
                                   live_a19tz
                                   blocks_a19tA)
                                n_d19Z0)))
                   });
            True ->
              case topInfoTable @ RawCmmStatics @ CmmNode ds_d19Y3 of {
                Nothing ->
                  return
                    @ UniqSM
                    GHC.Types.Unique.Supply.$fMonadUniqSM
                    @ [GenCmmDecl
                         RawCmmStatics
                         (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                         CmmGraph]
                    (GHC.Base.build
                       @ (GenCmmDecl
                            RawCmmStatics
                            (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                            CmmGraph)
                       (\ (@ a_d19Yf)
                          (c_d19Yg
                             :: GenCmmDecl
                                  RawCmmStatics
                                  (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                                  CmmGraph
                                -> a_d19Yf -> a_d19Yf)
                          (n_d19Yh :: a_d19Yf) ->
                          c_d19Yg
                            (GHC.Cmm.CmmProc
                               @ RawCmmStatics
                               @ (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                               @ CmmGraph
                               (mapEmpty
                                  @ GHC.Cmm.Dataflow.Label.LabelMap
                                  GHC.Cmm.Dataflow.Label.$fIsMapLabelMap
                                  @ RawCmmStatics)
                               entry_lbl_a19ty
                               live_a19tz
                               blocks_a19tA)
                            n_d19Yh));
                Just info_a19tL ->
                  case info_a19tL of wild_XD
                  { CmmInfoTable ds_d19YT _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                 _ [Occ=Dead] ->
                  >>=
                    @ UniqSM
                    GHC.Types.Unique.Supply.$fMonadUniqSM
                    @ ([RawCmmDecl], InfoTableContents)
                    @ [RawCmmDecl]
                    (mkInfoTableContents ds_d19Y2 wild_XD (GHC.Maybe.Nothing @ Int))
                    (\ (ds_d19Yu :: ([RawCmmDecl], InfoTableContents)) ->
                       case ds_d19Yu of { (top_decls_a19tN, ds_d19YE) ->
                       case ds_d19YE of { (std_info_a19tO, extra_bits_a19tP) ->
                       let {
                         rel_extra_bits_a19tR :: [CmmLit]
                         [LclId,
                          Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                                  WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 60 0}]
                         rel_extra_bits_a19tR
                           = map
                               @ CmmLit
                               @ CmmLit
                               (makeRelativeRefTo platform_a19tB ds_d19YT)
                               extra_bits_a19tP } in
                       let {
                         rel_std_info_a19tQ :: [CmmLit]
                         [LclId,
                          Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                                  WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 60 0}]
                         rel_std_info_a19tQ
                           = map
                               @ CmmLit
                               @ CmmLit
                               (makeRelativeRefTo platform_a19tB ds_d19YT)
                               std_info_a19tO } in
                       return
                         @ UniqSM
                         GHC.Types.Unique.Supply.$fMonadUniqSM
                         @ [RawCmmDecl]
                         (++
                            @ RawCmmDecl
                            top_decls_a19tN
                            (GHC.Base.build
                               @ RawCmmDecl
                               (\ (@ a_d19Yr)
                                  (c_d19Ys :: RawCmmDecl -> a_d19Yr -> a_d19Yr)
                                  (n_d19Yt :: a_d19Yr) ->
                                  c_d19Ys
                                    (GHC.Cmm.CmmProc
                                       @ RawCmmStatics
                                       @ (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                                       @ CmmGraph
                                       (mapEmpty
                                          @ GHC.Cmm.Dataflow.Label.LabelMap
                                          GHC.Cmm.Dataflow.Label.$fIsMapLabelMap
                                          @ RawCmmStatics)
                                       entry_lbl_a19ty
                                       live_a19tz
                                       blocks_a19tA)
                                    (c_d19Ys
                                       (mkRODataLits
                                          @ 'True
                                          @ (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                                          @ CmmGraph
                                          ds_d19YT
                                          (ghc-prim-0.6.1:GHC.Types.:
                                             @ CmmLit
                                             (GHC.Cmm.Expr.CmmLabel entry_lbl_a19ty)
                                             (++ @ CmmLit rel_std_info_a19tQ rel_extra_bits_a19tR)))
                                       n_d19Yt))))
                       }
                       })
                  }
              }
          };
        CmmData sec_a19tt dat_a19tu ->
          return
            @ UniqSM
            GHC.Types.Unique.Supply.$fMonadUniqSM
            @ [GenCmmDecl
                 RawCmmStatics
                 (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                 CmmGraph]
            (GHC.Base.build
               @ (GenCmmDecl
                    RawCmmStatics
                    (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                    CmmGraph)
               (\ (@ a_d19Y6)
                  (c_d19Y7
                     :: GenCmmDecl
                          RawCmmStatics
                          (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                          CmmGraph
                        -> a_d19Y6 -> a_d19Y6)
                  (n_d19Y8 :: a_d19Y6) ->
                  c_d19Y7
                    (GHC.Cmm.CmmData
                       @ RawCmmStatics
                       @ (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                       @ CmmGraph
                       sec_a19tt
                       dat_a19tu)
                    n_d19Y8))
      }

-- RHS size: {terms: 69, types: 138, coercions: 0, joins: 0/2}
cmmToRawCmm
  :: forall a.
     DynFlags
     -> Stream IO CmmGroupSRTs a -> IO (Stream IO RawCmmGroup a)
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 750 60}]
cmmToRawCmm
  = \ (@ a_a19N4) ->
      let {
        $dFunctor_a19Oo :: Functor (Stream IO [RawCmmDecl])
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
        $dFunctor_a19Oo
          = GHC.Data.Stream.$fFunctorStream
              @ IO @ [RawCmmDecl] GHC.Base.$fMonadIO } in
      \ (dflags_a19tg :: DynFlags)
        (cmms_a19th :: Stream IO CmmGroupSRTs a_a19N4) ->
        let {
          forceRes_a19ti
            :: forall (t :: * -> *) a a. Foldable t => (a, t a) -> ()
          [LclId,
           Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
                   WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 20] 100 0}]
          forceRes_a19ti
            = \ (@ (t_a19Ng :: * -> *))
                (@ a_a19Ne)
                (@ a_a19Nl)
                ($dFoldable_a19Nr :: Foldable t_a19Ng)
                (ds_d19ZP :: (a_a19Ne, t_a19Ng a_a19Nl)) ->
                case ds_d19ZP of { (uniqs_a19tj, rawcmms_a19tk) ->
                case uniqs_a19tj of { __DEFAULT ->
                foldr
                  @ t_a19Ng
                  $dFoldable_a19Nr
                  @ a_a19Nl
                  @ ()
                  (\ (decl_a19tl :: a_a19Nl) (r_a19tm :: ()) ->
                     case decl_a19tl of { __DEFAULT -> r_a19tm })
                  ghc-prim-0.6.1:GHC.Tuple.()
                  rawcmms_a19tk
                }
                } } in
        >>=
          @ IO
          GHC.Base.$fMonadIO
          @ UniqSupply
          @ (Stream IO RawCmmGroup a_a19N4)
          (mkSplitUniqSupply (ghc-prim-0.6.1:GHC.Types.C# 'i'#))
          (\ (uniqs_a19tn :: UniqSupply) ->
             return
               @ IO
               GHC.Base.$fMonadIO
               @ (Stream IO [RawCmmDecl] a_a19N4)
               (<$>
                  @ (Stream IO [RawCmmDecl])
                  @ (UniqSupply, a_a19N4)
                  @ a_a19N4
                  $dFunctor_a19Oo
                  (snd @ UniqSupply @ a_a19N4)
                  (Stream.mapAccumL_
                     @ IO
                     @ UniqSupply
                     @ [CmmDeclSRTs]
                     @ [RawCmmDecl]
                     @ a_a19N4
                     GHC.Base.$fMonadIO
                     (\ (uniqs_a19tp :: UniqSupply) (cmm_a19tq :: [CmmDeclSRTs]) ->
                        $ @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
                          @ (IO (UniqSupply, [RawCmmDecl]))
                          @ (IO (UniqSupply, [RawCmmDecl]))
                          (withTimingSilent
                             @ IO
                             @ (UniqSupply, [RawCmmDecl])
                             Control.Monad.IO.Class.$fMonadIOIO
                             dflags_a19tg
                             (text
                                (ghc-prim-0.6.1:GHC.CString.unpackCString# "Cmm -> Raw Cmm"#))
                             (forceRes_a19ti
                                @ [] @ UniqSupply @ RawCmmDecl Data.Foldable.$fFoldable[]))
                          (case $ @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
                                  @ (UniqSM [RawCmmDecl])
                                  @ ([RawCmmDecl], UniqSupply)
                                  (initUs @ [RawCmmDecl] uniqs_a19tp)
                                  (concatMapM
                                     @ UniqSM
                                     @ CmmDeclSRTs
                                     @ RawCmmDecl
                                     GHC.Types.Unique.Supply.$fMonadUniqSM
                                     (mkInfoTable dflags_a19tg)
                                     cmm_a19tq)
                           of
                           { (b_a19tr, uniqs'_a19ts) ->
                           return
                             @ IO
                             GHC.Base.$fMonadIO
                             @ (UniqSupply, [RawCmmDecl])
                             (uniqs'_a19ts, b_a19tr)
                           }))
                     uniqs_a19tn
                     cmms_a19th)))

-- RHS size: {terms: 8, types: 2, coercions: 0, joins: 0/0}
maxStdInfoTableSizeW :: WordOff
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 90 0}]
maxStdInfoTableSizeW
  = + @ WordOff
      GHC.Num.$fNumInt
      (+ @ WordOff
         GHC.Num.$fNumInt
         (ghc-prim-0.6.1:GHC.Types.I# 1#)
         fixedInfoTableSizeW)
      profInfoTableSizeW

-- RHS size: {terms: 5, types: 1, coercions: 0, joins: 0/0}
maxRetInfoTableSizeW :: WordOff
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
maxRetInfoTableSizeW
  = + @ WordOff
      GHC.Num.$fNumInt
      maxStdInfoTableSizeW
      (ghc-prim-0.6.1:GHC.Types.I# 1#)

-- RHS size: {terms: 12, types: 3, coercions: 0, joins: 0/0}
stdInfoTableSizeW :: Profile -> WordOff
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 90 0}]
stdInfoTableSizeW
  = \ (profile_a19wi :: Profile) ->
      + @ WordOff
        GHC.Num.$fNumInt
        fixedInfoTableSizeW
        (case profileIsProfiling profile_a19wi of {
           False -> ghc-prim-0.6.1:GHC.Types.I# 0#;
           True -> profInfoTableSizeW
         })

-- RHS size: {terms: 7, types: 2, coercions: 0, joins: 0/0}
stdInfoTableSizeB :: Profile -> ByteOff
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 80 0}]
stdInfoTableSizeB
  = \ (profile_a19wj :: Profile) ->
      * @ WordOff
        GHC.Num.$fNumInt
        (stdInfoTableSizeW profile_a19wj)
        (profileWordSizeInBytes profile_a19wj)

-- RHS size: {terms: 8, types: 2, coercions: 0, joins: 0/0}
stdSrtBitmapOffset :: Profile -> ByteOff
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 100 0}]
stdSrtBitmapOffset
  = \ (profile_a19wk :: Profile) ->
      - @ ByteOff
        GHC.Num.$fNumInt
        (stdInfoTableSizeB profile_a19wk)
        (halfWordSize (profilePlatform profile_a19wk))

-- RHS size: {terms: 13, types: 3, coercions: 0, joins: 0/1}
infoTableSrtBitmap :: Profile -> CmmExpr -> CmmExpr
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 140 0}]
infoTableSrtBitmap
  = \ (profile_a19vU :: Profile) (info_tbl_a19vV :: CmmExpr) ->
      let {
        platform_a19vW :: Platform
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
        platform_a19vW = profilePlatform profile_a19vU } in
      GHC.Cmm.Expr.$WCmmLoad
        (cmmOffsetB
           platform_a19vW info_tbl_a19vV (stdSrtBitmapOffset profile_a19vU))
        (bHalfWord platform_a19vW)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
infoTableConstrTag :: Profile -> CmmExpr -> CmmExpr
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
infoTableConstrTag = infoTableSrtBitmap

-- RHS size: {terms: 7, types: 2, coercions: 0, joins: 0/0}
stdClosureTypeOffset :: Profile -> ByteOff
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 80 0}]
stdClosureTypeOffset
  = \ (profile_a19wl :: Profile) ->
      - @ ByteOff
        GHC.Num.$fNumInt
        (stdInfoTableSizeB profile_a19wl)
        (profileWordSizeInBytes profile_a19wl)

-- RHS size: {terms: 13, types: 3, coercions: 0, joins: 0/1}
infoTableClosureType :: Profile -> CmmExpr -> CmmExpr
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 140 0}]
infoTableClosureType
  = \ (profile_a19vX :: Profile) (info_tbl_a19vY :: CmmExpr) ->
      let {
        platform_a19vZ :: Platform
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
        platform_a19vZ = profilePlatform profile_a19vX } in
      GHC.Cmm.Expr.$WCmmLoad
        (cmmOffsetB
           platform_a19vZ info_tbl_a19vY (stdClosureTypeOffset profile_a19vX))
        (bHalfWord platform_a19vZ)

-- RHS size: {terms: 11, types: 3, coercions: 0, joins: 0/0}
stdPtrsOffset :: Profile -> ByteOff
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 130 0}]
stdPtrsOffset
  = \ (profile_a19wm :: Profile) ->
      - @ ByteOff
        GHC.Num.$fNumInt
        (stdInfoTableSizeB profile_a19wm)
        (* @ Int
           GHC.Num.$fNumInt
           (ghc-prim-0.6.1:GHC.Types.I# 2#)
           (profileWordSizeInBytes profile_a19wm))

-- RHS size: {terms: 13, types: 3, coercions: 0, joins: 0/1}
infoTablePtrs :: Profile -> CmmExpr -> CmmExpr
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 140 0}]
infoTablePtrs
  = \ (profile_a19w0 :: Profile) (info_tbl_a19w1 :: CmmExpr) ->
      let {
        platform_a19w2 :: Platform
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
        platform_a19w2 = profilePlatform profile_a19w0 } in
      GHC.Cmm.Expr.$WCmmLoad
        (cmmOffsetB
           platform_a19w2 info_tbl_a19w1 (stdPtrsOffset profile_a19w0))
        (bHalfWord platform_a19w2)

-- RHS size: {terms: 16, types: 4, coercions: 0, joins: 0/0}
stdNonPtrsOffset :: Profile -> ByteOff
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 210 0}]
stdNonPtrsOffset
  = \ (profile_a19wn :: Profile) ->
      + @ ByteOff
        GHC.Num.$fNumInt
        (- @ ByteOff
           GHC.Num.$fNumInt
           (stdInfoTableSizeB profile_a19wn)
           (* @ Int
              GHC.Num.$fNumInt
              (ghc-prim-0.6.1:GHC.Types.I# 2#)
              (profileWordSizeInBytes profile_a19wn)))
        (halfWordSize (profilePlatform profile_a19wn))

-- RHS size: {terms: 13, types: 3, coercions: 0, joins: 0/1}
infoTableNonPtrs :: Profile -> CmmExpr -> CmmExpr
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 140 0}]
infoTableNonPtrs
  = \ (profile_a19w3 :: Profile) (info_tbl_a19w4 :: CmmExpr) ->
      let {
        platform_a19w5 :: Platform
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
        platform_a19w5 = profilePlatform profile_a19w3 } in
      GHC.Cmm.Expr.$WCmmLoad
        (cmmOffsetB
           platform_a19w5 info_tbl_a19w4 (stdNonPtrsOffset profile_a19w3))
        (bHalfWord platform_a19w5)

-- RHS size: {terms: 7, types: 2, coercions: 0, joins: 0/0}
conInfoTableSizeB :: Profile -> Int
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 80 0}]
conInfoTableSizeB
  = \ (profile_a19wo :: Profile) ->
      + @ ByteOff
        GHC.Num.$fNumInt
        (stdInfoTableSizeB profile_a19wo)
        (profileWordSizeInBytes profile_a19wo)

-- RHS size: {terms: 31, types: 7, coercions: 0, joins: 0/1}
funInfoTable :: Profile -> CmmExpr -> CmmExpr
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 350 0}]
funInfoTable
  = \ (profile_a19w6 :: Profile) (info_ptr_a19w7 :: CmmExpr) ->
      let {
        platform_a19w8 :: Platform
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
        platform_a19w8 = profilePlatform profile_a19w6 } in
      case platformTablesNextToCode platform_a19w8 of {
        False ->
          cmmOffsetW
            platform_a19w8
            info_ptr_a19w7
            (+ @ WordOff
               GHC.Num.$fNumInt
               (ghc-prim-0.6.1:GHC.Types.I# 1#)
               (stdInfoTableSizeW profile_a19w6));
        True ->
          cmmOffsetB
            platform_a19w8
            info_ptr_a19w7
            (- @ ByteOff
               GHC.Num.$fNumInt
               (negate
                  @ ByteOff GHC.Num.$fNumInt (stdInfoTableSizeB profile_a19w6))
               (pc_SIZEOF_StgFunInfoExtraRev (platformConstants platform_a19w8)))
      }

-- RHS size: {terms: 46, types: 24, coercions: 0, joins: 0/4}
funInfoArity :: Profile -> CmmExpr -> CmmExpr
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 430 0}]
funInfoArity
  = \ (profile_a19w9 :: Profile) (iptr_a19wa :: CmmExpr) ->
      let {
        platform_a19wb :: Platform
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
        platform_a19wb = profilePlatform profile_a19w9 } in
      let {
        pc_a19wh :: PlatformConstants
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
        pc_a19wh = platformConstants platform_a19wb } in
      let {
        ds_d19P6 :: (Int, Int)
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 140 60}]
        ds_d19P6
          = case platformTablesNextToCode platform_a19wb of {
              False ->
                (pc_REP_StgFunInfoExtraFwd_arity pc_a19wh,
                 pc_OFFSET_StgFunInfoExtraFwd_arity pc_a19wh);
              True ->
                (pc_REP_StgFunInfoExtraRev_arity pc_a19wh,
                 pc_OFFSET_StgFunInfoExtraRev_arity pc_a19wh)
            } } in
      let {
        rep_bytes_a19wf :: Int
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=True, Expandable=False, Guidance=IF_ARGS [] 10 0}]
        rep_bytes_a19wf
          = case ds_d19P6 of { (rep_bytes_a19wf, _ [Occ=Dead]) ->
            rep_bytes_a19wf
            } } in
      cmmToWord
        platform_a19wb
        (cmmLoadIndex
           platform_a19wb
           (cmmBits (widthFromBytes rep_bytes_a19wf))
           (funInfoTable profile_a19w9 iptr_a19wa)
           (div
              @ Int
              GHC.Real.$fIntegralInt
              (case ds_d19P6 of { (_ [Occ=Dead], offset_a19wg) -> offset_a19wg })
              rep_bytes_a19wf))

-- RHS size: {terms: 22, types: 5, coercions: 0, joins: 0/1}
infoTable :: Profile -> CmmExpr -> CmmExpr
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 210 0}]
infoTable
  = \ (profile_a19vR :: Profile) (info_ptr_a19vS :: CmmExpr) ->
      let {
        platform_a19vT :: Platform
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
        platform_a19vT = profilePlatform profile_a19vR } in
      case platformTablesNextToCode platform_a19vT of {
        False ->
          cmmOffsetW
            platform_a19vT info_ptr_a19vS (ghc-prim-0.6.1:GHC.Types.I# 1#);
        True ->
          cmmOffsetB
            platform_a19vT
            info_ptr_a19vS
            (negate
               @ ByteOff GHC.Num.$fNumInt (stdInfoTableSizeB profile_a19vR))
      }

-- RHS size: {terms: 29, types: 12, coercions: 0, joins: 0/3}
getConstrTag :: PtrOpts -> CmmExpr -> CmmExpr
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 270 30}]
getConstrTag
  = \ (opts_a19vH :: PtrOpts) (closure_ptr_a19vI :: CmmExpr) ->
      let {
        profile_a19vL :: Profile
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
        profile_a19vL = po_profile opts_a19vH } in
      let {
        platform_a19vK :: Platform
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
        platform_a19vK = profilePlatform profile_a19vL } in
      let {
        info_table_a19vJ :: CmmExpr
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 60 0}]
        info_table_a19vJ
          = infoTable
              profile_a19vL (closureInfoPtr opts_a19vH closure_ptr_a19vI) } in
      GHC.Cmm.Expr.CmmMachOp
        (GHC.Cmm.MachOp.MO_UU_Conv
           (halfWordWidth platform_a19vK) (wordWidth platform_a19vK))
        (GHC.Base.build
           @ CmmExpr
           (\ (@ a_d19Py)
              (c_d19Pz :: CmmExpr -> a_d19Py -> a_d19Py)
              (n_d19PA :: a_d19Py) ->
              c_d19Pz
                (infoTableConstrTag profile_a19vL info_table_a19vJ) n_d19PA))

-- RHS size: {terms: 29, types: 12, coercions: 0, joins: 0/3}
cmmGetClosureType :: PtrOpts -> CmmExpr -> CmmExpr
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 270 30}]
cmmGetClosureType
  = \ (opts_a19vM :: PtrOpts) (closure_ptr_a19vN :: CmmExpr) ->
      let {
        profile_a19vQ :: Profile
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
        profile_a19vQ = po_profile opts_a19vM } in
      let {
        platform_a19vP :: Platform
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
        platform_a19vP = profilePlatform profile_a19vQ } in
      let {
        info_table_a19vO :: CmmExpr
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 60 0}]
        info_table_a19vO
          = infoTable
              profile_a19vQ (closureInfoPtr opts_a19vM closure_ptr_a19vN) } in
      GHC.Cmm.Expr.CmmMachOp
        (GHC.Cmm.MachOp.MO_UU_Conv
           (halfWordWidth platform_a19vP) (wordWidth platform_a19vP))
        (GHC.Base.build
           @ CmmExpr
           (\ (@ a_d19PB)
              (c_d19PC :: CmmExpr -> a_d19PB -> a_d19PB)
              (n_d19PD :: a_d19PB) ->
              c_d19PC
                (infoTableClosureType profile_a19vQ info_table_a19vO) n_d19PD))



==================== Desugar (after optimization) ====================
2020-11-24 12:44:28.6838104 UTC

Result size of Desugar (after optimization)
  = {terms: 1,342, types: 1,611, coercions: 23, joins: 1/41}

-- RHS size: {terms: 5, types: 4, coercions: 0, joins: 0/0}
po_align_check :: PtrOpts -> Bool
[LclIdX[[RecSel]],
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)}]
po_align_check
  = \ (ds_d5kbX :: PtrOpts) ->
      case ds_d5kbX of { PtrOpts _ [Occ=Dead] ds_d5kbZ -> ds_d5kbZ }

-- RHS size: {terms: 5, types: 4, coercions: 0, joins: 0/0}
po_profile :: PtrOpts -> Profile
[LclIdX[[RecSel]],
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)}]
po_profile
  = \ (ds_d5kbU :: PtrOpts) ->
      case ds_d5kbU of { PtrOpts ds_d5kbV _ [Occ=Dead] -> ds_d5kbV }

-- RHS size: {terms: 8, types: 6, coercions: 0, joins: 0/0}
mkEmptyContInfoTable :: CLabel -> CmmInfoTable
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 30 60}]
mkEmptyContInfoTable
  = \ (info_lbl_a5jFo :: CLabel) ->
      GHC.Cmm.CmmInfoTable
        info_lbl_a5jFo
        (mkStackRep (ghc-prim-0.6.1:GHC.Types.[] @ Bool))
        GHC.Cmm.NoProfilingInfo
        (GHC.Maybe.Nothing @ CLabel)
        (GHC.Maybe.Nothing
           @ (GHC.Types.Var.Id, GHC.Types.CostCentre.CostCentreStack))

-- RHS size: {terms: 28, types: 8, coercions: 0, joins: 0/0}
makeRelativeRefTo :: Platform -> CLabel -> CmmLit -> CmmLit
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 70] 140 100}]
makeRelativeRefTo
  = \ (platform_a5jH9 :: Platform)
      (info_lbl_a5jHa :: CLabel)
      (lit_a5jHb :: CmmLit) ->
      case platformTablesNextToCode platform_a5jH9 of {
        False -> lit_a5jHb;
        True ->
          case lit_a5jHb of {
            __DEFAULT -> lit_a5jHb;
            CmmLabel lbl_a5jHc ->
              GHC.Cmm.Expr.CmmLabelDiffOff
                lbl_a5jHc
                info_lbl_a5jHa
                (ghc-prim-0.6.1:GHC.Types.I# 0#)
                (wordWidth platform_a5jH9);
            CmmLabelOff lbl_a5jHd off_a5jHe ->
              GHC.Cmm.Expr.CmmLabelDiffOff
                lbl_a5jHd info_lbl_a5jHa off_a5jHe (wordWidth platform_a5jH9)
          }
      }

-- RHS size: {terms: 25, types: 11, coercions: 0, joins: 0/1}
wordAligned :: PtrOpts -> CmmExpr -> CmmExpr
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 200 30}]
wordAligned
  = \ (opts_a5jHJ :: PtrOpts) (e_a5jHK :: CmmExpr) ->
      let {
        platform_a5jHL :: Platform
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 40 0}]
        platform_a5jHL = profilePlatform (po_profile opts_a5jHJ) } in
      case po_align_check opts_a5jHJ of {
        False -> e_a5jHK;
        True ->
          GHC.Cmm.Expr.CmmMachOp
            (GHC.Cmm.MachOp.MO_AlignmentCheck
               (platformWordSizeInBytes platform_a5jHL)
               (wordWidth platform_a5jHL))
            (GHC.Base.build
               @ CmmExpr
               (\ (@ a_d5k1l)
                  (c_d5k1m :: CmmExpr -> a_d5k1l -> a_d5k1l)
                  (n_d5k1n :: a_d5k1l) ->
                  c_d5k1m e_a5jHK n_d5k1n))
      }

-- RHS size: {terms: 10, types: 2, coercions: 0, joins: 0/0}
closureInfoPtr :: PtrOpts -> CmmExpr -> CmmExpr
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 120 0}]
closureInfoPtr
  = \ (opts_a5jHM :: PtrOpts) (e_a5jHN :: CmmExpr) ->
      GHC.Cmm.Expr.$WCmmLoad
        (wordAligned opts_a5jHM e_a5jHN)
        (bWord (profilePlatform (po_profile opts_a5jHM)))

-- RHS size: {terms: 12, types: 3, coercions: 0, joins: 0/0}
entryCode :: Platform -> CmmExpr -> CmmExpr
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 90 0}]
entryCode
  = \ (platform_a5jHO :: Platform) (e_a5jHP :: CmmExpr) ->
      case platformTablesNextToCode platform_a5jHO of {
        False -> GHC.Cmm.Expr.$WCmmLoad e_a5jHP (bWord platform_a5jHO);
        True -> e_a5jHP
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
fixedInfoTableSizeW :: WordOff
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
fixedInfoTableSizeW = ghc-prim-0.6.1:GHC.Types.I# 2#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
profInfoTableSizeW :: WordOff
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
profInfoTableSizeW = ghc-prim-0.6.1:GHC.Types.I# 2#

-- RHS size: {terms: 5, types: 0, coercions: 0, joins: 0/0}
GHC.Cmm.Info.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 90 30}]
GHC.Cmm.Info.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module
      (ghc-prim-0.6.1:GHC.Types.TrNameS "ghc"#)
      (ghc-prim-0.6.1:GHC.Types.TrNameS "GHC.Cmm.Info"#)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_a5k0O [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.6.1:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
$krep_a5k0O
  = ghc-prim-0.6.1:GHC.Types.KindRepTyConApp
      ghc-prim-0.6.1:GHC.Types.$tcBool
      (ghc-prim-0.6.1:GHC.Types.[] @ ghc-prim-0.6.1:GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_a5k0M [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.6.1:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
$krep_a5k0M
  = ghc-prim-0.6.1:GHC.Types.KindRepTyConApp
      GHC.Platform.Profile.$tcProfile
      (ghc-prim-0.6.1:GHC.Types.[] @ ghc-prim-0.6.1:GHC.Types.KindRep)

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
GHC.Cmm.Info.$tcPtrOpts :: ghc-prim-0.6.1:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 70}]
GHC.Cmm.Info.$tcPtrOpts
  = ghc-prim-0.6.1:GHC.Types.TyCon
      10783844252980521413##
      13019815378033756893##
      GHC.Cmm.Info.$trModule
      (ghc-prim-0.6.1:GHC.Types.TrNameS "PtrOpts"#)
      0#
      ghc-prim-0.6.1:GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_a5k0P [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.6.1:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
$krep_a5k0P
  = ghc-prim-0.6.1:GHC.Types.KindRepTyConApp
      GHC.Cmm.Info.$tcPtrOpts
      (ghc-prim-0.6.1:GHC.Types.[] @ ghc-prim-0.6.1:GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5k0N [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.6.1:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
$krep_a5k0N
  = ghc-prim-0.6.1:GHC.Types.KindRepFun $krep_a5k0O $krep_a5k0P

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5k0L [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.6.1:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
$krep_a5k0L
  = ghc-prim-0.6.1:GHC.Types.KindRepFun $krep_a5k0M $krep_a5k0N

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
GHC.Cmm.Info.$tc'PtrOpts :: ghc-prim-0.6.1:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 70}]
GHC.Cmm.Info.$tc'PtrOpts
  = ghc-prim-0.6.1:GHC.Types.TyCon
      11086577099826734001##
      4931096801432934088##
      GHC.Cmm.Info.$trModule
      (ghc-prim-0.6.1:GHC.Types.TrNameS "'PtrOpts"#)
      0#
      $krep_a5k0L

-- RHS size: {terms: 20, types: 3, coercions: 11, joins: 0/0}
$dIP_a5jV3 :: HasCallStack
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 390 0}]
$dIP_a5jV3
  = (GHC.Stack.Types.pushCallStack
       (ghc-prim-0.6.1:GHC.CString.unpackCString# "pprPanic"#,
        GHC.Stack.Types.SrcLoc
          (ghc-prim-0.6.1:GHC.CString.unpackCString# "ghc"#)
          (ghc-prim-0.6.1:GHC.CString.unpackCString# "GHC.Cmm.Info"#)
          (ghc-prim-0.6.1:GHC.CString.unpackCString#
             "E:\\\\ghc_inferTags\\\\compiler\\\\GHC\\\\Cmm\\\\Info.hs"#)
          (ghc-prim-0.6.1:GHC.Types.I# 264#)
          (ghc-prim-0.6.1:GHC.Types.I# 25#)
          (ghc-prim-0.6.1:GHC.Types.I# 264#)
          (ghc-prim-0.6.1:GHC.Types.I# 57#))
       ((GHC.Stack.Types.emptyCallStack
         `cast` (Sym (ghc-prim-0.6.1:GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: GHC.Stack.Types.CallStack
                    ~R# (?callStack::GHC.Stack.Types.CallStack)))
        `cast` (ghc-prim-0.6.1:GHC.Classes.N:IP[0]
                    <"callStack">_N <GHC.Stack.Types.CallStack>_N
                :: (?callStack::GHC.Stack.Types.CallStack)
                   ~R# GHC.Stack.Types.CallStack)))
    `cast` (Sym (ghc-prim-0.6.1:GHC.Classes.N:IP[0]
                     <"callStack">_N <GHC.Stack.Types.CallStack>_N)
            :: GHC.Stack.Types.CallStack
               ~R# (?callStack::GHC.Stack.Types.CallStack))

-- RHS size: {terms: 9, types: 2, coercions: 0, joins: 0/0}
inlineSRT :: Platform -> Bool
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 110 0}]
inlineSRT
  = \ (platform_a5jH8 :: Platform) ->
      &&
        (==
           @ Arch
           GHC.Platform.ArchOS.$fEqArch
           (platformArch platform_a5jH8)
           GHC.Platform.ArchOS.ArchX86_64)
        (platformTablesNextToCode platform_a5jH8)

-- RHS size: {terms: 40, types: 26, coercions: 0, joins: 0/0}
mkSRTLit
  :: Platform -> CLabel -> Maybe CLabel -> ([CmmLit], CmmLit)
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 190] 490 90}]
mkSRTLit
  = \ (platform_a5jH2 :: Platform)
      (info_lbl_a5jH3 :: CLabel)
      (ds_d5k3t :: Maybe CLabel) ->
      case ds_d5k3t of {
        Nothing ->
          (ghc-prim-0.6.1:GHC.Types.[] @ CmmLit,
           GHC.Cmm.Expr.$WCmmInt 0 (halfWordWidth platform_a5jH2));
        Just lbl_a5jH4 ->
          case inlineSRT platform_a5jH2 of {
            False ->
              (GHC.Base.build
                 @ CmmLit
                 (\ (@ a_d5k3A)
                    (c_d5k3B :: CmmLit -> a_d5k3A -> a_d5k3A)
                    (n_d5k3C :: a_d5k3A) ->
                    c_d5k3B (GHC.Cmm.Expr.CmmLabel lbl_a5jH4) n_d5k3C),
               GHC.Cmm.Expr.$WCmmInt 1 (halfWordWidth platform_a5jH2));
            True ->
              (ghc-prim-0.6.1:GHC.Types.[] @ CmmLit,
               GHC.Cmm.Expr.CmmLabelDiffOff
                 lbl_a5jH4
                 info_lbl_a5jH3
                 (ghc-prim-0.6.1:GHC.Types.I# 0#)
                 (halfWordWidth platform_a5jH2))
          }
      }

-- RHS size: {terms: 14, types: 26, coercions: 0, joins: 0/0}
newStringLit
  :: forall info stmt.
     ByteString -> UniqSM (CmmLit, GenCmmDecl RawCmmStatics info stmt)
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 150 0}]
newStringLit
  = \ (@ info_a5jQm) (@ stmt_a5jQn) (bytes_a5jHG :: ByteString) ->
      >>=
        @ UniqSM
        GHC.Types.Unique.Supply.$fMonadUniqSM
        @ GHC.Types.Unique.Unique
        @ (CmmLit, GenCmmDecl RawCmmStatics info_a5jQm stmt_a5jQn)
        (getUniqueM @ UniqSM GHC.Types.Unique.Supply.$fMonadUniqueUniqSM)
        (\ (uniq_a5jHH :: GHC.Types.Unique.Unique) ->
           return
             @ UniqSM
             GHC.Types.Unique.Supply.$fMonadUniqSM
             @ (CmmLit, GenCmmDecl (GenCmmStatics 'True) info_a5jQm stmt_a5jQn)
             (mkByteStringCLit
                @ 'True
                @ info_a5jQm
                @ stmt_a5jQn
                (mkStringLitLabel uniq_a5jHH)
                bytes_a5jHG))

-- RHS size: {terms: 46, types: 131, coercions: 0, joins: 0/0}
mkProfLits
  :: Platform
     -> ProfilingInfo -> UniqSM ((CmmLit, CmmLit), [RawCmmDecl])
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 120] 400 0}]
mkProfLits
  = \ (platform_a5jHz :: Platform) (ds_d5k1C :: ProfilingInfo) ->
      case ds_d5k1C of {
        NoProfilingInfo ->
          return
            @ UniqSM
            GHC.Types.Unique.Supply.$fMonadUniqSM
            @ ((CmmLit, CmmLit), [RawCmmDecl])
            ((zeroCLit platform_a5jHz, zeroCLit platform_a5jHz),
             ghc-prim-0.6.1:GHC.Types.[] @ RawCmmDecl);
        ProfilingInfo td_a5jHA cd_a5jHB ->
          >>=
            @ UniqSM
            GHC.Types.Unique.Supply.$fMonadUniqSM
            @ (CmmLit,
               GenCmmDecl
                 RawCmmStatics
                 (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                 CmmGraph)
            @ ((CmmLit, CmmLit), [RawCmmDecl])
            (newStringLit
               @ (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
               @ CmmGraph
               td_a5jHA)
            (\ (ds_d5k1P
                  :: (CmmLit,
                      GenCmmDecl
                        RawCmmStatics
                        (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                        CmmGraph)) ->
               case ds_d5k1P of { (td_lit_a5jHC, td_decl_a5jHD) ->
               >>=
                 @ UniqSM
                 GHC.Types.Unique.Supply.$fMonadUniqSM
                 @ (CmmLit,
                    GenCmmDecl
                      RawCmmStatics
                      (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                      CmmGraph)
                 @ ((CmmLit, CmmLit), [RawCmmDecl])
                 (newStringLit
                    @ (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                    @ CmmGraph
                    cd_a5jHB)
                 (\ (ds_d5k1K
                       :: (CmmLit,
                           GenCmmDecl
                             RawCmmStatics
                             (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                             CmmGraph)) ->
                    case ds_d5k1K of { (cd_lit_a5jHE, cd_decl_a5jHF) ->
                    return
                      @ UniqSM
                      GHC.Types.Unique.Supply.$fMonadUniqSM
                      @ ((CmmLit, CmmLit),
                         [GenCmmDecl
                            RawCmmStatics
                            (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                            CmmGraph])
                      ((td_lit_a5jHC, cd_lit_a5jHE),
                       GHC.Base.build
                         @ (GenCmmDecl
                              RawCmmStatics
                              (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                              CmmGraph)
                         (\ (@ a_d5k1H)
                            (c_d5k1I
                               :: GenCmmDecl
                                    RawCmmStatics
                                    (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                                    CmmGraph
                                  -> a_d5k1H -> a_d5k1H)
                            (n_d5k1J :: a_d5k1H) ->
                            c_d5k1I td_decl_a5jHD (c_d5k1I cd_decl_a5jHF n_d5k1J)))
                    })
               })
      }

-- RHS size: {terms: 6, types: 2, coercions: 0, joins: 0/0}
srtEscape :: Platform -> StgHalfWord
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 160 0}]
srtEscape
  = \ (platform_a5jHI :: Platform) ->
      toStgHalfWord
        platform_a5jHI (negate @ Integer GHC.Num.$fNumInteger 1)

-- RHS size: {terms: 44, types: 32, coercions: 0, joins: 0/1}
mkStdInfoTable
  :: DynFlags
     -> (CmmLit, CmmLit) -> Int -> CmmLit -> CmmLit -> [CmmLit]
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 20 0 0 0] 390 0}]
mkStdInfoTable
  = \ (dflags_a5jHq :: DynFlags)
      (ds_d5k20 :: (CmmLit, CmmLit))
      (cl_type_a5jHt :: Int)
      (srt_a5jHu :: CmmLit)
      (layout_lit_a5jHv :: CmmLit) ->
      case ds_d5k20 of { (type_descr_a5jHr, closure_descr_a5jHs) ->
      let {
        tag_a5jHy :: CmmLit
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 110 0}]
        tag_a5jHy
          = GHC.Cmm.Expr.$WCmmInt
              (fromIntegral
                 @ Int
                 @ Integer
                 GHC.Real.$fIntegralInt
                 GHC.Num.$fNumInteger
                 cl_type_a5jHt)
              (halfWordWidth (targetPlatform dflags_a5jHq)) } in
      ++
        @ CmmLit
        (case sccProfilingEnabled dflags_a5jHq of {
           False -> ghc-prim-0.6.1:GHC.Types.[] @ CmmLit;
           True ->
             GHC.Base.build
               @ CmmLit
               (\ (@ a_d5k2a)
                  (c_d5k2b :: CmmLit -> a_d5k2a -> a_d5k2a)
                  (n_d5k2c :: a_d5k2a) ->
                  c_d5k2b type_descr_a5jHr (c_d5k2b closure_descr_a5jHs n_d5k2c))
         })
        (GHC.Base.build
           @ CmmLit
           (\ (@ a_d5k23)
              (c_d5k24 :: CmmLit -> a_d5k23 -> a_d5k23)
              (n_d5k25 :: a_d5k23) ->
              c_d5k24
                layout_lit_a5jHv (c_d5k24 tag_a5jHy (c_d5k24 srt_a5jHu n_d5k25))))
      }

-- RHS size: {terms: 89, types: 85, coercions: 0, joins: 0/5}
mkLivenessBits
  :: DynFlags -> Liveness -> UniqSM (CmmLit, [RawCmmDecl])
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=NEVER}]
mkLivenessBits
  = \ (dflags_a5jHf :: DynFlags) (liveness_a5jHg :: Liveness) ->
      let {
        n_bits_a5jHi :: Int
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
        n_bits_a5jHi
          = length @ [] Data.Foldable.$fFoldable[] @ Bool liveness_a5jHg } in
      let {
        platform_a5jHh :: Platform
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
        platform_a5jHh = targetPlatform dflags_a5jHf } in
      let {
        bitmap_a5jHj :: Bitmap
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
        bitmap_a5jHj = mkBitmap platform_a5jHh liveness_a5jHg } in
      let {
        lits_a5jHm :: [CmmLit]
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 130 30}]
        lits_a5jHm
          = ghc-prim-0.6.1:GHC.Types.:
              @ CmmLit
              (mkWordCLit
                 platform_a5jHh
                 (fromIntegral
                    @ Int
                    @ Integer
                    GHC.Real.$fIntegralInt
                    GHC.Num.$fNumInteger
                    n_bits_a5jHi))
              (map
                 @ StgWord
                 @ CmmLit
                 (mkStgWordCLit platform_a5jHh)
                 bitmap_a5jHj) } in
      case > @ Int
             ghc-prim-0.6.1:GHC.Classes.$fOrdInt
             n_bits_a5jHi
             (mAX_SMALL_BITMAP_SIZE platform_a5jHh)
      of {
        False ->
          return
            @ UniqSM
            GHC.Types.Unique.Supply.$fMonadUniqSM
            @ (CmmLit, [RawCmmDecl])
            (mkStgWordCLit
               platform_a5jHh
               (.|.
                  @ StgWord
                  GHC.Runtime.Heap.Layout.$fBitsStgWord
                  (toStgWord
                     platform_a5jHh
                     (fromIntegral
                        @ Int
                        @ Integer
                        GHC.Real.$fIntegralInt
                        GHC.Num.$fNumInteger
                        n_bits_a5jHi))
                  (shiftL
                     @ StgWord
                     GHC.Runtime.Heap.Layout.$fBitsStgWord
                     (case bitmap_a5jHj of {
                        [] -> toStgWord platform_a5jHh 0;
                        : b_a5jHn ds_d5k2R ->
                          case ds_d5k2R of {
                            __DEFAULT ->
                              panic
                                @ StgWord
                                (ghc-prim-0.6.1:GHC.CString.unpackCString# "mkLiveness"#);
                            [] -> b_a5jHn
                          }
                      })
                     (pc_BITMAP_BITS_SHIFT (platformConstants platform_a5jHh)))),
             ghc-prim-0.6.1:GHC.Types.[] @ RawCmmDecl);
        True ->
          >>=
            @ UniqSM
            GHC.Types.Unique.Supply.$fMonadUniqSM
            @ GHC.Types.Unique.Unique
            @ (CmmLit, [RawCmmDecl])
            (getUniqueM @ UniqSM GHC.Types.Unique.Supply.$fMonadUniqueUniqSM)
            (\ (uniq_a5jHo :: GHC.Types.Unique.Unique) ->
               let {
                 bitmap_lbl_a5jHp :: CLabel
                 [LclId,
                  Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                          WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
                 bitmap_lbl_a5jHp = mkBitmapLabel uniq_a5jHo } in
               return
                 @ UniqSM
                 GHC.Types.Unique.Supply.$fMonadUniqSM
                 @ (CmmLit,
                    [GenCmmDecl
                       (GenCmmStatics 'True)
                       (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                       CmmGraph])
                 (GHC.Cmm.Expr.CmmLabel bitmap_lbl_a5jHp,
                  GHC.Base.build
                    @ (GenCmmDecl
                         (GenCmmStatics 'True)
                         (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                         CmmGraph)
                    (\ (@ a_d5k2l)
                       (c_d5k2m
                          :: GenCmmDecl
                               (GenCmmStatics 'True)
                               (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                               CmmGraph
                             -> a_d5k2l -> a_d5k2l)
                       (n_d5k2n :: a_d5k2l) ->
                       c_d5k2m
                         (mkRODataLits
                            @ 'True
                            @ (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                            @ CmmGraph
                            bitmap_lbl_a5jHp
                            lits_a5jHm)
                         n_d5k2n)))
      }

-- RHS size: {terms: 17, types: 7, coercions: 0, joins: 0/0}
packIntsCLit :: Platform -> Int -> Int -> CmmLit
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 180 0}]
packIntsCLit
  = \ (platform_a5jGZ :: Platform)
      (a_a5jH0 :: Int)
      (b_a5jH1 :: Int) ->
      packHalfWordsCLit
        platform_a5jGZ
        (toStgHalfWord
           platform_a5jGZ
           (fromIntegral
              @ Int
              @ Integer
              GHC.Real.$fIntegralInt
              GHC.Num.$fNumInteger
              a_a5jH0))
        (toStgHalfWord
           platform_a5jGZ
           (fromIntegral
              @ Int
              @ Integer
              GHC.Real.$fIntegralInt
              GHC.Num.$fNumInteger
              b_a5jH1))

Rec {
-- RHS size: {terms: 338, types: 541, coercions: 0, joins: 1/12}
mkInfoTableContents [Occ=LoopBreaker]
  :: DynFlags
     -> CmmInfoTable
     -> Maybe Int
     -> UniqSM ([RawCmmDecl], InfoTableContents)
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=NEVER}]
mkInfoTableContents
  = \ (dflags_a5jG3 :: DynFlags)
      (info_a5jG4 :: CmmInfoTable)
      (mb_rts_tag_a5jG9 :: Maybe Int) ->
      case info_a5jG4 of wild_00
      { CmmInfoTable ds_d5k8t ds_d5k8u ds_d5k8v ds_d5k8w _ [Occ=Dead] ->
      let {
        platform_a5jGa :: Platform
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
        platform_a5jGa = targetPlatform dflags_a5jG3 } in
      let {
        mk_pieces_a5jGb
          :: ClosureTypeInfo
             -> [CmmLit]
             -> UniqSM (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
                 WorkFree=True, Expandable=True, Guidance=NEVER}]
        mk_pieces_a5jGb
          = \ (ds_d5k8E :: ClosureTypeInfo) (_no_srt_a5jGe :: [CmmLit]) ->
              join {
                fail_d5k9N
                  :: ghc-prim-0.6.1:GHC.Prim.Void#
                     -> UniqSM (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])
                [LclId[JoinId(1)],
                 Str=<L,U>,
                 Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
                         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 130 0}]
                fail_d5k9N _ [Occ=Dead, OS=OneShot]
                  = pprPanic
                      @ (UniqSM (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl]))
                      $dIP_a5jV3
                      (ghc-prim-0.6.1:GHC.CString.unpackCString# "mk_pieces"#)
                      (ppr
                         @ ClosureTypeInfo
                         GHC.Runtime.Heap.Layout.$fOutputableClosureTypeInfo
                         ds_d5k8E) } in
              case ds_d5k8E of {
                __DEFAULT -> jump fail_d5k9N ghc-prim-0.6.1:GHC.Prim.void#;
                Constr con_tag_a5jGc con_descr_a5jGd ->
                  >>=
                    @ UniqSM
                    GHC.Types.Unique.Supply.$fMonadUniqSM
                    @ (CmmLit,
                       GenCmmDecl
                         RawCmmStatics
                         (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                         CmmGraph)
                    @ (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])
                    (newStringLit
                       @ (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                       @ CmmGraph
                       con_descr_a5jGd)
                    (\ (ds_d5k8N
                          :: (CmmLit,
                              GenCmmDecl
                                RawCmmStatics
                                (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                                CmmGraph)) ->
                       case ds_d5k8N of { (descr_lit_a5jGf, decl_a5jGg) ->
                       return
                         @ UniqSM
                         GHC.Types.Unique.Supply.$fMonadUniqSM
                         @ (Maybe CmmLit, Maybe CmmLit, [CmmLit],
                            [GenCmmDecl
                               RawCmmStatics
                               (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                               CmmGraph])
                         (GHC.Maybe.Just
                            @ CmmLit
                            (GHC.Cmm.Expr.$WCmmInt
                               (fromIntegral
                                  @ GHC.Types.Basic.ConTagZ
                                  @ Integer
                                  GHC.Real.$fIntegralInt
                                  GHC.Num.$fNumInteger
                                  con_tag_a5jGc)
                               (halfWordWidth platform_a5jGa)),
                          GHC.Maybe.Nothing @ CmmLit,
                          GHC.Base.build
                            @ CmmLit
                            (\ (@ a_d5k8K)
                               (c_d5k8L :: CmmLit -> a_d5k8K -> a_d5k8K)
                               (n_d5k8M :: a_d5k8K) ->
                               c_d5k8L descr_lit_a5jGf n_d5k8M),
                          GHC.Base.build
                            @ (GenCmmDecl
                                 RawCmmStatics
                                 (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                                 CmmGraph)
                            (\ (@ a_d5k8H)
                               (c_d5k8I
                                  :: GenCmmDecl
                                       RawCmmStatics
                                       (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                                       CmmGraph
                                     -> a_d5k8H -> a_d5k8H)
                               (n_d5k8J :: a_d5k8H) ->
                               c_d5k8I decl_a5jGg n_d5k8J))
                       });
                Fun arity_a5jGk ds_d5k9M ->
                  case ds_d5k9M of {
                    __DEFAULT -> jump fail_d5k9N ghc-prim-0.6.1:GHC.Prim.void#;
                    ArgSpec fun_type_a5jGl ->
                      return
                        @ UniqSM
                        GHC.Types.Unique.Supply.$fMonadUniqSM
                        @ (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])
                        (GHC.Maybe.Nothing @ CmmLit, GHC.Maybe.Nothing @ CmmLit,
                         ghc-prim-0.6.1:GHC.Types.:
                           @ CmmLit
                           (packIntsCLit platform_a5jGa fun_type_a5jGl arity_a5jGk)
                           _no_srt_a5jGe,
                         ghc-prim-0.6.1:GHC.Types.[] @ RawCmmDecl);
                    ArgGen arg_bits_a5jGp ->
                      let {
                        srt_lit_a5jGs :: CmmLit
                        [LclId,
                         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 350 0}]
                        srt_lit_a5jGs
                          = case _no_srt_a5jGe of {
                              [] -> mkIntCLit platform_a5jGa (ghc-prim-0.6.1:GHC.Types.I# 0#);
                              : lit_a5jGt _rest_a5jGu ->
                                case &&
                                       debugIsOn
                                       (not
                                          (null
                                             @ [] Data.Foldable.$fFoldable[] @ CmmLit _rest_a5jGu))
                                of {
                                  False -> lit_a5jGt;
                                  True ->
                                    assertPanic
                                      @ CmmLit
                                      (ghc-prim-0.6.1:GHC.CString.unpackCString#
                                         "E:\\\\ghc_inferTags\\\\compiler\\\\GHC\\\\Cmm\\\\Info.hs"#)
                                      (ghc-prim-0.6.1:GHC.Types.I# 262#)
                                }
                            } } in
                      let {
                        slow_entry_a5jGr :: CmmLit
                        [LclId,
                         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
                                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 20}]
                        slow_entry_a5jGr
                          = GHC.Cmm.Expr.CmmLabel
                              (toSlowEntryLbl platform_a5jGa ds_d5k8t) } in
                      >>=
                        @ UniqSM
                        GHC.Types.Unique.Supply.$fMonadUniqSM
                        @ (CmmLit, [RawCmmDecl])
                        @ (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])
                        (mkLivenessBits dflags_a5jG3 arg_bits_a5jGp)
                        (\ (ds_d5k9n :: (CmmLit, [RawCmmDecl])) ->
                           case ds_d5k9n of { (liveness_lit_a5jGv, liveness_data_a5jGw) ->
                           let {
                             fun_type_a5jGx :: Int
                             [LclId,
                              Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                                      WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
                             fun_type_a5jGx
                               = case null
                                        @ []
                                        Data.Foldable.$fFoldable[]
                                        @ RawCmmDecl
                                        liveness_data_a5jGw
                                 of {
                                   False -> aRG_GEN_BIG;
                                   True -> aRG_GEN
                                 } } in
                           return
                             @ UniqSM
                             GHC.Types.Unique.Supply.$fMonadUniqSM
                             @ (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])
                             (GHC.Maybe.Nothing @ CmmLit, GHC.Maybe.Nothing @ CmmLit,
                              ++
                                @ CmmLit
                                (GHC.Base.build
                                   @ CmmLit
                                   (\ (@ a_d5k96)
                                      (c_d5k97 :: CmmLit -> a_d5k96 -> a_d5k96)
                                      (n_d5k98 :: a_d5k96) ->
                                      c_d5k97
                                        (packIntsCLit platform_a5jGa fun_type_a5jGx arity_a5jGk)
                                        n_d5k98))
                                (++
                                   @ CmmLit
                                   (case inlineSRT platform_a5jGa of {
                                      False ->
                                        GHC.Base.build
                                          @ CmmLit
                                          (\ (@ a_d5k99)
                                             (c_d5k9a :: CmmLit -> a_d5k99 -> a_d5k99)
                                             (n_d5k9b :: a_d5k99) ->
                                             c_d5k9a srt_lit_a5jGs n_d5k9b);
                                      True -> ghc-prim-0.6.1:GHC.Types.[] @ CmmLit
                                    })
                                   (GHC.Base.build
                                      @ CmmLit
                                      (\ (@ a_d5k9c)
                                         (c_d5k9d :: CmmLit -> a_d5k9c -> a_d5k9c)
                                         (n_d5k9e :: a_d5k9c) ->
                                         c_d5k9d
                                           liveness_lit_a5jGv (c_d5k9d slow_entry_a5jGr n_d5k9e)))),
                              liveness_data_a5jGw)
                           })
                  };
                Thunk ->
                  return
                    @ UniqSM
                    GHC.Types.Unique.Supply.$fMonadUniqSM
                    @ (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])
                    (GHC.Maybe.Nothing @ CmmLit, GHC.Maybe.Nothing @ CmmLit,
                     _no_srt_a5jGe, ghc-prim-0.6.1:GHC.Types.[] @ RawCmmDecl);
                ThunkSelector offset_a5jGi ->
                  return
                    @ UniqSM
                    GHC.Types.Unique.Supply.$fMonadUniqSM
                    @ (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])
                    (GHC.Maybe.Just
                       @ CmmLit (GHC.Cmm.Expr.$WCmmInt 0 (halfWordWidth platform_a5jGa)),
                     GHC.Maybe.Just
                       @ CmmLit
                       (mkWordCLit
                          platform_a5jGa
                          (fromIntegral
                             @ GHC.Runtime.Heap.Layout.SelectorOffset
                             @ Integer
                             GHC.Real.$fIntegralInt
                             GHC.Num.$fNumInteger
                             offset_a5jGi)),
                     ghc-prim-0.6.1:GHC.Types.[] @ CmmLit,
                     ghc-prim-0.6.1:GHC.Types.[] @ RawCmmDecl)
              } } in
      case ds_d5k8u of {
        __DEFAULT ->
          case ds_d5k8u of {
            __DEFAULT ->
              case ds_d5k8u of {
                __DEFAULT ->
                  panic
                    @ (UniqSM ([RawCmmDecl], InfoTableContents))
                    (ghc-prim-0.6.1:GHC.CString.unpackCString# "mkInfoTableContents"#);
                HeapRep _ [Occ=Dead] ptrs_a5jGM nonptrs_a5jGN closure_type_a5jGO ->
                  let {
                    layout_a5jGP :: CmmLit
                    [LclId,
                     Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                             WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
                    layout_a5jGP
                      = packIntsCLit platform_a5jGa ptrs_a5jGM nonptrs_a5jGN } in
                  >>=
                    @ UniqSM
                    GHC.Types.Unique.Supply.$fMonadUniqSM
                    @ ((CmmLit, CmmLit), [RawCmmDecl])
                    @ ([RawCmmDecl], InfoTableContents)
                    (mkProfLits platform_a5jGa ds_d5k8v)
                    (\ (ds_d5k6P :: ((CmmLit, CmmLit), [RawCmmDecl])) ->
                       case ds_d5k6P of { (prof_lits_a5jGQ, prof_data_a5jGR) ->
                       let {
                         ds_d5k6G :: ([CmmLit], CmmLit)
                         [LclId,
                          Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                                  WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
                         ds_d5k6G = mkSRTLit platform_a5jGa ds_d5k8t ds_d5k8w } in
                       let {
                         srt_bitmap_a5jGT :: CmmLit
                         [LclId,
                          Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                                  WorkFree=True, Expandable=False, Guidance=IF_ARGS [] 10 0}]
                         srt_bitmap_a5jGT
                           = case ds_d5k6G of { (_ [Occ=Dead], srt_bitmap_a5jGT) ->
                             srt_bitmap_a5jGT
                             } } in
                       >>=
                         @ UniqSM
                         GHC.Types.Unique.Supply.$fMonadUniqSM
                         @ (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])
                         @ ([RawCmmDecl], InfoTableContents)
                         (mk_pieces_a5jGb
                            closure_type_a5jGO
                            (case ds_d5k6G of { (srt_label_a5jGS, _ [Occ=Dead]) ->
                             srt_label_a5jGS
                             }))
                         (\ (ds_d5k6B
                               :: (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])) ->
                            case ds_d5k6B of
                            { (mb_srt_field_a5jGU, mb_layout_a5jGV, extra_bits_a5jGW,
                               ct_data_a5jGX) ->
                            return
                              @ UniqSM
                              GHC.Types.Unique.Supply.$fMonadUniqSM
                              @ ([RawCmmDecl], ([CmmLit], [CmmLit]))
                              (++ @ RawCmmDecl prof_data_a5jGR ct_data_a5jGX,
                               (mkStdInfoTable
                                  dflags_a5jG3
                                  prof_lits_a5jGQ
                                  (orElse @ Int mb_rts_tag_a5jG9 (rtsClosureType ds_d5k8u))
                                  (orElse @ CmmLit mb_srt_field_a5jGU srt_bitmap_a5jGT)
                                  (orElse @ CmmLit mb_layout_a5jGV layout_a5jGP),
                                extra_bits_a5jGW))
                            })
                       })
              };
            StackRep frame_a5jGC ->
              >>=
                @ UniqSM
                GHC.Types.Unique.Supply.$fMonadUniqSM
                @ ((CmmLit, CmmLit), [RawCmmDecl])
                @ ([RawCmmDecl], InfoTableContents)
                (mkProfLits platform_a5jGa ds_d5k8v)
                (\ (ds_d5k5C :: ((CmmLit, CmmLit), [RawCmmDecl])) ->
                   case ds_d5k5C of { (prof_lits_a5jGD, prof_data_a5jGE) ->
                   let {
                     ds_d5k5t :: ([CmmLit], CmmLit)
                     [LclId,
                      Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                              WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
                     ds_d5k5t = mkSRTLit platform_a5jGa ds_d5k8t ds_d5k8w } in
                   let {
                     srt_label_a5jGF :: [CmmLit]
                     [LclId,
                      Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                              WorkFree=True, Expandable=False, Guidance=IF_ARGS [] 10 0}]
                     srt_label_a5jGF
                       = case ds_d5k5t of { (srt_label_a5jGF, _ [Occ=Dead]) ->
                         srt_label_a5jGF
                         } } in
                   let {
                     srt_bitmap_a5jGG :: CmmLit
                     [LclId,
                      Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                              WorkFree=True, Expandable=False, Guidance=IF_ARGS [] 10 0}]
                     srt_bitmap_a5jGG
                       = case ds_d5k5t of { (_ [Occ=Dead], srt_bitmap_a5jGG) ->
                         srt_bitmap_a5jGG
                         } } in
                   >>=
                     @ UniqSM
                     GHC.Types.Unique.Supply.$fMonadUniqSM
                     @ (CmmLit, [RawCmmDecl])
                     @ ([RawCmmDecl], InfoTableContents)
                     (mkLivenessBits dflags_a5jG3 frame_a5jGC)
                     (\ (ds_d5k5o :: (CmmLit, [RawCmmDecl])) ->
                        case ds_d5k5o of { (liveness_lit_a5jGH, liveness_data_a5jGI) ->
                        return
                          @ UniqSM
                          GHC.Types.Unique.Supply.$fMonadUniqSM
                          @ ([RawCmmDecl], ([CmmLit], [CmmLit]))
                          (++ @ RawCmmDecl prof_data_a5jGE liveness_data_a5jGI,
                           (mkStdInfoTable
                              dflags_a5jG3
                              prof_lits_a5jGD
                              (case mb_rts_tag_a5jG9 of {
                                 __DEFAULT ->
                                   case null
                                          @ []
                                          Data.Foldable.$fFoldable[]
                                          @ RawCmmDecl
                                          liveness_data_a5jGI
                                   of {
                                     False -> rET_BIG;
                                     True -> rET_SMALL
                                   };
                                 Just tag_a5jGL -> tag_a5jGL
                               })
                              srt_bitmap_a5jGG
                              liveness_lit_a5jGH,
                            srt_label_a5jGF))
                        })
                   })
          };
        RTSRep rts_tag_a5jGA rep_a5jGB ->
          mkInfoTableContents
            dflags_a5jG3
            (case wild_00 of
             { CmmInfoTable ds_d5k3X _ [Occ=Dead] ds_d5k3Z ds_d5k40 ds_d5k41 ->
             GHC.Cmm.CmmInfoTable ds_d5k3X rep_a5jGB ds_d5k3Z ds_d5k40 ds_d5k41
             })
            (GHC.Maybe.Just @ Int rts_tag_a5jGA)
      }
      }
end Rec }

-- RHS size: {terms: 178, types: 329, coercions: 12, joins: 0/4}
mkInfoTable :: DynFlags -> CmmDeclSRTs -> UniqSM [RawCmmDecl]
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=NEVER}]
mkInfoTable
  = \ (ds_d5ka0 :: DynFlags)
      (ds_d5ka1 :: GenCmmDecl RawCmmStatics CmmTopInfo CmmGraph) ->
      case ds_d5ka1 of {
        CmmProc infos_a5jFG entry_lbl_a5jFH live_a5jFI blocks_a5jFJ ->
          let {
            platform_a5jFK :: Platform
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
            platform_a5jFK = targetPlatform ds_d5ka0 } in
          case not (platformTablesNextToCode (targetPlatform ds_d5ka0)) of {
            False ->
              >>=
                @ UniqSM
                GHC.Types.Unique.Supply.$fMonadUniqSM
                @ ([[RawCmmDecl]],
                   [(GHC.Cmm.Dataflow.Label.Label, GenCmmStatics 'True)])
                @ [RawCmmDecl]
                (fmap
                   @ UniqSM
                   GHC.Types.Unique.Supply.$fFunctorUniqSM
                   @ [([RawCmmDecl],
                       (GHC.Cmm.Dataflow.Label.Label, GenCmmStatics 'True))]
                   @ ([[RawCmmDecl]],
                      [(GHC.Cmm.Dataflow.Label.Label, GenCmmStatics 'True)])
                   (unzip
                      @ [RawCmmDecl]
                      @ (GHC.Cmm.Dataflow.Label.Label, GenCmmStatics 'True))
                   (mapM
                      @ []
                      Data.Traversable.$fTraversable[]
                      @ UniqSM
                      @ (GHC.Cmm.Dataflow.Label.Label, CmmInfoTable)
                      @ ([RawCmmDecl],
                         (GHC.Cmm.Dataflow.Label.Label, GenCmmStatics 'True))
                      GHC.Types.Unique.Supply.$fMonadUniqSM
                      (\ (ds_d5kbk :: (GHC.Cmm.Dataflow.Label.Label, CmmInfoTable)) ->
                         case ds_d5kbk of { (lbl_a5jFM, itbl_a5jFN) ->
                         >>=
                           @ UniqSM
                           GHC.Types.Unique.Supply.$fMonadUniqSM
                           @ ([RawCmmDecl], InfoTableContents)
                           @ ([RawCmmDecl],
                              (GHC.Cmm.Dataflow.Label.Label, GenCmmStatics 'True))
                           (mkInfoTableContents ds_d5ka0 itbl_a5jFN (GHC.Maybe.Nothing @ Int))
                           (\ (ds_d5kbn :: ([RawCmmDecl], InfoTableContents)) ->
                              case ds_d5kbn of { (top_decls_a5jFO, ds_d5kbx) ->
                              case ds_d5kbx of { (std_info_a5jFP, extra_bits_a5jFQ) ->
                              let {
                                info_lbl_a5jFR :: CLabel
                                [LclId,
                                 Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                                         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
                                info_lbl_a5jFR = cit_lbl itbl_a5jFN } in
                              return
                                @ UniqSM
                                GHC.Types.Unique.Supply.$fMonadUniqSM
                                @ ([RawCmmDecl],
                                   (GHC.Cmm.Dataflow.Label.Label, GenCmmStatics 'True))
                                (top_decls_a5jFO,
                                 (lbl_a5jFM,
                                  $ @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
                                    @ [CmmStatic]
                                    @ (GenCmmStatics 'True)
                                    (GHC.Cmm.CmmStaticsRaw @ 'True info_lbl_a5jFR)
                                    ($ @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
                                       @ [CmmLit]
                                       @ [CmmStatic]
                                       (map @ CmmLit @ CmmStatic GHC.Cmm.CmmStaticLit)
                                       (++
                                          @ CmmLit
                                          (reverse
                                             @ CmmLit
                                             (map
                                                @ CmmLit
                                                @ CmmLit
                                                (makeRelativeRefTo platform_a5jFK info_lbl_a5jFR)
                                                extra_bits_a5jFQ))
                                          (map
                                             @ CmmLit
                                             @ CmmLit
                                             (makeRelativeRefTo platform_a5jFK info_lbl_a5jFR)
                                             std_info_a5jFP)))))
                              }
                              })
                         })
                      ((mapToList
                          @ GHC.Cmm.Dataflow.Label.LabelMap
                          GHC.Cmm.Dataflow.Label.$fIsMapLabelMap
                          @ CmmInfoTable
                          (info_tbls infos_a5jFG))
                       `cast` (([((,)
                                    (Sub (GHC.Cmm.Dataflow.Label.D:R:KeyOfLabelMap[0]))
                                    <CmmInfoTable>_R)_R])_R
                               :: [(KeyOf GHC.Cmm.Dataflow.Label.LabelMap, CmmInfoTable)]
                                  ~R# [(GHC.Cmm.Dataflow.Label.Label, CmmInfoTable)]))))
                (\ (ds_d5kaZ
                      :: ([[RawCmmDecl]],
                          [(GHC.Cmm.Dataflow.Label.Label, GenCmmStatics 'True)])) ->
                   case ds_d5kaZ of { (top_declss_a5jG1, raw_infos_a5jG2) ->
                   return
                     @ UniqSM
                     GHC.Types.Unique.Supply.$fMonadUniqSM
                     @ [RawCmmDecl]
                     (++
                        @ RawCmmDecl
                        (concat
                           @ [] @ RawCmmDecl Data.Foldable.$fFoldable[] top_declss_a5jG1)
                        (GHC.Base.build
                           @ RawCmmDecl
                           (\ (@ a_d5kaW)
                              (c_d5kaX :: RawCmmDecl -> a_d5kaW -> a_d5kaW)
                              (n_d5kaY :: a_d5kaW) ->
                              c_d5kaX
                                (GHC.Cmm.CmmProc
                                   @ RawCmmStatics
                                   @ (GHC.Cmm.Dataflow.Label.LabelMap (GenCmmStatics 'True))
                                   @ CmmGraph
                                   (mapFromList
                                      @ GHC.Cmm.Dataflow.Label.LabelMap
                                      GHC.Cmm.Dataflow.Label.$fIsMapLabelMap
                                      @ (GenCmmStatics 'True)
                                      (raw_infos_a5jG2
                                       `cast` (([((,)
                                                    (Sub (Sym (GHC.Cmm.Dataflow.Label.D:R:KeyOfLabelMap[0])))
                                                    <GenCmmStatics 'True>_R)_R])_R
                                               :: [(GHC.Cmm.Dataflow.Label.Label,
                                                    GenCmmStatics 'True)]
                                                  ~R# [(KeyOf GHC.Cmm.Dataflow.Label.LabelMap,
                                                        GenCmmStatics 'True)])))
                                   entry_lbl_a5jFH
                                   live_a5jFI
                                   blocks_a5jFJ)
                                n_d5kaY)))
                   });
            True ->
              case topInfoTable @ RawCmmStatics @ CmmNode ds_d5ka1 of {
                Nothing ->
                  return
                    @ UniqSM
                    GHC.Types.Unique.Supply.$fMonadUniqSM
                    @ [GenCmmDecl
                         RawCmmStatics
                         (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                         CmmGraph]
                    (GHC.Base.build
                       @ (GenCmmDecl
                            RawCmmStatics
                            (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                            CmmGraph)
                       (\ (@ a_d5kad)
                          (c_d5kae
                             :: GenCmmDecl
                                  RawCmmStatics
                                  (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                                  CmmGraph
                                -> a_d5kad -> a_d5kad)
                          (n_d5kaf :: a_d5kad) ->
                          c_d5kae
                            (GHC.Cmm.CmmProc
                               @ RawCmmStatics
                               @ (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                               @ CmmGraph
                               (mapEmpty
                                  @ GHC.Cmm.Dataflow.Label.LabelMap
                                  GHC.Cmm.Dataflow.Label.$fIsMapLabelMap
                                  @ RawCmmStatics)
                               entry_lbl_a5jFH
                               live_a5jFI
                               blocks_a5jFJ)
                            n_d5kaf));
                Just info_a5jFU ->
                  case info_a5jFU of wild_XD
                  { CmmInfoTable ds_d5kaR _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                 _ [Occ=Dead] ->
                  >>=
                    @ UniqSM
                    GHC.Types.Unique.Supply.$fMonadUniqSM
                    @ ([RawCmmDecl], InfoTableContents)
                    @ [RawCmmDecl]
                    (mkInfoTableContents ds_d5ka0 wild_XD (GHC.Maybe.Nothing @ Int))
                    (\ (ds_d5kas :: ([RawCmmDecl], InfoTableContents)) ->
                       case ds_d5kas of { (top_decls_a5jFW, ds_d5kaC) ->
                       case ds_d5kaC of { (std_info_a5jFX, extra_bits_a5jFY) ->
                       let {
                         rel_extra_bits_a5jG0 :: [CmmLit]
                         [LclId,
                          Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                                  WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 60 0}]
                         rel_extra_bits_a5jG0
                           = map
                               @ CmmLit
                               @ CmmLit
                               (makeRelativeRefTo platform_a5jFK ds_d5kaR)
                               extra_bits_a5jFY } in
                       let {
                         rel_std_info_a5jFZ :: [CmmLit]
                         [LclId,
                          Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                                  WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 60 0}]
                         rel_std_info_a5jFZ
                           = map
                               @ CmmLit
                               @ CmmLit
                               (makeRelativeRefTo platform_a5jFK ds_d5kaR)
                               std_info_a5jFX } in
                       return
                         @ UniqSM
                         GHC.Types.Unique.Supply.$fMonadUniqSM
                         @ [RawCmmDecl]
                         (++
                            @ RawCmmDecl
                            top_decls_a5jFW
                            (GHC.Base.build
                               @ RawCmmDecl
                               (\ (@ a_d5kap)
                                  (c_d5kaq :: RawCmmDecl -> a_d5kap -> a_d5kap)
                                  (n_d5kar :: a_d5kap) ->
                                  c_d5kaq
                                    (GHC.Cmm.CmmProc
                                       @ RawCmmStatics
                                       @ (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                                       @ CmmGraph
                                       (mapEmpty
                                          @ GHC.Cmm.Dataflow.Label.LabelMap
                                          GHC.Cmm.Dataflow.Label.$fIsMapLabelMap
                                          @ RawCmmStatics)
                                       entry_lbl_a5jFH
                                       live_a5jFI
                                       blocks_a5jFJ)
                                    (c_d5kaq
                                       (mkRODataLits
                                          @ 'True
                                          @ (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                                          @ CmmGraph
                                          ds_d5kaR
                                          (ghc-prim-0.6.1:GHC.Types.:
                                             @ CmmLit
                                             (GHC.Cmm.Expr.CmmLabel entry_lbl_a5jFH)
                                             (++ @ CmmLit rel_std_info_a5jFZ rel_extra_bits_a5jG0)))
                                       n_d5kar))))
                       }
                       })
                  }
              }
          };
        CmmData sec_a5jFC dat_a5jFD ->
          return
            @ UniqSM
            GHC.Types.Unique.Supply.$fMonadUniqSM
            @ [GenCmmDecl
                 RawCmmStatics
                 (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                 CmmGraph]
            (GHC.Base.build
               @ (GenCmmDecl
                    RawCmmStatics
                    (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                    CmmGraph)
               (\ (@ a_d5ka4)
                  (c_d5ka5
                     :: GenCmmDecl
                          RawCmmStatics
                          (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                          CmmGraph
                        -> a_d5ka4 -> a_d5ka4)
                  (n_d5ka6 :: a_d5ka4) ->
                  c_d5ka5
                    (GHC.Cmm.CmmData
                       @ RawCmmStatics
                       @ (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                       @ CmmGraph
                       sec_a5jFC
                       dat_a5jFD)
                    n_d5ka6))
      }

-- RHS size: {terms: 69, types: 138, coercions: 0, joins: 0/2}
cmmToRawCmm
  :: forall a.
     DynFlags
     -> Stream IO CmmGroupSRTs a -> IO (Stream IO RawCmmGroup a)
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 750 60}]
cmmToRawCmm
  = \ (@ a_a5jZ4) ->
      let {
        $dFunctor_a5k0n :: Functor (Stream IO [RawCmmDecl])
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
        $dFunctor_a5k0n
          = GHC.Data.Stream.$fFunctorStream
              @ IO @ [RawCmmDecl] GHC.Base.$fMonadIO } in
      \ (dflags_a5jFp :: DynFlags)
        (cmms_a5jFq :: Stream IO CmmGroupSRTs a_a5jZ4) ->
        let {
          forceRes_a5jFr
            :: forall (t :: * -> *) a a. Foldable t => (a, t a) -> ()
          [LclId,
           Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
                   WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 20] 100 0}]
          forceRes_a5jFr
            = \ (@ (t_a5jZg :: * -> *))
                (@ a_a5jZe)
                (@ a_a5jZl)
                ($dFoldable_a5jZr :: Foldable t_a5jZg)
                (ds_d5kbN :: (a_a5jZe, t_a5jZg a_a5jZl)) ->
                case ds_d5kbN of { (uniqs_a5jFs, rawcmms_a5jFt) ->
                case uniqs_a5jFs of { __DEFAULT ->
                foldr
                  @ t_a5jZg
                  $dFoldable_a5jZr
                  @ a_a5jZl
                  @ ()
                  (\ (decl_a5jFu :: a_a5jZl) (r_a5jFv :: ()) ->
                     case decl_a5jFu of { __DEFAULT -> r_a5jFv })
                  ghc-prim-0.6.1:GHC.Tuple.()
                  rawcmms_a5jFt
                }
                } } in
        >>=
          @ IO
          GHC.Base.$fMonadIO
          @ UniqSupply
          @ (Stream IO RawCmmGroup a_a5jZ4)
          (mkSplitUniqSupply (ghc-prim-0.6.1:GHC.Types.C# 'i'#))
          (\ (uniqs_a5jFw :: UniqSupply) ->
             return
               @ IO
               GHC.Base.$fMonadIO
               @ (Stream IO [RawCmmDecl] a_a5jZ4)
               (<$>
                  @ (Stream IO [RawCmmDecl])
                  @ (UniqSupply, a_a5jZ4)
                  @ a_a5jZ4
                  $dFunctor_a5k0n
                  (snd @ UniqSupply @ a_a5jZ4)
                  (Stream.mapAccumL_
                     @ IO
                     @ UniqSupply
                     @ [CmmDeclSRTs]
                     @ [RawCmmDecl]
                     @ a_a5jZ4
                     GHC.Base.$fMonadIO
                     (\ (uniqs_a5jFy :: UniqSupply) (cmm_a5jFz :: [CmmDeclSRTs]) ->
                        $ @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
                          @ (IO (UniqSupply, [RawCmmDecl]))
                          @ (IO (UniqSupply, [RawCmmDecl]))
                          (withTimingSilent
                             @ IO
                             @ (UniqSupply, [RawCmmDecl])
                             Control.Monad.IO.Class.$fMonadIOIO
                             dflags_a5jFp
                             (text
                                (ghc-prim-0.6.1:GHC.CString.unpackCString# "Cmm -> Raw Cmm"#))
                             (forceRes_a5jFr
                                @ [] @ UniqSupply @ RawCmmDecl Data.Foldable.$fFoldable[]))
                          (case $ @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
                                  @ (UniqSM [RawCmmDecl])
                                  @ ([RawCmmDecl], UniqSupply)
                                  (initUs @ [RawCmmDecl] uniqs_a5jFy)
                                  (concatMapM
                                     @ UniqSM
                                     @ CmmDeclSRTs
                                     @ RawCmmDecl
                                     GHC.Types.Unique.Supply.$fMonadUniqSM
                                     (mkInfoTable dflags_a5jFp)
                                     cmm_a5jFz)
                           of
                           { (b_a5jFA, uniqs'_a5jFB) ->
                           return
                             @ IO
                             GHC.Base.$fMonadIO
                             @ (UniqSupply, [RawCmmDecl])
                             (uniqs'_a5jFB, b_a5jFA)
                           }))
                     uniqs_a5jFw
                     cmms_a5jFq)))

-- RHS size: {terms: 8, types: 2, coercions: 0, joins: 0/0}
maxStdInfoTableSizeW :: WordOff
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 90 0}]
maxStdInfoTableSizeW
  = + @ WordOff
      GHC.Num.$fNumInt
      (+ @ WordOff
         GHC.Num.$fNumInt
         (ghc-prim-0.6.1:GHC.Types.I# 1#)
         fixedInfoTableSizeW)
      profInfoTableSizeW

-- RHS size: {terms: 5, types: 1, coercions: 0, joins: 0/0}
maxRetInfoTableSizeW :: WordOff
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
maxRetInfoTableSizeW
  = + @ WordOff
      GHC.Num.$fNumInt
      maxStdInfoTableSizeW
      (ghc-prim-0.6.1:GHC.Types.I# 1#)

-- RHS size: {terms: 12, types: 3, coercions: 0, joins: 0/0}
stdInfoTableSizeW :: Profile -> WordOff
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 90 0}]
stdInfoTableSizeW
  = \ (profile_a5jIr :: Profile) ->
      + @ WordOff
        GHC.Num.$fNumInt
        fixedInfoTableSizeW
        (case profileIsProfiling profile_a5jIr of {
           False -> ghc-prim-0.6.1:GHC.Types.I# 0#;
           True -> profInfoTableSizeW
         })

-- RHS size: {terms: 7, types: 2, coercions: 0, joins: 0/0}
stdInfoTableSizeB :: Profile -> ByteOff
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 80 0}]
stdInfoTableSizeB
  = \ (profile_a5jIs :: Profile) ->
      * @ WordOff
        GHC.Num.$fNumInt
        (stdInfoTableSizeW profile_a5jIs)
        (profileWordSizeInBytes profile_a5jIs)

-- RHS size: {terms: 8, types: 2, coercions: 0, joins: 0/0}
stdSrtBitmapOffset :: Profile -> ByteOff
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 100 0}]
stdSrtBitmapOffset
  = \ (profile_a5jIt :: Profile) ->
      - @ ByteOff
        GHC.Num.$fNumInt
        (stdInfoTableSizeB profile_a5jIt)
        (halfWordSize (profilePlatform profile_a5jIt))

-- RHS size: {terms: 13, types: 3, coercions: 0, joins: 0/1}
infoTableSrtBitmap :: Profile -> CmmExpr -> CmmExpr
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 140 0}]
infoTableSrtBitmap
  = \ (profile_a5jI3 :: Profile) (info_tbl_a5jI4 :: CmmExpr) ->
      let {
        platform_a5jI5 :: Platform
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
        platform_a5jI5 = profilePlatform profile_a5jI3 } in
      GHC.Cmm.Expr.$WCmmLoad
        (cmmOffsetB
           platform_a5jI5 info_tbl_a5jI4 (stdSrtBitmapOffset profile_a5jI3))
        (bHalfWord platform_a5jI5)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
infoTableConstrTag :: Profile -> CmmExpr -> CmmExpr
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)}]
infoTableConstrTag = infoTableSrtBitmap

-- RHS size: {terms: 7, types: 2, coercions: 0, joins: 0/0}
stdClosureTypeOffset :: Profile -> ByteOff
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 80 0}]
stdClosureTypeOffset
  = \ (profile_a5jIu :: Profile) ->
      - @ ByteOff
        GHC.Num.$fNumInt
        (stdInfoTableSizeB profile_a5jIu)
        (profileWordSizeInBytes profile_a5jIu)

-- RHS size: {terms: 13, types: 3, coercions: 0, joins: 0/1}
infoTableClosureType :: Profile -> CmmExpr -> CmmExpr
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 140 0}]
infoTableClosureType
  = \ (profile_a5jI6 :: Profile) (info_tbl_a5jI7 :: CmmExpr) ->
      let {
        platform_a5jI8 :: Platform
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
        platform_a5jI8 = profilePlatform profile_a5jI6 } in
      GHC.Cmm.Expr.$WCmmLoad
        (cmmOffsetB
           platform_a5jI8 info_tbl_a5jI7 (stdClosureTypeOffset profile_a5jI6))
        (bHalfWord platform_a5jI8)

-- RHS size: {terms: 11, types: 3, coercions: 0, joins: 0/0}
stdPtrsOffset :: Profile -> ByteOff
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 130 0}]
stdPtrsOffset
  = \ (profile_a5jIv :: Profile) ->
      - @ ByteOff
        GHC.Num.$fNumInt
        (stdInfoTableSizeB profile_a5jIv)
        (* @ Int
           GHC.Num.$fNumInt
           (ghc-prim-0.6.1:GHC.Types.I# 2#)
           (profileWordSizeInBytes profile_a5jIv))

-- RHS size: {terms: 13, types: 3, coercions: 0, joins: 0/1}
infoTablePtrs :: Profile -> CmmExpr -> CmmExpr
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 140 0}]
infoTablePtrs
  = \ (profile_a5jI9 :: Profile) (info_tbl_a5jIa :: CmmExpr) ->
      let {
        platform_a5jIb :: Platform
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
        platform_a5jIb = profilePlatform profile_a5jI9 } in
      GHC.Cmm.Expr.$WCmmLoad
        (cmmOffsetB
           platform_a5jIb info_tbl_a5jIa (stdPtrsOffset profile_a5jI9))
        (bHalfWord platform_a5jIb)

-- RHS size: {terms: 16, types: 4, coercions: 0, joins: 0/0}
stdNonPtrsOffset :: Profile -> ByteOff
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 210 0}]
stdNonPtrsOffset
  = \ (profile_a5jIw :: Profile) ->
      + @ ByteOff
        GHC.Num.$fNumInt
        (- @ ByteOff
           GHC.Num.$fNumInt
           (stdInfoTableSizeB profile_a5jIw)
           (* @ Int
              GHC.Num.$fNumInt
              (ghc-prim-0.6.1:GHC.Types.I# 2#)
              (profileWordSizeInBytes profile_a5jIw)))
        (halfWordSize (profilePlatform profile_a5jIw))

-- RHS size: {terms: 13, types: 3, coercions: 0, joins: 0/1}
infoTableNonPtrs :: Profile -> CmmExpr -> CmmExpr
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 140 0}]
infoTableNonPtrs
  = \ (profile_a5jIc :: Profile) (info_tbl_a5jId :: CmmExpr) ->
      let {
        platform_a5jIe :: Platform
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
        platform_a5jIe = profilePlatform profile_a5jIc } in
      GHC.Cmm.Expr.$WCmmLoad
        (cmmOffsetB
           platform_a5jIe info_tbl_a5jId (stdNonPtrsOffset profile_a5jIc))
        (bHalfWord platform_a5jIe)

-- RHS size: {terms: 7, types: 2, coercions: 0, joins: 0/0}
conInfoTableSizeB :: Profile -> Int
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 80 0}]
conInfoTableSizeB
  = \ (profile_a5jIx :: Profile) ->
      + @ ByteOff
        GHC.Num.$fNumInt
        (stdInfoTableSizeB profile_a5jIx)
        (profileWordSizeInBytes profile_a5jIx)

-- RHS size: {terms: 31, types: 7, coercions: 0, joins: 0/1}
funInfoTable :: Profile -> CmmExpr -> CmmExpr
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 350 0}]
funInfoTable
  = \ (profile_a5jIf :: Profile) (info_ptr_a5jIg :: CmmExpr) ->
      let {
        platform_a5jIh :: Platform
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
        platform_a5jIh = profilePlatform profile_a5jIf } in
      case platformTablesNextToCode platform_a5jIh of {
        False ->
          cmmOffsetW
            platform_a5jIh
            info_ptr_a5jIg
            (+ @ WordOff
               GHC.Num.$fNumInt
               (ghc-prim-0.6.1:GHC.Types.I# 1#)
               (stdInfoTableSizeW profile_a5jIf));
        True ->
          cmmOffsetB
            platform_a5jIh
            info_ptr_a5jIg
            (- @ ByteOff
               GHC.Num.$fNumInt
               (negate
                  @ ByteOff GHC.Num.$fNumInt (stdInfoTableSizeB profile_a5jIf))
               (pc_SIZEOF_StgFunInfoExtraRev (platformConstants platform_a5jIh)))
      }

-- RHS size: {terms: 46, types: 24, coercions: 0, joins: 0/4}
funInfoArity :: Profile -> CmmExpr -> CmmExpr
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 430 0}]
funInfoArity
  = \ (profile_a5jIi :: Profile) (iptr_a5jIj :: CmmExpr) ->
      let {
        platform_a5jIk :: Platform
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
        platform_a5jIk = profilePlatform profile_a5jIi } in
      let {
        pc_a5jIq :: PlatformConstants
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
        pc_a5jIq = platformConstants platform_a5jIk } in
      let {
        ds_d5k14 :: (Int, Int)
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 140 60}]
        ds_d5k14
          = case platformTablesNextToCode platform_a5jIk of {
              False ->
                (pc_REP_StgFunInfoExtraFwd_arity pc_a5jIq,
                 pc_OFFSET_StgFunInfoExtraFwd_arity pc_a5jIq);
              True ->
                (pc_REP_StgFunInfoExtraRev_arity pc_a5jIq,
                 pc_OFFSET_StgFunInfoExtraRev_arity pc_a5jIq)
            } } in
      let {
        rep_bytes_a5jIo :: Int
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=True, Expandable=False, Guidance=IF_ARGS [] 10 0}]
        rep_bytes_a5jIo
          = case ds_d5k14 of { (rep_bytes_a5jIo, _ [Occ=Dead]) ->
            rep_bytes_a5jIo
            } } in
      cmmToWord
        platform_a5jIk
        (cmmLoadIndex
           platform_a5jIk
           (cmmBits (widthFromBytes rep_bytes_a5jIo))
           (funInfoTable profile_a5jIi iptr_a5jIj)
           (div
              @ Int
              GHC.Real.$fIntegralInt
              (case ds_d5k14 of { (_ [Occ=Dead], offset_a5jIp) -> offset_a5jIp })
              rep_bytes_a5jIo))

-- RHS size: {terms: 22, types: 5, coercions: 0, joins: 0/1}
infoTable :: Profile -> CmmExpr -> CmmExpr
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 210 0}]
infoTable
  = \ (profile_a5jI0 :: Profile) (info_ptr_a5jI1 :: CmmExpr) ->
      let {
        platform_a5jI2 :: Platform
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
        platform_a5jI2 = profilePlatform profile_a5jI0 } in
      case platformTablesNextToCode platform_a5jI2 of {
        False ->
          cmmOffsetW
            platform_a5jI2 info_ptr_a5jI1 (ghc-prim-0.6.1:GHC.Types.I# 1#);
        True ->
          cmmOffsetB
            platform_a5jI2
            info_ptr_a5jI1
            (negate
               @ ByteOff GHC.Num.$fNumInt (stdInfoTableSizeB profile_a5jI0))
      }

-- RHS size: {terms: 29, types: 12, coercions: 0, joins: 0/3}
getConstrTag :: PtrOpts -> CmmExpr -> CmmExpr
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 270 30}]
getConstrTag
  = \ (opts_a5jHQ :: PtrOpts) (closure_ptr_a5jHR :: CmmExpr) ->
      let {
        profile_a5jHU :: Profile
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
        profile_a5jHU = po_profile opts_a5jHQ } in
      let {
        platform_a5jHT :: Platform
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
        platform_a5jHT = profilePlatform profile_a5jHU } in
      let {
        info_table_a5jHS :: CmmExpr
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 60 0}]
        info_table_a5jHS
          = infoTable
              profile_a5jHU (closureInfoPtr opts_a5jHQ closure_ptr_a5jHR) } in
      GHC.Cmm.Expr.CmmMachOp
        (GHC.Cmm.MachOp.MO_UU_Conv
           (halfWordWidth platform_a5jHT) (wordWidth platform_a5jHT))
        (GHC.Base.build
           @ CmmExpr
           (\ (@ a_d5k1w)
              (c_d5k1x :: CmmExpr -> a_d5k1w -> a_d5k1w)
              (n_d5k1y :: a_d5k1w) ->
              c_d5k1x
                (infoTableConstrTag profile_a5jHU info_table_a5jHS) n_d5k1y))

-- RHS size: {terms: 29, types: 12, coercions: 0, joins: 0/3}
cmmGetClosureType :: PtrOpts -> CmmExpr -> CmmExpr
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 270 30}]
cmmGetClosureType
  = \ (opts_a5jHV :: PtrOpts) (closure_ptr_a5jHW :: CmmExpr) ->
      let {
        profile_a5jHZ :: Profile
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
        profile_a5jHZ = po_profile opts_a5jHV } in
      let {
        platform_a5jHY :: Platform
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
        platform_a5jHY = profilePlatform profile_a5jHZ } in
      let {
        info_table_a5jHX :: CmmExpr
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 60 0}]
        info_table_a5jHX
          = infoTable
              profile_a5jHZ (closureInfoPtr opts_a5jHV closure_ptr_a5jHW) } in
      GHC.Cmm.Expr.CmmMachOp
        (GHC.Cmm.MachOp.MO_UU_Conv
           (halfWordWidth platform_a5jHY) (wordWidth platform_a5jHY))
        (GHC.Base.build
           @ CmmExpr
           (\ (@ a_d5k1z)
              (c_d5k1A :: CmmExpr -> a_d5k1z -> a_d5k1z)
              (n_d5k1B :: a_d5k1z) ->
              c_d5k1A
                (infoTableClosureType profile_a5jHZ info_table_a5jHX) n_d5k1B))


