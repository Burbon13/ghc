
==================== Desugar (before optimization) ====================
2020-11-24 12:41:53.5212256 UTC

Result size of Desugar (before optimization)
  = {terms: 1,698, types: 1,967, coercions: 23, joins: 0/116}

Rec {
-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a19DG :: Num ByteOff
[LclId]
$dNum_a19DG = $dNum_a19BB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a19CI :: Num WordOff
[LclId]
$dNum_a19CI = $dNum_a19BB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a19CE :: Num WordOff
[LclId]
$dNum_a19CE = $dNum_a19BB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a19CC :: Num ByteOff
[LclId]
$dNum_a19CC = $dNum_a19BB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a19Cy :: Num ByteOff
[LclId]
$dNum_a19Cy = $dNum_a19BB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a19Cr :: Num ByteOff
[LclId]
$dNum_a19Cr = $dNum_a19BB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a19Co :: Num Int
[LclId]
$dNum_a19Co = $dNum_a19BB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a19Ck :: Num Int
[LclId]
$dNum_a19Ck = $dNum_a19BB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a19Ci :: Num ByteOff
[LclId]
$dNum_a19Ci = $dNum_a19BB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a19Cg :: Num ByteOff
[LclId]
$dNum_a19Cg = $dNum_a19BB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a19Cd :: Num Int
[LclId]
$dNum_a19Cd = $dNum_a19BB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a19C9 :: Num Int
[LclId]
$dNum_a19C9 = $dNum_a19BB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a19C7 :: Num ByteOff
[LclId]
$dNum_a19C7 = $dNum_a19BB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a19C4 :: Num ByteOff
[LclId]
$dNum_a19C4 = $dNum_a19BB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a19C1 :: Num ByteOff
[LclId]
$dNum_a19C1 = $dNum_a19BB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a19BY :: Num WordOff
[LclId]
$dNum_a19BY = $dNum_a19BB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a19BV :: Num WordOff
[LclId]
$dNum_a19BV = $dNum_a19BB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a19BR :: Num WordOff
[LclId]
$dNum_a19BR = $dNum_a19BB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a19BO :: Num WordOff
[LclId]
$dNum_a19BO = $dNum_a19BB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a19BK :: Num WordOff
[LclId]
$dNum_a19BK = $dNum_a19BB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a19BH :: Num WordOff
[LclId]
$dNum_a19BH = $dNum_a19BB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a19BD :: Num WordOff
[LclId]
$dNum_a19BD = $dNum_a19BB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a19BB :: Num WordOff
[LclId]
$dNum_a19BB = GHC.Num.$fNumInt

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dIntegral_a19I0 :: Integral GHC.Runtime.Heap.Layout.SelectorOffset
[LclId]
$dIntegral_a19I0 = $dIntegral_a19Dc

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dIntegral_a19HA :: Integral GHC.Types.Basic.ConTagZ
[LclId]
$dIntegral_a19HA = $dIntegral_a19Dc

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dIntegral_a19H2 :: Integral Int
[LclId]
$dIntegral_a19H2 = $dIntegral_a19Dc

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dIntegral_a19GY :: Integral Int
[LclId]
$dIntegral_a19GY = $dIntegral_a19Dc

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dIntegral_a19Gd :: Integral Int
[LclId]
$dIntegral_a19Gd = $dIntegral_a19Dc

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dIntegral_a19G2 :: Integral Int
[LclId]
$dIntegral_a19G2 = $dIntegral_a19Dc

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dIntegral_a19Fs :: Integral Int
[LclId]
$dIntegral_a19Fs = $dIntegral_a19Dc

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dIntegral_a19Dc :: Integral Int
[LclId]
$dIntegral_a19Dc = GHC.Real.$fIntegralInt

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a19I1 :: Num Integer
[LclId]
$dNum_a19I1 = $dNum_a19Ei

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a19HB :: Num Integer
[LclId]
$dNum_a19HB = $dNum_a19Ei

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a19H3 :: Num Integer
[LclId]
$dNum_a19H3 = $dNum_a19Ei

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a19GZ :: Num Integer
[LclId]
$dNum_a19GZ = $dNum_a19Ei

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a19Ge :: Num Integer
[LclId]
$dNum_a19Ge = $dNum_a19Ei

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a19G3 :: Num Integer
[LclId]
$dNum_a19G3 = $dNum_a19Ei

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a19Ft :: Num Integer
[LclId]
$dNum_a19Ft = $dNum_a19Ei

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a19Em :: Num Integer
[LclId]
$dNum_a19Em = $dNum_a19Ei

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a19Ei :: Num Integer
[LclId]
$dNum_a19Ei = GHC.Num.$fNumInteger

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a19MQ :: Monad UniqSM
[LclId]
$dMonad_a19MQ = $dMonad_a19EH

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a19MJ :: Monad UniqSM
[LclId]
$dMonad_a19MJ = $dMonad_a19EH

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a19Mv :: Monad UniqSM
[LclId]
$dMonad_a19Mv = $dMonad_a19EH

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a19Me :: Monad UniqSM
[LclId]
$dMonad_a19Me = $dMonad_a19EH

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a19LX :: Monad UniqSM
[LclId]
$dMonad_a19LX = $dMonad_a19EH

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a19LK :: Monad UniqSM
[LclId]
$dMonad_a19LK = $dMonad_a19EH

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a19Ln :: Monad UniqSM
[LclId]
$dMonad_a19Ln = $dMonad_a19EH

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a19L1 :: Monad UniqSM
[LclId]
$dMonad_a19L1 = $dMonad_a19EH

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a19KH :: Monad UniqSM
[LclId]
$dMonad_a19KH = $dMonad_a19EH

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a19Kx :: Monad UniqSM
[LclId]
$dMonad_a19Kx = $dMonad_a19EH

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a19Km :: Monad UniqSM
[LclId]
$dMonad_a19Km = $dMonad_a19EH

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a19K9 :: Monad UniqSM
[LclId]
$dMonad_a19K9 = $dMonad_a19EH

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a19JT :: Monad UniqSM
[LclId]
$dMonad_a19JT = $dMonad_a19EH

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a19JB :: Monad UniqSM
[LclId]
$dMonad_a19JB = $dMonad_a19EH

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a19Jo :: Monad UniqSM
[LclId]
$dMonad_a19Jo = $dMonad_a19EH

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a19IU :: Monad UniqSM
[LclId]
$dMonad_a19IU = $dMonad_a19EH

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a19IB :: Monad UniqSM
[LclId]
$dMonad_a19IB = $dMonad_a19EH

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a19Ia :: Monad UniqSM
[LclId]
$dMonad_a19Ia = $dMonad_a19EH

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a19HQ :: Monad UniqSM
[LclId]
$dMonad_a19HQ = $dMonad_a19EH

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a19HG :: Monad UniqSM
[LclId]
$dMonad_a19HG = $dMonad_a19EH

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a19Hr :: Monad UniqSM
[LclId]
$dMonad_a19Hr = $dMonad_a19EH

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a19Hl :: Monad UniqSM
[LclId]
$dMonad_a19Hl = $dMonad_a19EH

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a19GH :: Monad UniqSM
[LclId]
$dMonad_a19GH = $dMonad_a19EH

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a19Gy :: Monad UniqSM
[LclId]
$dMonad_a19Gy = $dMonad_a19EH

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a19Go :: Monad UniqSM
[LclId]
$dMonad_a19Go = $dMonad_a19EH

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a19F5 :: Monad UniqSM
[LclId]
$dMonad_a19F5 = $dMonad_a19EH

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a19EZ :: Monad UniqSM
[LclId]
$dMonad_a19EZ = $dMonad_a19EH

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a19ER :: Monad UniqSM
[LclId]
$dMonad_a19ER = $dMonad_a19EH

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a19EH :: Monad UniqSM
[LclId]
$dMonad_a19EH = GHC.Types.Unique.Supply.$fMonadUniqSM

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dFoldable_a19MV :: Foldable []
[LclId]
$dFoldable_a19MV = $dFoldable_a19FF

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dFoldable_a19JL :: Foldable []
[LclId]
$dFoldable_a19JL = $dFoldable_a19FF

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dFoldable_a19IJ :: Foldable []
[LclId]
$dFoldable_a19IJ = $dFoldable_a19FF

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dFoldable_a19Iq :: Foldable []
[LclId]
$dFoldable_a19Iq = $dFoldable_a19FF

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dFoldable_a19FF :: Foldable []
[LclId]
$dFoldable_a19FF = Data.Foldable.$fFoldable[]

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dBits_a19G5 :: Bits StgWord
[LclId]
$dBits_a19G5 = $dBits_a19FZ

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dBits_a19FZ :: Bits StgWord
[LclId]
$dBits_a19FZ = GHC.Runtime.Heap.Layout.$fBitsStgWord

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dOrd_a19Gk :: Ord Int
[LclId]
$dOrd_a19Gk = ghc-prim-0.6.1:GHC.Classes.$fOrdInt

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonadUnique_a19Gs :: MonadUnique UniqSM
[LclId]
$dMonadUnique_a19Gs = GHC.Types.Unique.Supply.$fMonadUniqueUniqSM

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dEq_a19GR :: Eq Arch
[LclId]
$dEq_a19GR = GHC.Platform.ArchOS.$fEqArch

-- RHS size: {terms: 20, types: 3, coercions: 7, joins: 0/0}
$dIP_a19J3 :: HasCallStack
[LclId]
$dIP_a19J3
  = (GHC.Stack.Types.pushCallStack
       (ghc-prim-0.6.1:GHC.CString.unpackCString# "pprPanic"#,
        GHC.Stack.Types.SrcLoc
          (ghc-prim-0.6.1:GHC.CString.unpackCString# "ghc"#)
          (ghc-prim-0.6.1:GHC.CString.unpackCString# "GHC.Cmm.Info"#)
          (ghc-prim-0.6.1:GHC.CString.unpackCString#
             "E:\\\\ghc_inferTags\\\\compiler\\\\GHC\\\\Cmm\\\\Info.hs"#)
          (ghc-prim-0.6.1:GHC.Types.I# 264#)
          (ghc-prim-0.6.1:GHC.Types.I# 25#)
          (ghc-prim-0.6.1:GHC.Types.I# 264#)
          (ghc-prim-0.6.1:GHC.Types.I# 57#))
       ($dIP_a19OK
        `cast` (ghc-prim-0.6.1:GHC.Classes.N:IP[0]
                    <"callStack">_N <GHC.Stack.Types.CallStack>_N
                :: (?callStack::GHC.Stack.Types.CallStack)
                   ~R# GHC.Stack.Types.CallStack)))
    `cast` (Sym (ghc-prim-0.6.1:GHC.Classes.N:IP[0]
                     <"callStack">_N <GHC.Stack.Types.CallStack>_N)
            :: GHC.Stack.Types.CallStack
               ~R# (?callStack::GHC.Stack.Types.CallStack))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dOutputable_a19J5 :: Outputable ClosureTypeInfo
[LclId]
$dOutputable_a19J5
  = GHC.Runtime.Heap.Layout.$fOutputableClosureTypeInfo

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dIsMap_a19N1 :: IsMap GHC.Cmm.Dataflow.Label.LabelMap
[LclId]
$dIsMap_a19N1 = $dIsMap_a19LS

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dIsMap_a19MM :: IsMap GHC.Cmm.Dataflow.Label.LabelMap
[LclId]
$dIsMap_a19MM = $dIsMap_a19LS

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dIsMap_a19Ml :: IsMap GHC.Cmm.Dataflow.Label.LabelMap
[LclId]
$dIsMap_a19Ml = $dIsMap_a19LS

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dIsMap_a19LS :: IsMap GHC.Cmm.Dataflow.Label.LabelMap
[LclId]
$dIsMap_a19LS = GHC.Cmm.Dataflow.Label.$fIsMapLabelMap

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dFunctor_a19Mz :: Functor UniqSM
[LclId]
$dFunctor_a19Mz = GHC.Types.Unique.Supply.$fFunctorUniqSM

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dTraversable_a19MF :: Traversable []
[LclId]
$dTraversable_a19MF = Data.Traversable.$fTraversable[]

-- RHS size: {terms: 1, types: 0, coercions: 4, joins: 0/0}
$dIP_a19OK :: HasCallStack
[LclId]
$dIP_a19OK
  = GHC.Stack.Types.emptyCallStack
    `cast` (Sym (ghc-prim-0.6.1:GHC.Classes.N:IP[0]
                     <"callStack">_N <GHC.Stack.Types.CallStack>_N)
            :: GHC.Stack.Types.CallStack
               ~R# (?callStack::GHC.Stack.Types.CallStack))

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
GHC.Cmm.Info.$tcPtrOpts :: ghc-prim-0.6.1:GHC.Types.TyCon
[LclIdX]
GHC.Cmm.Info.$tcPtrOpts
  = ghc-prim-0.6.1:GHC.Types.TyCon
      10783844252980521413##
      13019815378033756893##
      GHC.Cmm.Info.$trModule
      (ghc-prim-0.6.1:GHC.Types.TrNameS "PtrOpts"#)
      0#
      ghc-prim-0.6.1:GHC.Types.krep$*

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
GHC.Cmm.Info.$tc'PtrOpts :: ghc-prim-0.6.1:GHC.Types.TyCon
[LclIdX]
GHC.Cmm.Info.$tc'PtrOpts
  = ghc-prim-0.6.1:GHC.Types.TyCon
      11086577099826734001##
      4931096801432934088##
      GHC.Cmm.Info.$trModule
      (ghc-prim-0.6.1:GHC.Types.TrNameS "'PtrOpts"#)
      0#
      $krep_a19ON

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a19OP [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.6.1:GHC.Types.KindRep
[LclId]
$krep_a19OP
  = ghc-prim-0.6.1:GHC.Types.KindRepFun $krep_a19OQ $krep_a19OR

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a19ON [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.6.1:GHC.Types.KindRep
[LclId]
$krep_a19ON
  = ghc-prim-0.6.1:GHC.Types.KindRepFun $krep_a19OO $krep_a19OP

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_a19OO [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.6.1:GHC.Types.KindRep
[LclId]
$krep_a19OO
  = ghc-prim-0.6.1:GHC.Types.KindRepTyConApp
      GHC.Platform.Profile.$tcProfile
      (ghc-prim-0.6.1:GHC.Types.[] @ ghc-prim-0.6.1:GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_a19OQ [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.6.1:GHC.Types.KindRep
[LclId]
$krep_a19OQ
  = ghc-prim-0.6.1:GHC.Types.KindRepTyConApp
      ghc-prim-0.6.1:GHC.Types.$tcBool
      (ghc-prim-0.6.1:GHC.Types.[] @ ghc-prim-0.6.1:GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_a19OR [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.6.1:GHC.Types.KindRep
[LclId]
$krep_a19OR
  = ghc-prim-0.6.1:GHC.Types.KindRepTyConApp
      GHC.Cmm.Info.$tcPtrOpts
      (ghc-prim-0.6.1:GHC.Types.[] @ ghc-prim-0.6.1:GHC.Types.KindRep)

-- RHS size: {terms: 5, types: 0, coercions: 0, joins: 0/0}
GHC.Cmm.Info.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX]
GHC.Cmm.Info.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module
      (ghc-prim-0.6.1:GHC.Types.TrNameS "ghc"#)
      (ghc-prim-0.6.1:GHC.Types.TrNameS "GHC.Cmm.Info"#)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
profInfoTableSizeW :: WordOff
[LclIdX]
profInfoTableSizeW = ghc-prim-0.6.1:GHC.Types.I# 2#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
fixedInfoTableSizeW :: WordOff
[LclIdX]
fixedInfoTableSizeW = ghc-prim-0.6.1:GHC.Types.I# 2#

-- RHS size: {terms: 8, types: 2, coercions: 0, joins: 0/0}
maxStdInfoTableSizeW :: WordOff
[LclIdX]
maxStdInfoTableSizeW
  = + @ WordOff
      $dNum_a19BB
      (+ @ WordOff
         $dNum_a19BD
         (ghc-prim-0.6.1:GHC.Types.I# 1#)
         fixedInfoTableSizeW)
      profInfoTableSizeW

-- RHS size: {terms: 5, types: 1, coercions: 0, joins: 0/0}
maxRetInfoTableSizeW :: WordOff
[LclIdX]
maxRetInfoTableSizeW
  = + @ WordOff
      $dNum_a19BK
      maxStdInfoTableSizeW
      (ghc-prim-0.6.1:GHC.Types.I# 1#)

-- RHS size: {terms: 12, types: 3, coercions: 0, joins: 0/0}
stdInfoTableSizeW :: Profile -> WordOff
[LclIdX]
stdInfoTableSizeW
  = \ (profile_a19wi :: Profile) ->
      + @ WordOff
        $dNum_a19BR
        fixedInfoTableSizeW
        (case profileIsProfiling profile_a19wi of wild_00 {
           False -> ghc-prim-0.6.1:GHC.Types.I# 0#;
           True -> profInfoTableSizeW
         })

-- RHS size: {terms: 7, types: 2, coercions: 0, joins: 0/0}
stdInfoTableSizeB :: Profile -> ByteOff
[LclIdX]
stdInfoTableSizeB
  = \ (profile_a19wj :: Profile) ->
      * @ WordOff
        $dNum_a19BY
        (stdInfoTableSizeW profile_a19wj)
        (profileWordSizeInBytes profile_a19wj)

-- RHS size: {terms: 8, types: 2, coercions: 0, joins: 0/0}
stdSrtBitmapOffset :: Profile -> ByteOff
[LclIdX]
stdSrtBitmapOffset
  = \ (profile_a19wk :: Profile) ->
      - @ ByteOff
        $dNum_a19C1
        (stdInfoTableSizeB profile_a19wk)
        (halfWordSize (profilePlatform profile_a19wk))

-- RHS size: {terms: 7, types: 2, coercions: 0, joins: 0/0}
stdClosureTypeOffset :: Profile -> ByteOff
[LclIdX]
stdClosureTypeOffset
  = \ (profile_a19wl :: Profile) ->
      - @ ByteOff
        $dNum_a19C4
        (stdInfoTableSizeB profile_a19wl)
        (profileWordSizeInBytes profile_a19wl)

-- RHS size: {terms: 11, types: 3, coercions: 0, joins: 0/0}
stdPtrsOffset :: Profile -> ByteOff
[LclIdX]
stdPtrsOffset
  = \ (profile_a19wm :: Profile) ->
      - @ ByteOff
        $dNum_a19C7
        (stdInfoTableSizeB profile_a19wm)
        (* @ Int
           $dNum_a19C9
           (ghc-prim-0.6.1:GHC.Types.I# 2#)
           (profileWordSizeInBytes profile_a19wm))

-- RHS size: {terms: 16, types: 4, coercions: 0, joins: 0/0}
stdNonPtrsOffset :: Profile -> ByteOff
[LclIdX]
stdNonPtrsOffset
  = \ (profile_a19wn :: Profile) ->
      + @ ByteOff
        $dNum_a19Cg
        (- @ ByteOff
           $dNum_a19Ci
           (stdInfoTableSizeB profile_a19wn)
           (* @ Int
              $dNum_a19Ck
              (ghc-prim-0.6.1:GHC.Types.I# 2#)
              (profileWordSizeInBytes profile_a19wn)))
        (halfWordSize (profilePlatform profile_a19wn))

-- RHS size: {terms: 7, types: 2, coercions: 0, joins: 0/0}
conInfoTableSizeB :: Profile -> Int
[LclIdX]
conInfoTableSizeB
  = \ (profile_a19wo :: Profile) ->
      + @ ByteOff
        $dNum_a19Cr
        (stdInfoTableSizeB profile_a19wo)
        (profileWordSizeInBytes profile_a19wo)

-- RHS size: {terms: 35, types: 10, coercions: 0, joins: 0/2}
funInfoTable :: Profile -> CmmExpr -> CmmExpr
[LclIdX]
funInfoTable
  = \ (profile_a19w6 :: Profile) (info_ptr_a19w7 :: CmmExpr) ->
      letrec {
        platform_a19w8 :: Platform
        [LclId]
        platform_a19w8 = profilePlatform profile_a19w6; } in
      let {
        fail_d19OY :: ghc-prim-0.6.1:GHC.Prim.Void# -> CmmExpr
        [LclId]
        fail_d19OY
          = \ (ds_d19OZ [OS=OneShot] :: ghc-prim-0.6.1:GHC.Prim.Void#) ->
              cmmOffsetW
                platform_a19w8
                info_ptr_a19w7
                (+ @ WordOff
                   $dNum_a19CE
                   (ghc-prim-0.6.1:GHC.Types.I# 1#)
                   (stdInfoTableSizeW profile_a19w6)) } in
      case platformTablesNextToCode platform_a19w8 of wild_00 {
        False -> fail_d19OY ghc-prim-0.6.1:GHC.Prim.void#;
        True ->
          cmmOffsetB
            platform_a19w8
            info_ptr_a19w7
            (- @ ByteOff
               $dNum_a19Cy
               (negate @ ByteOff $dNum_a19CC (stdInfoTableSizeB profile_a19w6))
               (pc_SIZEOF_StgFunInfoExtraRev (platformConstants platform_a19w8)))
      }

-- RHS size: {terms: 58, types: 33, coercions: 0, joins: 0/9}
funInfoArity :: Profile -> CmmExpr -> CmmExpr
[LclIdX]
funInfoArity
  = \ (profile_a19w9 :: Profile) (iptr_a19wa :: CmmExpr) ->
      letrec {
        fun_info_a19wc :: CmmExpr
        [LclId]
        fun_info_a19wc = funInfoTable profile_a19w9 iptr_a19wa; } in
      letrec {
        platform_a19wb :: Platform
        [LclId]
        platform_a19wb = profilePlatform profile_a19w9; } in
      letrec {
        tablesNextToCode_a19we :: Bool
        [LclId]
        tablesNextToCode_a19we
          = platformTablesNextToCode platform_a19wb; } in
      letrec {
        pc_a19wh :: PlatformConstants
        [LclId]
        pc_a19wh = platformConstants platform_a19wb; } in
      letrec {
        ds_d19P6 :: (Int, Int)
        [LclId]
        ds_d19P6
          = let {
              fail_d19P0 :: ghc-prim-0.6.1:GHC.Prim.Void# -> (Int, Int)
              [LclId]
              fail_d19P0
                = \ (ds_d19P1 [OS=OneShot] :: ghc-prim-0.6.1:GHC.Prim.Void#) ->
                    (pc_REP_StgFunInfoExtraFwd_arity pc_a19wh,
                     pc_OFFSET_StgFunInfoExtraFwd_arity pc_a19wh) } in
            case tablesNextToCode_a19we of wild_00 {
              False -> fail_d19P0 ghc-prim-0.6.1:GHC.Prim.void#;
              True ->
                (pc_REP_StgFunInfoExtraRev_arity pc_a19wh,
                 pc_OFFSET_StgFunInfoExtraRev_arity pc_a19wh)
            };
        rep_bytes_a19wf :: Int
        [LclId]
        rep_bytes_a19wf
          = case ds_d19P6 of wild_00 { (rep_bytes_a19wf, offset_a19wg) ->
            rep_bytes_a19wf
            };
        offset_a19wg :: Int
        [LclId]
        offset_a19wg
          = case ds_d19P6 of wild_00 { (rep_bytes_a19wf, offset_a19wg) ->
            offset_a19wg
            }; } in
      letrec {
        rep_a19wd :: CmmType
        [LclId]
        rep_a19wd = cmmBits (widthFromBytes rep_bytes_a19wf); } in
      cmmToWord
        platform_a19wb
        (cmmLoadIndex
           platform_a19wb
           rep_a19wd
           fun_info_a19wc
           (div @ Int $dIntegral_a19Dc offset_a19wg rep_bytes_a19wf))

-- RHS size: {terms: 13, types: 3, coercions: 0, joins: 0/1}
infoTableNonPtrs :: Profile -> CmmExpr -> CmmExpr
[LclIdX]
infoTableNonPtrs
  = \ (profile_a19w3 :: Profile) (info_tbl_a19w4 :: CmmExpr) ->
      letrec {
        platform_a19w5 :: Platform
        [LclId]
        platform_a19w5 = profilePlatform profile_a19w3; } in
      GHC.Cmm.Expr.$WCmmLoad
        (cmmOffsetB
           platform_a19w5 info_tbl_a19w4 (stdNonPtrsOffset profile_a19w3))
        (bHalfWord platform_a19w5)

-- RHS size: {terms: 13, types: 3, coercions: 0, joins: 0/1}
infoTablePtrs :: Profile -> CmmExpr -> CmmExpr
[LclIdX]
infoTablePtrs
  = \ (profile_a19w0 :: Profile) (info_tbl_a19w1 :: CmmExpr) ->
      letrec {
        platform_a19w2 :: Platform
        [LclId]
        platform_a19w2 = profilePlatform profile_a19w0; } in
      GHC.Cmm.Expr.$WCmmLoad
        (cmmOffsetB
           platform_a19w2 info_tbl_a19w1 (stdPtrsOffset profile_a19w0))
        (bHalfWord platform_a19w2)

-- RHS size: {terms: 13, types: 3, coercions: 0, joins: 0/1}
infoTableClosureType :: Profile -> CmmExpr -> CmmExpr
[LclIdX]
infoTableClosureType
  = \ (profile_a19vX :: Profile) (info_tbl_a19vY :: CmmExpr) ->
      letrec {
        platform_a19vZ :: Platform
        [LclId]
        platform_a19vZ = profilePlatform profile_a19vX; } in
      GHC.Cmm.Expr.$WCmmLoad
        (cmmOffsetB
           platform_a19vZ info_tbl_a19vY (stdClosureTypeOffset profile_a19vX))
        (bHalfWord platform_a19vZ)

-- RHS size: {terms: 13, types: 3, coercions: 0, joins: 0/1}
infoTableSrtBitmap :: Profile -> CmmExpr -> CmmExpr
[LclIdX]
infoTableSrtBitmap
  = \ (profile_a19vU :: Profile) (info_tbl_a19vV :: CmmExpr) ->
      letrec {
        platform_a19vW :: Platform
        [LclId]
        platform_a19vW = profilePlatform profile_a19vU; } in
      GHC.Cmm.Expr.$WCmmLoad
        (cmmOffsetB
           platform_a19vW info_tbl_a19vV (stdSrtBitmapOffset profile_a19vU))
        (bHalfWord platform_a19vW)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
infoTableConstrTag :: Profile -> CmmExpr -> CmmExpr
[LclIdX]
infoTableConstrTag = infoTableSrtBitmap

-- RHS size: {terms: 26, types: 8, coercions: 0, joins: 0/2}
infoTable :: Profile -> CmmExpr -> CmmExpr
[LclIdX]
infoTable
  = \ (profile_a19vR :: Profile) (info_ptr_a19vS :: CmmExpr) ->
      letrec {
        platform_a19vT :: Platform
        [LclId]
        platform_a19vT = profilePlatform profile_a19vR; } in
      let {
        fail_d19Pl :: ghc-prim-0.6.1:GHC.Prim.Void# -> CmmExpr
        [LclId]
        fail_d19Pl
          = \ (ds_d19Pm [OS=OneShot] :: ghc-prim-0.6.1:GHC.Prim.Void#) ->
              cmmOffsetW
                platform_a19vT info_ptr_a19vS (ghc-prim-0.6.1:GHC.Types.I# 1#) } in
      case platformTablesNextToCode platform_a19vT of wild_00 {
        False -> fail_d19Pl ghc-prim-0.6.1:GHC.Prim.void#;
        True ->
          cmmOffsetB
            platform_a19vT
            info_ptr_a19vS
            (negate @ ByteOff $dNum_a19DG (stdInfoTableSizeB profile_a19vR))
      }

-- RHS size: {terms: 12, types: 3, coercions: 0, joins: 0/0}
entryCode :: Platform -> CmmExpr -> CmmExpr
[LclIdX]
entryCode
  = \ (platform_a19vF :: Platform) (e_a19vG :: CmmExpr) ->
      case platformTablesNextToCode platform_a19vF of wild_00 {
        False -> GHC.Cmm.Expr.$WCmmLoad e_a19vG (bWord platform_a19vF);
        True -> e_a19vG
      }

-- RHS size: {terms: 29, types: 14, coercions: 0, joins: 0/2}
wordAligned :: PtrOpts -> CmmExpr -> CmmExpr
[LclIdX]
wordAligned
  = \ (opts_a19vA :: PtrOpts) (e_a19vB :: CmmExpr) ->
      letrec {
        platform_a19vC :: Platform
        [LclId]
        platform_a19vC = profilePlatform (po_profile opts_a19vA); } in
      let {
        fail_d19Pw :: ghc-prim-0.6.1:GHC.Prim.Void# -> CmmExpr
        [LclId]
        fail_d19Pw
          = \ (ds_d19Px [OS=OneShot] :: ghc-prim-0.6.1:GHC.Prim.Void#) ->
              e_a19vB } in
      case po_align_check opts_a19vA of wild_00 {
        False -> fail_d19Pw ghc-prim-0.6.1:GHC.Prim.void#;
        True ->
          GHC.Cmm.Expr.CmmMachOp
            (GHC.Cmm.MachOp.MO_AlignmentCheck
               (platformWordSizeInBytes platform_a19vC)
               (wordWidth platform_a19vC))
            (GHC.Base.build
               @ CmmExpr
               (\ (@ a_d19Pn)
                  (c_d19Po :: CmmExpr -> a_d19Pn -> a_d19Pn)
                  (n_d19Pp :: a_d19Pn) ->
                  c_d19Po e_a19vB n_d19Pp))
      }

-- RHS size: {terms: 10, types: 2, coercions: 0, joins: 0/0}
closureInfoPtr :: PtrOpts -> CmmExpr -> CmmExpr
[LclIdX]
closureInfoPtr
  = \ (opts_a19vD :: PtrOpts) (e_a19vE :: CmmExpr) ->
      GHC.Cmm.Expr.$WCmmLoad
        (wordAligned opts_a19vD e_a19vE)
        (bWord (profilePlatform (po_profile opts_a19vD)))

-- RHS size: {terms: 29, types: 12, coercions: 0, joins: 0/3}
getConstrTag :: PtrOpts -> CmmExpr -> CmmExpr
[LclIdX]
getConstrTag
  = \ (opts_a19vH :: PtrOpts) (closure_ptr_a19vI :: CmmExpr) ->
      letrec {
        profile_a19vL :: Profile
        [LclId]
        profile_a19vL = po_profile opts_a19vH; } in
      letrec {
        platform_a19vK :: Platform
        [LclId]
        platform_a19vK = profilePlatform profile_a19vL; } in
      letrec {
        info_table_a19vJ :: CmmExpr
        [LclId]
        info_table_a19vJ
          = infoTable
              profile_a19vL (closureInfoPtr opts_a19vH closure_ptr_a19vI); } in
      GHC.Cmm.Expr.CmmMachOp
        (GHC.Cmm.MachOp.MO_UU_Conv
           (halfWordWidth platform_a19vK) (wordWidth platform_a19vK))
        (GHC.Base.build
           @ CmmExpr
           (\ (@ a_d19Py)
              (c_d19Pz :: CmmExpr -> a_d19Py -> a_d19Py)
              (n_d19PA :: a_d19Py) ->
              c_d19Pz
                (infoTableConstrTag profile_a19vL info_table_a19vJ) n_d19PA))

-- RHS size: {terms: 29, types: 12, coercions: 0, joins: 0/3}
cmmGetClosureType :: PtrOpts -> CmmExpr -> CmmExpr
[LclIdX]
cmmGetClosureType
  = \ (opts_a19vM :: PtrOpts) (closure_ptr_a19vN :: CmmExpr) ->
      letrec {
        profile_a19vQ :: Profile
        [LclId]
        profile_a19vQ = po_profile opts_a19vM; } in
      letrec {
        platform_a19vP :: Platform
        [LclId]
        platform_a19vP = profilePlatform profile_a19vQ; } in
      letrec {
        info_table_a19vO :: CmmExpr
        [LclId]
        info_table_a19vO
          = infoTable
              profile_a19vQ (closureInfoPtr opts_a19vM closure_ptr_a19vN); } in
      GHC.Cmm.Expr.CmmMachOp
        (GHC.Cmm.MachOp.MO_UU_Conv
           (halfWordWidth platform_a19vP) (wordWidth platform_a19vP))
        (GHC.Base.build
           @ CmmExpr
           (\ (@ a_d19PB)
              (c_d19PC :: CmmExpr -> a_d19PB -> a_d19PB)
              (n_d19PD :: a_d19PB) ->
              c_d19PC
                (infoTableClosureType profile_a19vQ info_table_a19vO) n_d19PD))

-- RHS size: {terms: 6, types: 2, coercions: 0, joins: 0/0}
srtEscape :: Platform -> StgHalfWord
[LclIdX]
srtEscape
  = \ (platform_a19vz :: Platform) ->
      toStgHalfWord platform_a19vz (negate @ Integer $dNum_a19Ei 1)

-- RHS size: {terms: 20, types: 32, coercions: 0, joins: 0/3}
newStringLit
  :: forall info stmt.
     ByteString -> UniqSM (CmmLit, GenCmmDecl RawCmmStatics info stmt)
[LclIdX]
newStringLit
  = \ (@ info_a19En) (@ stmt_a19Eo) ->
      let {
        $dMonad_a19Ez :: Monad UniqSM
        [LclId]
        $dMonad_a19Ez = $dMonad_a19EH } in
      let {
        $dMonadUnique_a19Ex :: MonadUnique UniqSM
        [LclId]
        $dMonadUnique_a19Ex = $dMonadUnique_a19Gs } in
      let {
        $dMonad_a19Et :: Monad UniqSM
        [LclId]
        $dMonad_a19Et = $dMonad_a19EH } in
      \ (bytes_a19vx :: ByteString) ->
        >>=
          @ UniqSM
          $dMonad_a19Et
          @ GHC.Types.Unique.Unique
          @ (CmmLit, GenCmmDecl RawCmmStatics info_a19En stmt_a19Eo)
          (getUniqueM @ UniqSM $dMonadUnique_a19Ex)
          (\ (uniq_a19vy :: GHC.Types.Unique.Unique) ->
             return
               @ UniqSM
               $dMonad_a19Ez
               @ (CmmLit, GenCmmDecl (GenCmmStatics 'True) info_a19En stmt_a19Eo)
               (mkByteStringCLit
                  @ 'True
                  @ info_a19En
                  @ stmt_a19Eo
                  (mkStringLitLabel uniq_a19vy)
                  bytes_a19vx))

-- RHS size: {terms: 46, types: 131, coercions: 0, joins: 0/0}
mkProfLits
  :: Platform
     -> ProfilingInfo -> UniqSM ((CmmLit, CmmLit), [RawCmmDecl])
[LclIdX]
mkProfLits
  = \ (platform_a19vq :: Platform) (ds_d19PE :: ProfilingInfo) ->
      case ds_d19PE of wild_00 {
        NoProfilingInfo ->
          return
            @ UniqSM
            $dMonad_a19EH
            @ ((CmmLit, CmmLit), [RawCmmDecl])
            ((zeroCLit platform_a19vq, zeroCLit platform_a19vq),
             ghc-prim-0.6.1:GHC.Types.[] @ RawCmmDecl);
        ProfilingInfo td_a19vr cd_a19vs ->
          >>=
            @ UniqSM
            $dMonad_a19ER
            @ (CmmLit,
               GenCmmDecl
                 RawCmmStatics
                 (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                 CmmGraph)
            @ ((CmmLit, CmmLit), [RawCmmDecl])
            (newStringLit
               @ (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
               @ CmmGraph
               td_a19vr)
            (\ (ds_d19PR
                  :: (CmmLit,
                      GenCmmDecl
                        RawCmmStatics
                        (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                        CmmGraph)) ->
               case ds_d19PR of wild_00 { (td_lit_a19vt, td_decl_a19vu) ->
               >>=
                 @ UniqSM
                 $dMonad_a19EZ
                 @ (CmmLit,
                    GenCmmDecl
                      RawCmmStatics
                      (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                      CmmGraph)
                 @ ((CmmLit, CmmLit), [RawCmmDecl])
                 (newStringLit
                    @ (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                    @ CmmGraph
                    cd_a19vs)
                 (\ (ds_d19PM
                       :: (CmmLit,
                           GenCmmDecl
                             RawCmmStatics
                             (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                             CmmGraph)) ->
                    case ds_d19PM of wild_00 { (cd_lit_a19vv, cd_decl_a19vw) ->
                    return
                      @ UniqSM
                      $dMonad_a19F5
                      @ ((CmmLit, CmmLit),
                         [GenCmmDecl
                            RawCmmStatics
                            (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                            CmmGraph])
                      ((td_lit_a19vt, cd_lit_a19vv),
                       GHC.Base.build
                         @ (GenCmmDecl
                              RawCmmStatics
                              (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                              CmmGraph)
                         (\ (@ a_d19PJ)
                            (c_d19PK
                               :: GenCmmDecl
                                    RawCmmStatics
                                    (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                                    CmmGraph
                                  -> a_d19PJ -> a_d19PJ)
                            (n_d19PL :: a_d19PJ) ->
                            c_d19PK td_decl_a19vu (c_d19PK cd_decl_a19vw n_d19PL)))
                    })
               })
      }

-- RHS size: {terms: 52, types: 39, coercions: 0, joins: 0/4}
mkStdInfoTable
  :: DynFlags
     -> (CmmLit, CmmLit) -> Int -> CmmLit -> CmmLit -> [CmmLit]
[LclIdX]
mkStdInfoTable
  = \ (dflags_a19vh :: DynFlags)
      (ds_d19Q2 :: (CmmLit, CmmLit))
      (cl_type_a19vk :: Int)
      (srt_a19vl :: CmmLit)
      (layout_lit_a19vm :: CmmLit) ->
      case ds_d19Q2 of wild_00
      { (type_descr_a19vi, closure_descr_a19vj) ->
      letrec {
        prof_info_a19vo :: [CmmLit]
        [LclId]
        prof_info_a19vo
          = let {
              fail_d19Ql :: ghc-prim-0.6.1:GHC.Prim.Void# -> [CmmLit]
              [LclId]
              fail_d19Ql
                = \ (ds_d19Qm [OS=OneShot] :: ghc-prim-0.6.1:GHC.Prim.Void#) ->
                    ghc-prim-0.6.1:GHC.Types.[] @ CmmLit } in
            case sccProfilingEnabled dflags_a19vh of wild_00 {
              False -> fail_d19Ql ghc-prim-0.6.1:GHC.Prim.void#;
              True ->
                GHC.Base.build
                  @ CmmLit
                  (\ (@ a_d19Qc)
                     (c_d19Qd :: CmmLit -> a_d19Qc -> a_d19Qc)
                     (n_d19Qe :: a_d19Qc) ->
                     c_d19Qd type_descr_a19vi (c_d19Qd closure_descr_a19vj n_d19Qe))
            }; } in
      letrec {
        platform_a19vn :: Platform
        [LclId]
        platform_a19vn = targetPlatform dflags_a19vh; } in
      letrec {
        tag_a19vp :: CmmLit
        [LclId]
        tag_a19vp
          = GHC.Cmm.Expr.$WCmmInt
              (fromIntegral
                 @ Int @ Integer $dIntegral_a19Fs $dNum_a19Ft cl_type_a19vk)
              (halfWordWidth platform_a19vn); } in
      ++
        @ CmmLit
        prof_info_a19vo
        (GHC.Base.build
           @ CmmLit
           (\ (@ a_d19Q5)
              (c_d19Q6 :: CmmLit -> a_d19Q5 -> a_d19Q5)
              (n_d19Q7 :: a_d19Q5) ->
              c_d19Q6
                layout_lit_a19vm (c_d19Q6 tag_a19vp (c_d19Q6 srt_a19vl n_d19Q7))))
      }

-- RHS size: {terms: 103, types: 99, coercions: 0, joins: 0/10}
mkLivenessBits
  :: DynFlags -> Liveness -> UniqSM (CmmLit, [RawCmmDecl])
[LclIdX]
mkLivenessBits
  = \ (dflags_a19v6 :: DynFlags) (liveness_a19v7 :: Liveness) ->
      letrec {
        n_bits_a19v9 :: Int
        [LclId]
        n_bits_a19v9
          = length @ [] $dFoldable_a19FF @ Bool liveness_a19v7; } in
      letrec {
        platform_a19v8 :: Platform
        [LclId]
        platform_a19v8 = targetPlatform dflags_a19v6; } in
      letrec {
        bitmap_a19va :: Bitmap
        [LclId]
        bitmap_a19va = mkBitmap platform_a19v8 liveness_a19v7; } in
      letrec {
        small_bitmap_a19vb :: StgWord
        [LclId]
        small_bitmap_a19vb
          = let {
              ds_d19Qy :: [StgWord]
              [LclId]
              ds_d19Qy = bitmap_a19va } in
            let {
              fail_d19QU :: ghc-prim-0.6.1:GHC.Prim.Void# -> StgWord
              [LclId]
              fail_d19QU
                = \ (ds_d19QV [OS=OneShot] :: ghc-prim-0.6.1:GHC.Prim.Void#) ->
                    panic
                      @ StgWord
                      (ghc-prim-0.6.1:GHC.CString.unpackCString# "mkLiveness"#) } in
            case ds_d19Qy of wild_00 {
              [] -> toStgWord platform_a19v8 0;
              : b_a19ve ds_d19QT ->
                case ds_d19QT of wild_00 {
                  __DEFAULT -> fail_d19QU ghc-prim-0.6.1:GHC.Prim.void#;
                  [] -> b_a19ve
                }
            }; } in
      letrec {
        bitmap_word_a19vc :: StgWord
        [LclId]
        bitmap_word_a19vc
          = .|.
              @ StgWord
              $dBits_a19FZ
              (toStgWord
                 platform_a19v8
                 (fromIntegral
                    @ Int @ Integer $dIntegral_a19G2 $dNum_a19G3 n_bits_a19v9))
              (shiftL
                 @ StgWord
                 $dBits_a19G5
                 small_bitmap_a19vb
                 (pc_BITMAP_BITS_SHIFT (platformConstants platform_a19v8))); } in
      letrec {
        lits_a19vd :: [CmmLit]
        [LclId]
        lits_a19vd
          = ghc-prim-0.6.1:GHC.Types.:
              @ CmmLit
              (mkWordCLit
                 platform_a19v8
                 (fromIntegral
                    @ Int @ Integer $dIntegral_a19Gd $dNum_a19Ge n_bits_a19v9))
              (map
                 @ StgWord
                 @ CmmLit
                 (mkStgWordCLit platform_a19v8)
                 bitmap_a19va); } in
      let {
        fail_d19Qw
          :: ghc-prim-0.6.1:GHC.Prim.Void# -> UniqSM (CmmLit, [RawCmmDecl])
        [LclId]
        fail_d19Qw
          = \ (ds_d19Qx [OS=OneShot] :: ghc-prim-0.6.1:GHC.Prim.Void#) ->
              return
                @ UniqSM
                $dMonad_a19GH
                @ (CmmLit, [RawCmmDecl])
                (mkStgWordCLit platform_a19v8 bitmap_word_a19vc,
                 ghc-prim-0.6.1:GHC.Types.[] @ RawCmmDecl) } in
      case > @ Int
             $dOrd_a19Gk
             n_bits_a19v9
             (mAX_SMALL_BITMAP_SIZE platform_a19v8)
      of wild_00 {
        False -> fail_d19Qw ghc-prim-0.6.1:GHC.Prim.void#;
        True ->
          >>=
            @ UniqSM
            $dMonad_a19Go
            @ GHC.Types.Unique.Unique
            @ (CmmLit, [RawCmmDecl])
            (getUniqueM @ UniqSM $dMonadUnique_a19Gs)
            (\ (uniq_a19vf :: GHC.Types.Unique.Unique) ->
               letrec {
                 bitmap_lbl_a19vg :: CLabel
                 [LclId]
                 bitmap_lbl_a19vg = mkBitmapLabel uniq_a19vf; } in
               return
                 @ UniqSM
                 $dMonad_a19Gy
                 @ (CmmLit,
                    [GenCmmDecl
                       (GenCmmStatics 'True)
                       (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                       CmmGraph])
                 (GHC.Cmm.Expr.CmmLabel bitmap_lbl_a19vg,
                  GHC.Base.build
                    @ (GenCmmDecl
                         (GenCmmStatics 'True)
                         (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                         CmmGraph)
                    (\ (@ a_d19Qn)
                       (c_d19Qo
                          :: GenCmmDecl
                               (GenCmmStatics 'True)
                               (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                               CmmGraph
                             -> a_d19Qn -> a_d19Qn)
                       (n_d19Qp :: a_d19Qn) ->
                       c_d19Qo
                         (mkRODataLits
                            @ 'True
                            @ (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                            @ CmmGraph
                            bitmap_lbl_a19vg
                            lits_a19vd)
                         n_d19Qp)))
      }

-- RHS size: {terms: 34, types: 12, coercions: 0, joins: 0/2}
makeRelativeRefTo :: Platform -> CLabel -> CmmLit -> CmmLit
[LclIdX]
makeRelativeRefTo
  = \ (platform_a19v0 :: Platform)
      (info_lbl_a19v1 :: CLabel)
      (lit_a19v2 :: CmmLit) ->
      case platformTablesNextToCode platform_a19v0 of wild_00 {
        False -> lit_a19v2;
        True ->
          let {
            ds_d19QW :: CmmLit
            [LclId]
            ds_d19QW = lit_a19v2 } in
          let {
            fail_d19Rt :: ghc-prim-0.6.1:GHC.Prim.Void# -> CmmLit
            [LclId]
            fail_d19Rt
              = \ (ds_d19Ru [OS=OneShot] :: ghc-prim-0.6.1:GHC.Prim.Void#) ->
                  lit_a19v2 } in
          case ds_d19QW of wild_00 {
            __DEFAULT -> fail_d19Rt ghc-prim-0.6.1:GHC.Prim.void#;
            CmmLabel lbl_a19v3 ->
              GHC.Cmm.Expr.CmmLabelDiffOff
                lbl_a19v3
                info_lbl_a19v1
                (ghc-prim-0.6.1:GHC.Types.I# 0#)
                (wordWidth platform_a19v0);
            CmmLabelOff lbl_a19v4 off_a19v5 ->
              GHC.Cmm.Expr.CmmLabelDiffOff
                lbl_a19v4 info_lbl_a19v1 off_a19v5 (wordWidth platform_a19v0)
          }
      }

-- RHS size: {terms: 9, types: 2, coercions: 0, joins: 0/0}
inlineSRT :: Platform -> Bool
[LclIdX]
inlineSRT
  = \ (platform_a19uZ :: Platform) ->
      &&
        (==
           @ Arch
           $dEq_a19GR
           (platformArch platform_a19uZ)
           GHC.Platform.ArchOS.ArchX86_64)
        (platformTablesNextToCode platform_a19uZ)

-- RHS size: {terms: 50, types: 35, coercions: 0, joins: 0/4}
mkSRTLit
  :: Platform -> CLabel -> Maybe CLabel -> ([CmmLit], CmmLit)
[LclIdX]
mkSRTLit
  = \ (platform_a19uT :: Platform)
      (info_lbl_a19uU :: CLabel)
      (ds_d19Rv :: Maybe CLabel) ->
      let {
        platform_a19uW :: Platform
        [LclId]
        platform_a19uW = platform_a19uT } in
      let {
        platform_a19uX :: Platform
        [LclId]
        platform_a19uX = platform_a19uT } in
      case ds_d19Rv of wild_00 {
        Nothing ->
          (ghc-prim-0.6.1:GHC.Types.[] @ CmmLit,
           GHC.Cmm.Expr.$WCmmInt 0 (halfWordWidth platform_a19uW));
        Just lbl_a19uV ->
          let {
            lbl_a19uY :: CLabel
            [LclId]
            lbl_a19uY = lbl_a19uV } in
          let {
            fail_d19RQ :: ghc-prim-0.6.1:GHC.Prim.Void# -> ([CmmLit], CmmLit)
            [LclId]
            fail_d19RQ
              = \ (ds_d19RR [OS=OneShot] :: ghc-prim-0.6.1:GHC.Prim.Void#) ->
                  (GHC.Base.build
                     @ CmmLit
                     (\ (@ a_d19RC)
                        (c_d19RD :: CmmLit -> a_d19RC -> a_d19RC)
                        (n_d19RE :: a_d19RC) ->
                        c_d19RD (GHC.Cmm.Expr.CmmLabel lbl_a19uY) n_d19RE),
                   GHC.Cmm.Expr.$WCmmInt 1 (halfWordWidth platform_a19uX)) } in
          case inlineSRT platform_a19uT of wild_00 {
            False -> fail_d19RQ ghc-prim-0.6.1:GHC.Prim.void#;
            True ->
              (ghc-prim-0.6.1:GHC.Types.[] @ CmmLit,
               GHC.Cmm.Expr.CmmLabelDiffOff
                 lbl_a19uV
                 info_lbl_a19uU
                 (ghc-prim-0.6.1:GHC.Types.I# 0#)
                 (halfWordWidth platform_a19uT))
          }
      }

-- RHS size: {terms: 17, types: 7, coercions: 0, joins: 0/0}
packIntsCLit :: Platform -> Int -> Int -> CmmLit
[LclIdX]
packIntsCLit
  = \ (platform_a19uQ :: Platform)
      (a_a19uR :: Int)
      (b_a19uS :: Int) ->
      packHalfWordsCLit
        platform_a19uQ
        (toStgHalfWord
           platform_a19uQ
           (fromIntegral
              @ Int @ Integer $dIntegral_a19GY $dNum_a19GZ a_a19uR))
        (toStgHalfWord
           platform_a19uQ
           (fromIntegral
              @ Int @ Integer $dIntegral_a19H2 $dNum_a19H3 b_a19uS))

-- RHS size: {terms: 408, types: 606, coercions: 0, joins: 0/41}
mkInfoTableContents
  :: DynFlags
     -> CmmInfoTable
     -> Maybe Int
     -> UniqSM ([RawCmmDecl], InfoTableContents)
[LclIdX]
mkInfoTableContents
  = \ (dflags_a19tU :: DynFlags)
      (info_a19tV :: CmmInfoTable)
      (mb_rts_tag_a19u0 :: Maybe Int) ->
      let {
        fail_d19WA
          :: ghc-prim-0.6.1:GHC.Prim.Void#
             -> UniqSM ([RawCmmDecl], InfoTableContents)
        [LclId]
        fail_d19WA
          = \ (ds_d19WB [OS=OneShot] :: ghc-prim-0.6.1:GHC.Prim.Void#) ->
              panic
                @ (UniqSM ([RawCmmDecl], InfoTableContents))
                (ghc-prim-0.6.1:GHC.CString.unpackCString#
                   "mkInfoTableContents"#) } in
      case info_a19tV of wild_00
      { CmmInfoTable ds_d19Wv ds_d19Ww ds_d19Wx ds_d19Wy ds_d19Wz ->
      let {
        info_lbl_a19tW :: CLabel
        [LclId]
        info_lbl_a19tW = ds_d19Wv } in
      let {
        smrep_a19tX :: SMRep
        [LclId]
        smrep_a19tX = ds_d19Ww } in
      let {
        prof_a19tY :: ProfilingInfo
        [LclId]
        prof_a19tY = ds_d19Wx } in
      let {
        srt_a19tZ :: Maybe CLabel
        [LclId]
        srt_a19tZ = ds_d19Wy } in
      letrec {
        platform_a19u1 :: Platform
        [LclId]
        platform_a19u1 = targetPlatform dflags_a19tU; } in
      letrec {
        mk_pieces_a19u2
          :: ClosureTypeInfo
             -> [CmmLit]
             -> UniqSM (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])
        [LclId]
        mk_pieces_a19u2
          = \ (ds_d19WG :: ClosureTypeInfo) (_no_srt_a19u5 :: [CmmLit]) ->
              let {
                other_a19uq :: ClosureTypeInfo
                [LclId]
                other_a19uq = ds_d19WG } in
              let {
                fail_d19XP
                  :: ghc-prim-0.6.1:GHC.Prim.Void#
                     -> UniqSM (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])
                [LclId]
                fail_d19XP
                  = \ (ds_d19XQ [OS=OneShot] :: ghc-prim-0.6.1:GHC.Prim.Void#) ->
                      pprPanic
                        @ (UniqSM (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl]))
                        $dIP_a19J3
                        (ghc-prim-0.6.1:GHC.CString.unpackCString# "mk_pieces"#)
                        (ppr @ ClosureTypeInfo $dOutputable_a19J5 other_a19uq) } in
              case ds_d19WG of wild_00 {
                __DEFAULT -> fail_d19XP ghc-prim-0.6.1:GHC.Prim.void#;
                Constr con_tag_a19u3 con_descr_a19u4 ->
                  >>=
                    @ UniqSM
                    $dMonad_a19Hl
                    @ (CmmLit,
                       GenCmmDecl
                         RawCmmStatics
                         (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                         CmmGraph)
                    @ (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])
                    (newStringLit
                       @ (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                       @ CmmGraph
                       con_descr_a19u4)
                    (\ (ds_d19WP
                          :: (CmmLit,
                              GenCmmDecl
                                RawCmmStatics
                                (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                                CmmGraph)) ->
                       case ds_d19WP of wild_00 { (descr_lit_a19u6, decl_a19u7) ->
                       return
                         @ UniqSM
                         $dMonad_a19Hr
                         @ (Maybe CmmLit, Maybe CmmLit, [CmmLit],
                            [GenCmmDecl
                               RawCmmStatics
                               (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                               CmmGraph])
                         (GHC.Maybe.Just
                            @ CmmLit
                            (GHC.Cmm.Expr.$WCmmInt
                               (fromIntegral
                                  @ GHC.Types.Basic.ConTagZ
                                  @ Integer
                                  $dIntegral_a19HA
                                  $dNum_a19HB
                                  con_tag_a19u3)
                               (halfWordWidth platform_a19u1)),
                          GHC.Maybe.Nothing @ CmmLit,
                          GHC.Base.build
                            @ CmmLit
                            (\ (@ a_d19WM)
                               (c_d19WN :: CmmLit -> a_d19WM -> a_d19WM)
                               (n_d19WO :: a_d19WM) ->
                               c_d19WN descr_lit_a19u6 n_d19WO),
                          GHC.Base.build
                            @ (GenCmmDecl
                                 RawCmmStatics
                                 (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                                 CmmGraph)
                            (\ (@ a_d19WJ)
                               (c_d19WK
                                  :: GenCmmDecl
                                       RawCmmStatics
                                       (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                                       CmmGraph
                                     -> a_d19WJ -> a_d19WJ)
                               (n_d19WL :: a_d19WJ) ->
                               c_d19WK decl_a19u7 n_d19WL))
                       });
                Fun arity_a19ub ds_d19XO ->
                  let {
                    arity_a19uf :: GHC.Runtime.Heap.Layout.FunArity
                    [LclId]
                    arity_a19uf = arity_a19ub } in
                  case ds_d19XO of wild_00 {
                    __DEFAULT -> fail_d19XP ghc-prim-0.6.1:GHC.Prim.void#;
                    ArgSpec fun_type_a19uc ->
                      let {
                        srt_label_a19ud :: [CmmLit]
                        [LclId]
                        srt_label_a19ud = _no_srt_a19u5 } in
                      letrec {
                        extra_bits_a19ue :: [CmmLit]
                        [LclId]
                        extra_bits_a19ue
                          = ghc-prim-0.6.1:GHC.Types.:
                              @ CmmLit
                              (packIntsCLit platform_a19u1 fun_type_a19uc arity_a19ub)
                              srt_label_a19ud; } in
                      return
                        @ UniqSM
                        $dMonad_a19Ia
                        @ (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])
                        (GHC.Maybe.Nothing @ CmmLit, GHC.Maybe.Nothing @ CmmLit,
                         extra_bits_a19ue, ghc-prim-0.6.1:GHC.Types.[] @ RawCmmDecl);
                    ArgGen arg_bits_a19ug ->
                      let {
                        srt_label_a19uh :: [CmmLit]
                        [LclId]
                        srt_label_a19uh = _no_srt_a19u5 } in
                      letrec {
                        srt_lit_a19uj :: CmmLit
                        [LclId]
                        srt_lit_a19uj
                          = let {
                              ds_d19XR :: [CmmLit]
                              [LclId]
                              ds_d19XR = srt_label_a19uh } in
                            case ds_d19XR of wild_00 {
                              [] -> mkIntCLit platform_a19u1 (ghc-prim-0.6.1:GHC.Types.I# 0#);
                              : lit_a19uk _rest_a19ul ->
                                case &&
                                       debugIsOn
                                       (not (null @ [] $dFoldable_a19Iq @ CmmLit _rest_a19ul))
                                of wild_00 {
                                  False -> lit_a19uk;
                                  True ->
                                    assertPanic
                                      @ CmmLit
                                      (ghc-prim-0.6.1:GHC.CString.unpackCString#
                                         "E:\\\\ghc_inferTags\\\\compiler\\\\GHC\\\\Cmm\\\\Info.hs"#)
                                      (ghc-prim-0.6.1:GHC.Types.I# 262#)
                                }
                            }; } in
                      letrec {
                        slow_entry_a19ui :: CmmLit
                        [LclId]
                        slow_entry_a19ui
                          = GHC.Cmm.Expr.CmmLabel
                              (toSlowEntryLbl platform_a19u1 info_lbl_a19tW); } in
                      >>=
                        @ UniqSM
                        $dMonad_a19IB
                        @ (CmmLit, [RawCmmDecl])
                        @ (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])
                        (mkLivenessBits dflags_a19tU arg_bits_a19ug)
                        (\ (ds_d19Xp :: (CmmLit, [RawCmmDecl])) ->
                           case ds_d19Xp of wild_00
                           { (liveness_lit_a19um, liveness_data_a19un) ->
                           letrec {
                             fun_type_a19uo :: Int
                             [LclId]
                             fun_type_a19uo
                               = let {
                                   fail_d19Xn :: ghc-prim-0.6.1:GHC.Prim.Void# -> Int
                                   [LclId]
                                   fail_d19Xn
                                     = \ (ds_d19Xo [OS=OneShot] :: ghc-prim-0.6.1:GHC.Prim.Void#) ->
                                         aRG_GEN_BIG } in
                                 case null @ [] $dFoldable_a19IJ @ RawCmmDecl liveness_data_a19un
                                 of wild_00 {
                                   False -> fail_d19Xn ghc-prim-0.6.1:GHC.Prim.void#;
                                   True -> aRG_GEN
                                 }; } in
                           letrec {
                             extra_bits_a19up :: [CmmLit]
                             [LclId]
                             extra_bits_a19up
                               = ++
                                   @ CmmLit
                                   (GHC.Base.build
                                      @ CmmLit
                                      (\ (@ a_d19X8)
                                         (c_d19X9 :: CmmLit -> a_d19X8 -> a_d19X8)
                                         (n_d19Xa :: a_d19X8) ->
                                         c_d19X9
                                           (packIntsCLit platform_a19u1 fun_type_a19uo arity_a19uf)
                                           n_d19Xa))
                                   (++
                                      @ CmmLit
                                      (case inlineSRT platform_a19u1 of wild_00 {
                                         False ->
                                           GHC.Base.build
                                             @ CmmLit
                                             (\ (@ a_d19Xb)
                                                (c_d19Xc :: CmmLit -> a_d19Xb -> a_d19Xb)
                                                (n_d19Xd :: a_d19Xb) ->
                                                c_d19Xc srt_lit_a19uj n_d19Xd);
                                         True -> ghc-prim-0.6.1:GHC.Types.[] @ CmmLit
                                       })
                                      (GHC.Base.build
                                         @ CmmLit
                                         (\ (@ a_d19Xe)
                                            (c_d19Xf :: CmmLit -> a_d19Xe -> a_d19Xe)
                                            (n_d19Xg :: a_d19Xe) ->
                                            c_d19Xf
                                              liveness_lit_a19um
                                              (c_d19Xf slow_entry_a19ui n_d19Xg)))); } in
                           return
                             @ UniqSM
                             $dMonad_a19IU
                             @ (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])
                             (GHC.Maybe.Nothing @ CmmLit, GHC.Maybe.Nothing @ CmmLit,
                              extra_bits_a19up, liveness_data_a19un)
                           })
                  };
                Thunk ->
                  let {
                    srt_label_a19u8 :: [CmmLit]
                    [LclId]
                    srt_label_a19u8 = _no_srt_a19u5 } in
                  return
                    @ UniqSM
                    $dMonad_a19HG
                    @ (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])
                    (GHC.Maybe.Nothing @ CmmLit, GHC.Maybe.Nothing @ CmmLit,
                     srt_label_a19u8, ghc-prim-0.6.1:GHC.Types.[] @ RawCmmDecl);
                ThunkSelector offset_a19u9 ->
                  let {
                    _no_srt_a19ua :: [CmmLit]
                    [LclId]
                    _no_srt_a19ua = _no_srt_a19u5 } in
                  return
                    @ UniqSM
                    $dMonad_a19HQ
                    @ (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])
                    (GHC.Maybe.Just
                       @ CmmLit (GHC.Cmm.Expr.$WCmmInt 0 (halfWordWidth platform_a19u1)),
                     GHC.Maybe.Just
                       @ CmmLit
                       (mkWordCLit
                          platform_a19u1
                          (fromIntegral
                             @ GHC.Runtime.Heap.Layout.SelectorOffset
                             @ Integer
                             $dIntegral_a19I0
                             $dNum_a19I1
                             offset_a19u9)),
                     ghc-prim-0.6.1:GHC.Types.[] @ CmmLit,
                     ghc-prim-0.6.1:GHC.Types.[] @ RawCmmDecl)
              }; } in
      let {
        fail_d19WE
          :: ghc-prim-0.6.1:GHC.Prim.Void#
             -> UniqSM ([RawCmmDecl], InfoTableContents)
        [LclId]
        fail_d19WE
          = \ (ds_d19WF [OS=OneShot] :: ghc-prim-0.6.1:GHC.Prim.Void#) ->
              let {
                fail_d19WC
                  :: ghc-prim-0.6.1:GHC.Prim.Void#
                     -> UniqSM ([RawCmmDecl], InfoTableContents)
                [LclId]
                fail_d19WC
                  = \ (ds_d19WD [OS=OneShot] :: ghc-prim-0.6.1:GHC.Prim.Void#) ->
                      let {
                        ds_d19Uz :: SMRep
                        [LclId]
                        ds_d19Uz = smrep_a19tX } in
                      case ds_d19Uz of wild_00 {
                        __DEFAULT -> fail_d19WA ghc-prim-0.6.1:GHC.Prim.void#;
                        HeapRep ds_d19VG ptrs_a19uD nonptrs_a19uE closure_type_a19uF ->
                          letrec {
                            layout_a19uG :: CmmLit
                            [LclId]
                            layout_a19uG
                              = packIntsCLit platform_a19u1 ptrs_a19uD nonptrs_a19uE; } in
                          >>=
                            @ UniqSM
                            $dMonad_a19K9
                            @ ((CmmLit, CmmLit), [RawCmmDecl])
                            @ ([RawCmmDecl], InfoTableContents)
                            (mkProfLits platform_a19u1 prof_a19tY)
                            (\ (ds_d19UR :: ((CmmLit, CmmLit), [RawCmmDecl])) ->
                               case ds_d19UR of wild_00 { (prof_lits_a19uH, prof_data_a19uI) ->
                               letrec {
                                 ds_d19UI :: ([CmmLit], CmmLit)
                                 [LclId]
                                 ds_d19UI = mkSRTLit platform_a19u1 info_lbl_a19tW srt_a19tZ;
                                 srt_label_a19uJ :: [CmmLit]
                                 [LclId]
                                 srt_label_a19uJ
                                   = case ds_d19UI of wild_00
                                     { (srt_label_a19uJ, srt_bitmap_a19uK) ->
                                     srt_label_a19uJ
                                     };
                                 srt_bitmap_a19uK :: CmmLit
                                 [LclId]
                                 srt_bitmap_a19uK
                                   = case ds_d19UI of wild_00
                                     { (srt_label_a19uJ, srt_bitmap_a19uK) ->
                                     srt_bitmap_a19uK
                                     }; } in
                               >>=
                                 @ UniqSM
                                 $dMonad_a19Km
                                 @ (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])
                                 @ ([RawCmmDecl], InfoTableContents)
                                 (mk_pieces_a19u2 closure_type_a19uF srt_label_a19uJ)
                                 (\ (ds_d19UD
                                       :: (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])) ->
                                    case ds_d19UD of wild_00
                                    { (mb_srt_field_a19uL, mb_layout_a19uM, extra_bits_a19uN,
                                       ct_data_a19uO) ->
                                    letrec {
                                      std_info_a19uP :: [CmmLit]
                                      [LclId]
                                      std_info_a19uP
                                        = mkStdInfoTable
                                            dflags_a19tU
                                            prof_lits_a19uH
                                            (orElse
                                               @ Int mb_rts_tag_a19u0 (rtsClosureType smrep_a19tX))
                                            (orElse @ CmmLit mb_srt_field_a19uL srt_bitmap_a19uK)
                                            (orElse @ CmmLit mb_layout_a19uM layout_a19uG); } in
                                    return
                                      @ UniqSM
                                      $dMonad_a19Kx
                                      @ ([RawCmmDecl], ([CmmLit], [CmmLit]))
                                      (++ @ RawCmmDecl prof_data_a19uI ct_data_a19uO,
                                       (std_info_a19uP, extra_bits_a19uN))
                                    })
                               })
                      } } in
              let {
                ds_d19T0 :: SMRep
                [LclId]
                ds_d19T0 = smrep_a19tX } in
              case ds_d19T0 of wild_00 {
                __DEFAULT -> fail_d19WC ghc-prim-0.6.1:GHC.Prim.void#;
                StackRep frame_a19ut ->
                  >>=
                    @ UniqSM
                    $dMonad_a19Jo
                    @ ((CmmLit, CmmLit), [RawCmmDecl])
                    @ ([RawCmmDecl], InfoTableContents)
                    (mkProfLits platform_a19u1 prof_a19tY)
                    (\ (ds_d19TE :: ((CmmLit, CmmLit), [RawCmmDecl])) ->
                       case ds_d19TE of wild_00 { (prof_lits_a19uu, prof_data_a19uv) ->
                       letrec {
                         ds_d19Tv :: ([CmmLit], CmmLit)
                         [LclId]
                         ds_d19Tv = mkSRTLit platform_a19u1 info_lbl_a19tW srt_a19tZ;
                         srt_label_a19uw :: [CmmLit]
                         [LclId]
                         srt_label_a19uw
                           = case ds_d19Tv of wild_00 { (srt_label_a19uw, srt_bitmap_a19ux) ->
                             srt_label_a19uw
                             };
                         srt_bitmap_a19ux :: CmmLit
                         [LclId]
                         srt_bitmap_a19ux
                           = case ds_d19Tv of wild_00 { (srt_label_a19uw, srt_bitmap_a19ux) ->
                             srt_bitmap_a19ux
                             }; } in
                       >>=
                         @ UniqSM
                         $dMonad_a19JB
                         @ (CmmLit, [RawCmmDecl])
                         @ ([RawCmmDecl], InfoTableContents)
                         (mkLivenessBits dflags_a19tU frame_a19ut)
                         (\ (ds_d19Tq :: (CmmLit, [RawCmmDecl])) ->
                            case ds_d19Tq of wild_00
                            { (liveness_lit_a19uy, liveness_data_a19uz) ->
                            letrec {
                              rts_tag_a19uB :: Int
                              [LclId]
                              rts_tag_a19uB
                                = let {
                                    fail_d19To :: ghc-prim-0.6.1:GHC.Prim.Void# -> Int
                                    [LclId]
                                    fail_d19To
                                      = \ (ds_d19Tp [OS=OneShot]
                                             :: ghc-prim-0.6.1:GHC.Prim.Void#) ->
                                          let {
                                            fail_d19Tm :: ghc-prim-0.6.1:GHC.Prim.Void# -> Int
                                            [LclId]
                                            fail_d19Tm
                                              = \ (ds_d19Tn [OS=OneShot]
                                                     :: ghc-prim-0.6.1:GHC.Prim.Void#) ->
                                                  rET_BIG } in
                                          case null
                                                 @ []
                                                 $dFoldable_a19JL
                                                 @ RawCmmDecl
                                                 liveness_data_a19uz
                                          of wild_00 {
                                            False -> fail_d19Tm ghc-prim-0.6.1:GHC.Prim.void#;
                                            True -> rET_SMALL
                                          } } in
                                  let {
                                    ds_d19T3 :: Maybe Int
                                    [LclId]
                                    ds_d19T3 = mb_rts_tag_a19u0 } in
                                  case ds_d19T3 of wild_00 {
                                    __DEFAULT -> fail_d19To ghc-prim-0.6.1:GHC.Prim.void#;
                                    Just tag_a19uC -> tag_a19uC
                                  }; } in
                            letrec {
                              std_info_a19uA :: [CmmLit]
                              [LclId]
                              std_info_a19uA
                                = mkStdInfoTable
                                    dflags_a19tU
                                    prof_lits_a19uu
                                    rts_tag_a19uB
                                    srt_bitmap_a19ux
                                    liveness_lit_a19uy; } in
                            return
                              @ UniqSM
                              $dMonad_a19JT
                              @ ([RawCmmDecl], ([CmmLit], [CmmLit]))
                              (++ @ RawCmmDecl prof_data_a19uv liveness_data_a19uz,
                               (std_info_a19uA, srt_label_a19uw))
                            })
                       })
              } } in
      let {
        ds_d19RV :: SMRep
        [LclId]
        ds_d19RV = smrep_a19tX } in
      case ds_d19RV of wild_00 {
        __DEFAULT -> fail_d19WE ghc-prim-0.6.1:GHC.Prim.void#;
        RTSRep rts_tag_a19ur rep_a19us ->
          mkInfoTableContents
            dflags_a19tU
            (let {
               ds_d19RY :: SMRep
               [LclId]
               ds_d19RY = rep_a19us } in
             let {
               ds_d19S4 :: CmmInfoTable
               [LclId]
               ds_d19S4 = info_a19tV } in
             case ds_d19S4 of wild_00
             { CmmInfoTable ds_d19RZ ds_d19S0 ds_d19S1 ds_d19S2 ds_d19S3 ->
             GHC.Cmm.CmmInfoTable ds_d19RZ ds_d19RY ds_d19S1 ds_d19S2 ds_d19S3
             })
            (GHC.Maybe.Just @ Int rts_tag_a19ur)
      }
      }

-- RHS size: {terms: 196, types: 354, coercions: 12, joins: 0/12}
mkInfoTable :: DynFlags -> CmmDeclSRTs -> UniqSM [RawCmmDecl]
[LclIdX]
mkInfoTable
  = \ (ds_d19Y2 :: DynFlags)
      (ds_d19Y3 :: GenCmmDecl RawCmmStatics CmmTopInfo CmmGraph) ->
      let {
        dflags_a19tv :: DynFlags
        [LclId]
        dflags_a19tv = ds_d19Y2 } in
      let {
        proc_a19tw :: CmmDeclSRTs
        [LclId]
        proc_a19tw = ds_d19Y3 } in
      case ds_d19Y3 of wild_00 {
        CmmProc infos_a19tx entry_lbl_a19ty live_a19tz blocks_a19tA ->
          letrec {
            platform_a19tB :: Platform
            [LclId]
            platform_a19tB = targetPlatform dflags_a19tv; } in
          letrec {
            do_one_info_a19tC
              :: (GHC.Cmm.Dataflow.Label.Label, CmmInfoTable)
                 -> UniqSM
                      ([RawCmmDecl], (GHC.Cmm.Dataflow.Label.Label, GenCmmStatics 'True))
            [LclId]
            do_one_info_a19tC
              = \ (ds_d19Zm :: (GHC.Cmm.Dataflow.Label.Label, CmmInfoTable)) ->
                  case ds_d19Zm of wild_00 { (lbl_a19tD, itbl_a19tE) ->
                  >>=
                    @ UniqSM
                    $dMonad_a19L1
                    @ ([RawCmmDecl], InfoTableContents)
                    @ ([RawCmmDecl],
                       (GHC.Cmm.Dataflow.Label.Label, GenCmmStatics 'True))
                    (mkInfoTableContents
                       dflags_a19tv itbl_a19tE (GHC.Maybe.Nothing @ Int))
                    (\ (ds_d19Zp :: ([RawCmmDecl], InfoTableContents)) ->
                       case ds_d19Zp of wild_00 { (top_decls_a19tF, ds_d19Zz) ->
                       case ds_d19Zz of wild_00 { (std_info_a19tG, extra_bits_a19tH) ->
                       letrec {
                         info_lbl_a19tI :: CLabel
                         [LclId]
                         info_lbl_a19tI = cit_lbl itbl_a19tE; } in
                       letrec {
                         rel_std_info_a19tJ :: [CmmLit]
                         [LclId]
                         rel_std_info_a19tJ
                           = map
                               @ CmmLit
                               @ CmmLit
                               (makeRelativeRefTo platform_a19tB info_lbl_a19tI)
                               std_info_a19tG; } in
                       letrec {
                         rel_extra_bits_a19tK :: [CmmLit]
                         [LclId]
                         rel_extra_bits_a19tK
                           = map
                               @ CmmLit
                               @ CmmLit
                               (makeRelativeRefTo platform_a19tB info_lbl_a19tI)
                               extra_bits_a19tH; } in
                       return
                         @ UniqSM
                         $dMonad_a19Ln
                         @ ([RawCmmDecl],
                            (GHC.Cmm.Dataflow.Label.Label, GenCmmStatics 'True))
                         (top_decls_a19tF,
                          (lbl_a19tD,
                           $ @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
                             @ [CmmStatic]
                             @ (GenCmmStatics 'True)
                             (GHC.Cmm.CmmStaticsRaw @ 'True info_lbl_a19tI)
                             ($ @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
                                @ [CmmLit]
                                @ [CmmStatic]
                                (map @ CmmLit @ CmmStatic GHC.Cmm.CmmStaticLit)
                                (++
                                   @ CmmLit
                                   (reverse @ CmmLit rel_extra_bits_a19tK)
                                   rel_std_info_a19tJ))))
                       }
                       })
                  }; } in
          let {
            fail_d19Zk :: ghc-prim-0.6.1:GHC.Prim.Void# -> UniqSM [RawCmmDecl]
            [LclId]
            fail_d19Zk
              = \ (ds_d19Zl [OS=OneShot] :: ghc-prim-0.6.1:GHC.Prim.Void#) ->
                  >>=
                    @ UniqSM
                    $dMonad_a19Mv
                    @ ([[RawCmmDecl]],
                       [(GHC.Cmm.Dataflow.Label.Label, GenCmmStatics 'True)])
                    @ [RawCmmDecl]
                    (fmap
                       @ UniqSM
                       $dFunctor_a19Mz
                       @ [([RawCmmDecl],
                           (GHC.Cmm.Dataflow.Label.Label, GenCmmStatics 'True))]
                       @ ([[RawCmmDecl]],
                          [(GHC.Cmm.Dataflow.Label.Label, GenCmmStatics 'True)])
                       (unzip
                          @ [RawCmmDecl]
                          @ (GHC.Cmm.Dataflow.Label.Label, GenCmmStatics 'True))
                       (mapM
                          @ []
                          $dTraversable_a19MF
                          @ UniqSM
                          @ (GHC.Cmm.Dataflow.Label.Label, CmmInfoTable)
                          @ ([RawCmmDecl],
                             (GHC.Cmm.Dataflow.Label.Label, GenCmmStatics 'True))
                          $dMonad_a19MJ
                          do_one_info_a19tC
                          ((mapToList
                              @ GHC.Cmm.Dataflow.Label.LabelMap
                              $dIsMap_a19MM
                              @ CmmInfoTable
                              (info_tbls infos_a19tx))
                           `cast` (([((,)
                                        (Sub (GHC.Cmm.Dataflow.Label.D:R:KeyOfLabelMap[0]))
                                        <CmmInfoTable>_R)_R])_R
                                   :: [(KeyOf GHC.Cmm.Dataflow.Label.LabelMap, CmmInfoTable)]
                                      ~R# [(GHC.Cmm.Dataflow.Label.Label, CmmInfoTable)]))))
                    (\ (ds_d19Z1
                          :: ([[RawCmmDecl]],
                              [(GHC.Cmm.Dataflow.Label.Label, GenCmmStatics 'True)])) ->
                       case ds_d19Z1 of wild_00 { (top_declss_a19tS, raw_infos_a19tT) ->
                       return
                         @ UniqSM
                         $dMonad_a19MQ
                         @ [RawCmmDecl]
                         (++
                            @ RawCmmDecl
                            (concat @ [] @ RawCmmDecl $dFoldable_a19MV top_declss_a19tS)
                            (GHC.Base.build
                               @ RawCmmDecl
                               (\ (@ a_d19YY)
                                  (c_d19YZ :: RawCmmDecl -> a_d19YY -> a_d19YY)
                                  (n_d19Z0 :: a_d19YY) ->
                                  c_d19YZ
                                    (GHC.Cmm.CmmProc
                                       @ RawCmmStatics
                                       @ (GHC.Cmm.Dataflow.Label.LabelMap (GenCmmStatics 'True))
                                       @ CmmGraph
                                       (mapFromList
                                          @ GHC.Cmm.Dataflow.Label.LabelMap
                                          $dIsMap_a19N1
                                          @ (GenCmmStatics 'True)
                                          (raw_infos_a19tT
                                           `cast` (([((,)
                                                        (Sub (Sym (GHC.Cmm.Dataflow.Label.D:R:KeyOfLabelMap[0])))
                                                        <GenCmmStatics 'True>_R)_R])_R
                                                   :: [(GHC.Cmm.Dataflow.Label.Label,
                                                        GenCmmStatics 'True)]
                                                      ~R# [(KeyOf GHC.Cmm.Dataflow.Label.LabelMap,
                                                            GenCmmStatics 'True)])))
                                       entry_lbl_a19ty
                                       live_a19tz
                                       blocks_a19tA)
                                    n_d19Z0)))
                       }) } in
          case not (platformTablesNextToCode (targetPlatform dflags_a19tv))
          of wild_00 {
            False -> fail_d19Zk ghc-prim-0.6.1:GHC.Prim.void#;
            True ->
              let {
                ds_d19Yb :: Maybe CmmInfoTable
                [LclId]
                ds_d19Yb = topInfoTable @ RawCmmStatics @ CmmNode proc_a19tw } in
              case ds_d19Yb of wild_00 {
                Nothing ->
                  return
                    @ UniqSM
                    $dMonad_a19LK
                    @ [GenCmmDecl
                         RawCmmStatics
                         (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                         CmmGraph]
                    (GHC.Base.build
                       @ (GenCmmDecl
                            RawCmmStatics
                            (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                            CmmGraph)
                       (\ (@ a_d19Yf)
                          (c_d19Yg
                             :: GenCmmDecl
                                  RawCmmStatics
                                  (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                                  CmmGraph
                                -> a_d19Yf -> a_d19Yf)
                          (n_d19Yh :: a_d19Yf) ->
                          c_d19Yg
                            (GHC.Cmm.CmmProc
                               @ RawCmmStatics
                               @ (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                               @ CmmGraph
                               (mapEmpty
                                  @ GHC.Cmm.Dataflow.Label.LabelMap $dIsMap_a19LS @ RawCmmStatics)
                               entry_lbl_a19ty
                               live_a19tz
                               blocks_a19tA)
                            n_d19Yh));
                Just info_a19tL ->
                  case info_a19tL of wild_00
                  { CmmInfoTable ds_d19YT ds_d19YU ds_d19YV ds_d19YW ds_d19YX ->
                  let {
                    info_lbl_a19tM :: CLabel
                    [LclId]
                    info_lbl_a19tM = ds_d19YT } in
                  >>=
                    @ UniqSM
                    $dMonad_a19LX
                    @ ([RawCmmDecl], InfoTableContents)
                    @ [RawCmmDecl]
                    (mkInfoTableContents
                       dflags_a19tv info_a19tL (GHC.Maybe.Nothing @ Int))
                    (\ (ds_d19Yu :: ([RawCmmDecl], InfoTableContents)) ->
                       case ds_d19Yu of wild_00 { (top_decls_a19tN, ds_d19YE) ->
                       case ds_d19YE of wild_00 { (std_info_a19tO, extra_bits_a19tP) ->
                       letrec {
                         rel_extra_bits_a19tR :: [CmmLit]
                         [LclId]
                         rel_extra_bits_a19tR
                           = map
                               @ CmmLit
                               @ CmmLit
                               (makeRelativeRefTo platform_a19tB info_lbl_a19tM)
                               extra_bits_a19tP; } in
                       letrec {
                         rel_std_info_a19tQ :: [CmmLit]
                         [LclId]
                         rel_std_info_a19tQ
                           = map
                               @ CmmLit
                               @ CmmLit
                               (makeRelativeRefTo platform_a19tB info_lbl_a19tM)
                               std_info_a19tO; } in
                       return
                         @ UniqSM
                         $dMonad_a19Me
                         @ [RawCmmDecl]
                         (++
                            @ RawCmmDecl
                            top_decls_a19tN
                            (GHC.Base.build
                               @ RawCmmDecl
                               (\ (@ a_d19Yr)
                                  (c_d19Ys :: RawCmmDecl -> a_d19Yr -> a_d19Yr)
                                  (n_d19Yt :: a_d19Yr) ->
                                  c_d19Ys
                                    (GHC.Cmm.CmmProc
                                       @ RawCmmStatics
                                       @ (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                                       @ CmmGraph
                                       (mapEmpty
                                          @ GHC.Cmm.Dataflow.Label.LabelMap
                                          $dIsMap_a19Ml
                                          @ RawCmmStatics)
                                       entry_lbl_a19ty
                                       live_a19tz
                                       blocks_a19tA)
                                    (c_d19Ys
                                       (mkRODataLits
                                          @ 'True
                                          @ (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                                          @ CmmGraph
                                          info_lbl_a19tM
                                          (ghc-prim-0.6.1:GHC.Types.:
                                             @ CmmLit
                                             (GHC.Cmm.Expr.CmmLabel entry_lbl_a19ty)
                                             (++ @ CmmLit rel_std_info_a19tQ rel_extra_bits_a19tR)))
                                       n_d19Yt))))
                       }
                       })
                  }
              }
          };
        CmmData sec_a19tt dat_a19tu ->
          return
            @ UniqSM
            $dMonad_a19KH
            @ [GenCmmDecl
                 RawCmmStatics
                 (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                 CmmGraph]
            (GHC.Base.build
               @ (GenCmmDecl
                    RawCmmStatics
                    (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                    CmmGraph)
               (\ (@ a_d19Y6)
                  (c_d19Y7
                     :: GenCmmDecl
                          RawCmmStatics
                          (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                          CmmGraph
                        -> a_d19Y6 -> a_d19Y6)
                  (n_d19Y8 :: a_d19Y6) ->
                  c_d19Y7
                    (GHC.Cmm.CmmData
                       @ RawCmmStatics
                       @ (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                       @ CmmGraph
                       sec_a19tt
                       dat_a19tu)
                    n_d19Y8))
      }

-- RHS size: {terms: 91, types: 171, coercions: 0, joins: 0/13}
cmmToRawCmm
  :: forall a.
     DynFlags
     -> Stream IO CmmGroupSRTs a -> IO (Stream IO RawCmmGroup a)
[LclIdX]
cmmToRawCmm
  = \ (@ a_a19N4) ->
      let {
        $dMonad_a19Ob :: Monad UniqSM
        [LclId]
        $dMonad_a19Ob = $dMonad_a19EH } in
      let {
        $dFoldable_a19O1 :: Foldable []
        [LclId]
        $dFoldable_a19O1 = $dFoldable_a19FF } in
      let {
        $dMonadIO_a19NX :: MonadIO IO
        [LclId]
        $dMonadIO_a19NX = Control.Monad.IO.Class.$fMonadIOIO } in
      let {
        $dMonad_a19NG :: Monad IO
        [LclId]
        $dMonad_a19NG = GHC.Base.$fMonadIO } in
      let {
        $dMonad_a19Oe :: Monad IO
        [LclId]
        $dMonad_a19Oe = $dMonad_a19NG } in
      let {
        $dMonad_a19Oj :: Monad IO
        [LclId]
        $dMonad_a19Oj = $dMonad_a19NG } in
      let {
        $dFunctor_a19Oo :: Functor (Stream IO [RawCmmDecl])
        [LclId]
        $dFunctor_a19Oo
          = GHC.Data.Stream.$fFunctorStream
              @ IO @ [RawCmmDecl] $dMonad_a19NG } in
      let {
        $dMonad_a19OB :: Monad IO
        [LclId]
        $dMonad_a19OB = $dMonad_a19NG } in
      \ (dflags_a19tg :: DynFlags)
        (cmms_a19th :: Stream IO CmmGroupSRTs a_a19N4) ->
        letrec {
          forceRes_a19ti
            :: forall (t :: * -> *) a a. Foldable t => (a, t a) -> ()
          [LclId]
          forceRes_a19ti
            = \ (@ (t_a19Ng :: * -> *))
                (@ a_a19Ne)
                (@ a_a19Nl)
                ($dFoldable_a19Nr :: Foldable t_a19Ng) ->
                let {
                  $dFoldable_a19Nh :: Foldable t_a19Ng
                  [LclId]
                  $dFoldable_a19Nh = $dFoldable_a19Nr } in
                letrec {
                  forceRes_a19Np :: (a_a19Ne, t_a19Ng a_a19Nl) -> ()
                  [LclId]
                  forceRes_a19Np
                    = \ (ds_d19ZP :: (a_a19Ne, t_a19Ng a_a19Nl)) ->
                        case ds_d19ZP of wild_00 { (uniqs_a19tj, rawcmms_a19tk) ->
                        case uniqs_a19tj of uniqs_a19tj { __DEFAULT ->
                        foldr
                          @ t_a19Ng
                          $dFoldable_a19Nh
                          @ a_a19Nl
                          @ ()
                          (\ (decl_a19tl :: a_a19Nl) (r_a19tm :: ()) ->
                             case decl_a19tl of decl_a19tl { __DEFAULT -> r_a19tm })
                          ghc-prim-0.6.1:GHC.Tuple.()
                          rawcmms_a19tk
                        }
                        }; } in
                forceRes_a19Np; } in
        >>=
          @ IO
          $dMonad_a19NG
          @ UniqSupply
          @ (Stream IO RawCmmGroup a_a19N4)
          (mkSplitUniqSupply (ghc-prim-0.6.1:GHC.Types.C# 'i'#))
          (\ (uniqs_a19tn :: UniqSupply) ->
             letrec {
               do_one_a19to
                 :: UniqSupply -> [CmmDeclSRTs] -> IO (UniqSupply, [RawCmmDecl])
               [LclId]
               do_one_a19to
                 = \ (uniqs_a19tp :: UniqSupply) (cmm_a19tq :: [CmmDeclSRTs]) ->
                     $ @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
                       @ (IO (UniqSupply, [RawCmmDecl]))
                       @ (IO (UniqSupply, [RawCmmDecl]))
                       (withTimingSilent
                          @ IO
                          @ (UniqSupply, [RawCmmDecl])
                          $dMonadIO_a19NX
                          dflags_a19tg
                          (text
                             (ghc-prim-0.6.1:GHC.CString.unpackCString# "Cmm -> Raw Cmm"#))
                          (forceRes_a19ti @ [] @ UniqSupply @ RawCmmDecl $dFoldable_a19O1))
                       (let {
                          ds_d19ZE :: ([RawCmmDecl], UniqSupply)
                          [LclId]
                          ds_d19ZE
                            = $ @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
                                @ (UniqSM [RawCmmDecl])
                                @ ([RawCmmDecl], UniqSupply)
                                (initUs @ [RawCmmDecl] uniqs_a19tp)
                                (concatMapM
                                   @ UniqSM
                                   @ CmmDeclSRTs
                                   @ RawCmmDecl
                                   $dMonad_a19Ob
                                   (mkInfoTable dflags_a19tg)
                                   cmm_a19tq) } in
                        case ds_d19ZE of wild_00 { (b_a19tr, uniqs'_a19ts) ->
                        return
                          @ IO
                          $dMonad_a19Oe
                          @ (UniqSupply, [RawCmmDecl])
                          (uniqs'_a19ts, b_a19tr)
                        }); } in
             return
               @ IO
               $dMonad_a19Oj
               @ (Stream IO [RawCmmDecl] a_a19N4)
               (<$>
                  @ (Stream IO [RawCmmDecl])
                  @ (UniqSupply, a_a19N4)
                  @ a_a19N4
                  $dFunctor_a19Oo
                  (snd @ UniqSupply @ a_a19N4)
                  (Stream.mapAccumL_
                     @ IO
                     @ UniqSupply
                     @ [CmmDeclSRTs]
                     @ [RawCmmDecl]
                     @ a_a19N4
                     $dMonad_a19OB
                     do_one_a19to
                     uniqs_a19tn
                     cmms_a19th)))

-- RHS size: {terms: 8, types: 6, coercions: 0, joins: 0/0}
mkEmptyContInfoTable :: CLabel -> CmmInfoTable
[LclIdX]
mkEmptyContInfoTable
  = \ (info_lbl_a19tf :: CLabel) ->
      GHC.Cmm.CmmInfoTable
        info_lbl_a19tf
        (mkStackRep (ghc-prim-0.6.1:GHC.Types.[] @ Bool))
        GHC.Cmm.NoProfilingInfo
        (GHC.Maybe.Nothing @ CLabel)
        (GHC.Maybe.Nothing
           @ (GHC.Types.Var.Id, GHC.Types.CostCentre.CostCentreStack))

-- RHS size: {terms: 7, types: 5, coercions: 0, joins: 0/1}
po_profile :: PtrOpts -> Profile
[LclIdX[[RecSel]]]
po_profile
  = \ (ds_d19ZW :: PtrOpts) ->
      case ds_d19ZW of wild_00 { PtrOpts ds_d19ZX ds_d19ZY ->
      let {
        po_profile_B1 :: Profile
        [LclId]
        po_profile_B1 = ds_d19ZX } in
      po_profile_B1
      }

-- RHS size: {terms: 7, types: 5, coercions: 0, joins: 0/1}
po_align_check :: PtrOpts -> Bool
[LclIdX[[RecSel]]]
po_align_check
  = \ (ds_d19ZZ :: PtrOpts) ->
      case ds_d19ZZ of wild_00 { PtrOpts ds_d1a00 ds_d1a01 ->
      let {
        po_align_check_B1 :: Bool
        [LclId]
        po_align_check_B1 = ds_d1a01 } in
      po_align_check_B1
      }
end Rec }



==================== Desugar (before optimization) ====================
2020-11-24 12:44:28.6638895 UTC

Result size of Desugar (before optimization)
  = {terms: 1,698, types: 1,967, coercions: 23, joins: 0/116}

Rec {
-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a5jPF :: Num ByteOff
[LclId]
$dNum_a5jPF = $dNum_a5jNA

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a5jOH :: Num WordOff
[LclId]
$dNum_a5jOH = $dNum_a5jNA

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a5jOD :: Num WordOff
[LclId]
$dNum_a5jOD = $dNum_a5jNA

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a5jOB :: Num ByteOff
[LclId]
$dNum_a5jOB = $dNum_a5jNA

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a5jOx :: Num ByteOff
[LclId]
$dNum_a5jOx = $dNum_a5jNA

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a5jOq :: Num ByteOff
[LclId]
$dNum_a5jOq = $dNum_a5jNA

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a5jOn :: Num Int
[LclId]
$dNum_a5jOn = $dNum_a5jNA

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a5jOj :: Num Int
[LclId]
$dNum_a5jOj = $dNum_a5jNA

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a5jOh :: Num ByteOff
[LclId]
$dNum_a5jOh = $dNum_a5jNA

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a5jOf :: Num ByteOff
[LclId]
$dNum_a5jOf = $dNum_a5jNA

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a5jOc :: Num Int
[LclId]
$dNum_a5jOc = $dNum_a5jNA

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a5jO8 :: Num Int
[LclId]
$dNum_a5jO8 = $dNum_a5jNA

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a5jO6 :: Num ByteOff
[LclId]
$dNum_a5jO6 = $dNum_a5jNA

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a5jO3 :: Num ByteOff
[LclId]
$dNum_a5jO3 = $dNum_a5jNA

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a5jO0 :: Num ByteOff
[LclId]
$dNum_a5jO0 = $dNum_a5jNA

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a5jNX :: Num WordOff
[LclId]
$dNum_a5jNX = $dNum_a5jNA

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a5jNU :: Num WordOff
[LclId]
$dNum_a5jNU = $dNum_a5jNA

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a5jNQ :: Num WordOff
[LclId]
$dNum_a5jNQ = $dNum_a5jNA

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a5jNN :: Num WordOff
[LclId]
$dNum_a5jNN = $dNum_a5jNA

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a5jNJ :: Num WordOff
[LclId]
$dNum_a5jNJ = $dNum_a5jNA

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a5jNG :: Num WordOff
[LclId]
$dNum_a5jNG = $dNum_a5jNA

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a5jNC :: Num WordOff
[LclId]
$dNum_a5jNC = $dNum_a5jNA

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a5jNA :: Num WordOff
[LclId]
$dNum_a5jNA = GHC.Num.$fNumInt

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dIntegral_a5jTZ :: Integral GHC.Runtime.Heap.Layout.SelectorOffset
[LclId]
$dIntegral_a5jTZ = $dIntegral_a5jPb

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dIntegral_a5jTz :: Integral GHC.Types.Basic.ConTagZ
[LclId]
$dIntegral_a5jTz = $dIntegral_a5jPb

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dIntegral_a5jT1 :: Integral Int
[LclId]
$dIntegral_a5jT1 = $dIntegral_a5jPb

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dIntegral_a5jSX :: Integral Int
[LclId]
$dIntegral_a5jSX = $dIntegral_a5jPb

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dIntegral_a5jSc :: Integral Int
[LclId]
$dIntegral_a5jSc = $dIntegral_a5jPb

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dIntegral_a5jS1 :: Integral Int
[LclId]
$dIntegral_a5jS1 = $dIntegral_a5jPb

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dIntegral_a5jRr :: Integral Int
[LclId]
$dIntegral_a5jRr = $dIntegral_a5jPb

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dIntegral_a5jPb :: Integral Int
[LclId]
$dIntegral_a5jPb = GHC.Real.$fIntegralInt

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a5jU0 :: Num Integer
[LclId]
$dNum_a5jU0 = $dNum_a5jQh

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a5jTA :: Num Integer
[LclId]
$dNum_a5jTA = $dNum_a5jQh

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a5jT2 :: Num Integer
[LclId]
$dNum_a5jT2 = $dNum_a5jQh

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a5jSY :: Num Integer
[LclId]
$dNum_a5jSY = $dNum_a5jQh

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a5jSd :: Num Integer
[LclId]
$dNum_a5jSd = $dNum_a5jQh

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a5jS2 :: Num Integer
[LclId]
$dNum_a5jS2 = $dNum_a5jQh

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a5jRs :: Num Integer
[LclId]
$dNum_a5jRs = $dNum_a5jQh

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a5jQl :: Num Integer
[LclId]
$dNum_a5jQl = $dNum_a5jQh

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dNum_a5jQh :: Num Integer
[LclId]
$dNum_a5jQh = GHC.Num.$fNumInteger

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a5jYQ :: Monad UniqSM
[LclId]
$dMonad_a5jYQ = $dMonad_a5jQG

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a5jYJ :: Monad UniqSM
[LclId]
$dMonad_a5jYJ = $dMonad_a5jQG

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a5jYv :: Monad UniqSM
[LclId]
$dMonad_a5jYv = $dMonad_a5jQG

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a5jYe :: Monad UniqSM
[LclId]
$dMonad_a5jYe = $dMonad_a5jQG

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a5jXX :: Monad UniqSM
[LclId]
$dMonad_a5jXX = $dMonad_a5jQG

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a5jXK :: Monad UniqSM
[LclId]
$dMonad_a5jXK = $dMonad_a5jQG

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a5jXn :: Monad UniqSM
[LclId]
$dMonad_a5jXn = $dMonad_a5jQG

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a5jX1 :: Monad UniqSM
[LclId]
$dMonad_a5jX1 = $dMonad_a5jQG

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a5jWH :: Monad UniqSM
[LclId]
$dMonad_a5jWH = $dMonad_a5jQG

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a5jWx :: Monad UniqSM
[LclId]
$dMonad_a5jWx = $dMonad_a5jQG

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a5jWm :: Monad UniqSM
[LclId]
$dMonad_a5jWm = $dMonad_a5jQG

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a5jW9 :: Monad UniqSM
[LclId]
$dMonad_a5jW9 = $dMonad_a5jQG

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a5jVT :: Monad UniqSM
[LclId]
$dMonad_a5jVT = $dMonad_a5jQG

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a5jVB :: Monad UniqSM
[LclId]
$dMonad_a5jVB = $dMonad_a5jQG

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a5jVo :: Monad UniqSM
[LclId]
$dMonad_a5jVo = $dMonad_a5jQG

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a5jUU :: Monad UniqSM
[LclId]
$dMonad_a5jUU = $dMonad_a5jQG

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a5jUB :: Monad UniqSM
[LclId]
$dMonad_a5jUB = $dMonad_a5jQG

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a5jUa :: Monad UniqSM
[LclId]
$dMonad_a5jUa = $dMonad_a5jQG

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a5jTP :: Monad UniqSM
[LclId]
$dMonad_a5jTP = $dMonad_a5jQG

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a5jTF :: Monad UniqSM
[LclId]
$dMonad_a5jTF = $dMonad_a5jQG

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a5jTq :: Monad UniqSM
[LclId]
$dMonad_a5jTq = $dMonad_a5jQG

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a5jTk :: Monad UniqSM
[LclId]
$dMonad_a5jTk = $dMonad_a5jQG

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a5jSG :: Monad UniqSM
[LclId]
$dMonad_a5jSG = $dMonad_a5jQG

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a5jSx :: Monad UniqSM
[LclId]
$dMonad_a5jSx = $dMonad_a5jQG

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a5jSn :: Monad UniqSM
[LclId]
$dMonad_a5jSn = $dMonad_a5jQG

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a5jR4 :: Monad UniqSM
[LclId]
$dMonad_a5jR4 = $dMonad_a5jQG

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a5jQY :: Monad UniqSM
[LclId]
$dMonad_a5jQY = $dMonad_a5jQG

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a5jQQ :: Monad UniqSM
[LclId]
$dMonad_a5jQQ = $dMonad_a5jQG

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonad_a5jQG :: Monad UniqSM
[LclId]
$dMonad_a5jQG = GHC.Types.Unique.Supply.$fMonadUniqSM

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dFoldable_a5jYV :: Foldable []
[LclId]
$dFoldable_a5jYV = $dFoldable_a5jRE

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dFoldable_a5jVL :: Foldable []
[LclId]
$dFoldable_a5jVL = $dFoldable_a5jRE

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dFoldable_a5jUJ :: Foldable []
[LclId]
$dFoldable_a5jUJ = $dFoldable_a5jRE

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dFoldable_a5jUq :: Foldable []
[LclId]
$dFoldable_a5jUq = $dFoldable_a5jRE

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dFoldable_a5jRE :: Foldable []
[LclId]
$dFoldable_a5jRE = Data.Foldable.$fFoldable[]

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dBits_a5jS4 :: Bits StgWord
[LclId]
$dBits_a5jS4 = $dBits_a5jRY

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dBits_a5jRY :: Bits StgWord
[LclId]
$dBits_a5jRY = GHC.Runtime.Heap.Layout.$fBitsStgWord

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dOrd_a5jSj :: Ord Int
[LclId]
$dOrd_a5jSj = ghc-prim-0.6.1:GHC.Classes.$fOrdInt

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dMonadUnique_a5jSr :: MonadUnique UniqSM
[LclId]
$dMonadUnique_a5jSr = GHC.Types.Unique.Supply.$fMonadUniqueUniqSM

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dEq_a5jSQ :: Eq Arch
[LclId]
$dEq_a5jSQ = GHC.Platform.ArchOS.$fEqArch

-- RHS size: {terms: 20, types: 3, coercions: 7, joins: 0/0}
$dIP_a5jV3 :: HasCallStack
[LclId]
$dIP_a5jV3
  = (GHC.Stack.Types.pushCallStack
       (ghc-prim-0.6.1:GHC.CString.unpackCString# "pprPanic"#,
        GHC.Stack.Types.SrcLoc
          (ghc-prim-0.6.1:GHC.CString.unpackCString# "ghc"#)
          (ghc-prim-0.6.1:GHC.CString.unpackCString# "GHC.Cmm.Info"#)
          (ghc-prim-0.6.1:GHC.CString.unpackCString#
             "E:\\\\ghc_inferTags\\\\compiler\\\\GHC\\\\Cmm\\\\Info.hs"#)
          (ghc-prim-0.6.1:GHC.Types.I# 264#)
          (ghc-prim-0.6.1:GHC.Types.I# 25#)
          (ghc-prim-0.6.1:GHC.Types.I# 264#)
          (ghc-prim-0.6.1:GHC.Types.I# 57#))
       ($dIP_a5k0J
        `cast` (ghc-prim-0.6.1:GHC.Classes.N:IP[0]
                    <"callStack">_N <GHC.Stack.Types.CallStack>_N
                :: (?callStack::GHC.Stack.Types.CallStack)
                   ~R# GHC.Stack.Types.CallStack)))
    `cast` (Sym (ghc-prim-0.6.1:GHC.Classes.N:IP[0]
                     <"callStack">_N <GHC.Stack.Types.CallStack>_N)
            :: GHC.Stack.Types.CallStack
               ~R# (?callStack::GHC.Stack.Types.CallStack))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dOutputable_a5jV5 :: Outputable ClosureTypeInfo
[LclId]
$dOutputable_a5jV5
  = GHC.Runtime.Heap.Layout.$fOutputableClosureTypeInfo

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dIsMap_a5jZ1 :: IsMap GHC.Cmm.Dataflow.Label.LabelMap
[LclId]
$dIsMap_a5jZ1 = $dIsMap_a5jXS

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dIsMap_a5jYM :: IsMap GHC.Cmm.Dataflow.Label.LabelMap
[LclId]
$dIsMap_a5jYM = $dIsMap_a5jXS

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dIsMap_a5jYl :: IsMap GHC.Cmm.Dataflow.Label.LabelMap
[LclId]
$dIsMap_a5jYl = $dIsMap_a5jXS

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dIsMap_a5jXS :: IsMap GHC.Cmm.Dataflow.Label.LabelMap
[LclId]
$dIsMap_a5jXS = GHC.Cmm.Dataflow.Label.$fIsMapLabelMap

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dFunctor_a5jYz :: Functor UniqSM
[LclId]
$dFunctor_a5jYz = GHC.Types.Unique.Supply.$fFunctorUniqSM

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dTraversable_a5jYF :: Traversable []
[LclId]
$dTraversable_a5jYF = Data.Traversable.$fTraversable[]

-- RHS size: {terms: 1, types: 0, coercions: 4, joins: 0/0}
$dIP_a5k0J :: HasCallStack
[LclId]
$dIP_a5k0J
  = GHC.Stack.Types.emptyCallStack
    `cast` (Sym (ghc-prim-0.6.1:GHC.Classes.N:IP[0]
                     <"callStack">_N <GHC.Stack.Types.CallStack>_N)
            :: GHC.Stack.Types.CallStack
               ~R# (?callStack::GHC.Stack.Types.CallStack))

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
GHC.Cmm.Info.$tcPtrOpts :: ghc-prim-0.6.1:GHC.Types.TyCon
[LclIdX]
GHC.Cmm.Info.$tcPtrOpts
  = ghc-prim-0.6.1:GHC.Types.TyCon
      10783844252980521413##
      13019815378033756893##
      GHC.Cmm.Info.$trModule
      (ghc-prim-0.6.1:GHC.Types.TrNameS "PtrOpts"#)
      0#
      ghc-prim-0.6.1:GHC.Types.krep$*

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
GHC.Cmm.Info.$tc'PtrOpts :: ghc-prim-0.6.1:GHC.Types.TyCon
[LclIdX]
GHC.Cmm.Info.$tc'PtrOpts
  = ghc-prim-0.6.1:GHC.Types.TyCon
      11086577099826734001##
      4931096801432934088##
      GHC.Cmm.Info.$trModule
      (ghc-prim-0.6.1:GHC.Types.TrNameS "'PtrOpts"#)
      0#
      $krep_a5k0L

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5k0N [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.6.1:GHC.Types.KindRep
[LclId]
$krep_a5k0N
  = ghc-prim-0.6.1:GHC.Types.KindRepFun $krep_a5k0O $krep_a5k0P

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_a5k0L [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.6.1:GHC.Types.KindRep
[LclId]
$krep_a5k0L
  = ghc-prim-0.6.1:GHC.Types.KindRepFun $krep_a5k0M $krep_a5k0N

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_a5k0M [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.6.1:GHC.Types.KindRep
[LclId]
$krep_a5k0M
  = ghc-prim-0.6.1:GHC.Types.KindRepTyConApp
      GHC.Platform.Profile.$tcProfile
      (ghc-prim-0.6.1:GHC.Types.[] @ ghc-prim-0.6.1:GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_a5k0O [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.6.1:GHC.Types.KindRep
[LclId]
$krep_a5k0O
  = ghc-prim-0.6.1:GHC.Types.KindRepTyConApp
      ghc-prim-0.6.1:GHC.Types.$tcBool
      (ghc-prim-0.6.1:GHC.Types.[] @ ghc-prim-0.6.1:GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_a5k0P [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.6.1:GHC.Types.KindRep
[LclId]
$krep_a5k0P
  = ghc-prim-0.6.1:GHC.Types.KindRepTyConApp
      GHC.Cmm.Info.$tcPtrOpts
      (ghc-prim-0.6.1:GHC.Types.[] @ ghc-prim-0.6.1:GHC.Types.KindRep)

-- RHS size: {terms: 5, types: 0, coercions: 0, joins: 0/0}
GHC.Cmm.Info.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[LclIdX]
GHC.Cmm.Info.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module
      (ghc-prim-0.6.1:GHC.Types.TrNameS "ghc"#)
      (ghc-prim-0.6.1:GHC.Types.TrNameS "GHC.Cmm.Info"#)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
profInfoTableSizeW :: WordOff
[LclIdX]
profInfoTableSizeW = ghc-prim-0.6.1:GHC.Types.I# 2#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
fixedInfoTableSizeW :: WordOff
[LclIdX]
fixedInfoTableSizeW = ghc-prim-0.6.1:GHC.Types.I# 2#

-- RHS size: {terms: 8, types: 2, coercions: 0, joins: 0/0}
maxStdInfoTableSizeW :: WordOff
[LclIdX]
maxStdInfoTableSizeW
  = + @ WordOff
      $dNum_a5jNA
      (+ @ WordOff
         $dNum_a5jNC
         (ghc-prim-0.6.1:GHC.Types.I# 1#)
         fixedInfoTableSizeW)
      profInfoTableSizeW

-- RHS size: {terms: 5, types: 1, coercions: 0, joins: 0/0}
maxRetInfoTableSizeW :: WordOff
[LclIdX]
maxRetInfoTableSizeW
  = + @ WordOff
      $dNum_a5jNJ
      maxStdInfoTableSizeW
      (ghc-prim-0.6.1:GHC.Types.I# 1#)

-- RHS size: {terms: 12, types: 3, coercions: 0, joins: 0/0}
stdInfoTableSizeW :: Profile -> WordOff
[LclIdX]
stdInfoTableSizeW
  = \ (profile_a5jIr :: Profile) ->
      + @ WordOff
        $dNum_a5jNQ
        fixedInfoTableSizeW
        (case profileIsProfiling profile_a5jIr of wild_00 {
           False -> ghc-prim-0.6.1:GHC.Types.I# 0#;
           True -> profInfoTableSizeW
         })

-- RHS size: {terms: 7, types: 2, coercions: 0, joins: 0/0}
stdInfoTableSizeB :: Profile -> ByteOff
[LclIdX]
stdInfoTableSizeB
  = \ (profile_a5jIs :: Profile) ->
      * @ WordOff
        $dNum_a5jNX
        (stdInfoTableSizeW profile_a5jIs)
        (profileWordSizeInBytes profile_a5jIs)

-- RHS size: {terms: 8, types: 2, coercions: 0, joins: 0/0}
stdSrtBitmapOffset :: Profile -> ByteOff
[LclIdX]
stdSrtBitmapOffset
  = \ (profile_a5jIt :: Profile) ->
      - @ ByteOff
        $dNum_a5jO0
        (stdInfoTableSizeB profile_a5jIt)
        (halfWordSize (profilePlatform profile_a5jIt))

-- RHS size: {terms: 7, types: 2, coercions: 0, joins: 0/0}
stdClosureTypeOffset :: Profile -> ByteOff
[LclIdX]
stdClosureTypeOffset
  = \ (profile_a5jIu :: Profile) ->
      - @ ByteOff
        $dNum_a5jO3
        (stdInfoTableSizeB profile_a5jIu)
        (profileWordSizeInBytes profile_a5jIu)

-- RHS size: {terms: 11, types: 3, coercions: 0, joins: 0/0}
stdPtrsOffset :: Profile -> ByteOff
[LclIdX]
stdPtrsOffset
  = \ (profile_a5jIv :: Profile) ->
      - @ ByteOff
        $dNum_a5jO6
        (stdInfoTableSizeB profile_a5jIv)
        (* @ Int
           $dNum_a5jO8
           (ghc-prim-0.6.1:GHC.Types.I# 2#)
           (profileWordSizeInBytes profile_a5jIv))

-- RHS size: {terms: 16, types: 4, coercions: 0, joins: 0/0}
stdNonPtrsOffset :: Profile -> ByteOff
[LclIdX]
stdNonPtrsOffset
  = \ (profile_a5jIw :: Profile) ->
      + @ ByteOff
        $dNum_a5jOf
        (- @ ByteOff
           $dNum_a5jOh
           (stdInfoTableSizeB profile_a5jIw)
           (* @ Int
              $dNum_a5jOj
              (ghc-prim-0.6.1:GHC.Types.I# 2#)
              (profileWordSizeInBytes profile_a5jIw)))
        (halfWordSize (profilePlatform profile_a5jIw))

-- RHS size: {terms: 7, types: 2, coercions: 0, joins: 0/0}
conInfoTableSizeB :: Profile -> Int
[LclIdX]
conInfoTableSizeB
  = \ (profile_a5jIx :: Profile) ->
      + @ ByteOff
        $dNum_a5jOq
        (stdInfoTableSizeB profile_a5jIx)
        (profileWordSizeInBytes profile_a5jIx)

-- RHS size: {terms: 35, types: 10, coercions: 0, joins: 0/2}
funInfoTable :: Profile -> CmmExpr -> CmmExpr
[LclIdX]
funInfoTable
  = \ (profile_a5jIf :: Profile) (info_ptr_a5jIg :: CmmExpr) ->
      letrec {
        platform_a5jIh :: Platform
        [LclId]
        platform_a5jIh = profilePlatform profile_a5jIf; } in
      let {
        fail_d5k0W :: ghc-prim-0.6.1:GHC.Prim.Void# -> CmmExpr
        [LclId]
        fail_d5k0W
          = \ (ds_d5k0X [OS=OneShot] :: ghc-prim-0.6.1:GHC.Prim.Void#) ->
              cmmOffsetW
                platform_a5jIh
                info_ptr_a5jIg
                (+ @ WordOff
                   $dNum_a5jOD
                   (ghc-prim-0.6.1:GHC.Types.I# 1#)
                   (stdInfoTableSizeW profile_a5jIf)) } in
      case platformTablesNextToCode platform_a5jIh of wild_00 {
        False -> fail_d5k0W ghc-prim-0.6.1:GHC.Prim.void#;
        True ->
          cmmOffsetB
            platform_a5jIh
            info_ptr_a5jIg
            (- @ ByteOff
               $dNum_a5jOx
               (negate @ ByteOff $dNum_a5jOB (stdInfoTableSizeB profile_a5jIf))
               (pc_SIZEOF_StgFunInfoExtraRev (platformConstants platform_a5jIh)))
      }

-- RHS size: {terms: 58, types: 33, coercions: 0, joins: 0/9}
funInfoArity :: Profile -> CmmExpr -> CmmExpr
[LclIdX]
funInfoArity
  = \ (profile_a5jIi :: Profile) (iptr_a5jIj :: CmmExpr) ->
      letrec {
        fun_info_a5jIl :: CmmExpr
        [LclId]
        fun_info_a5jIl = funInfoTable profile_a5jIi iptr_a5jIj; } in
      letrec {
        platform_a5jIk :: Platform
        [LclId]
        platform_a5jIk = profilePlatform profile_a5jIi; } in
      letrec {
        tablesNextToCode_a5jIn :: Bool
        [LclId]
        tablesNextToCode_a5jIn
          = platformTablesNextToCode platform_a5jIk; } in
      letrec {
        pc_a5jIq :: PlatformConstants
        [LclId]
        pc_a5jIq = platformConstants platform_a5jIk; } in
      letrec {
        ds_d5k14 :: (Int, Int)
        [LclId]
        ds_d5k14
          = let {
              fail_d5k0Y :: ghc-prim-0.6.1:GHC.Prim.Void# -> (Int, Int)
              [LclId]
              fail_d5k0Y
                = \ (ds_d5k0Z [OS=OneShot] :: ghc-prim-0.6.1:GHC.Prim.Void#) ->
                    (pc_REP_StgFunInfoExtraFwd_arity pc_a5jIq,
                     pc_OFFSET_StgFunInfoExtraFwd_arity pc_a5jIq) } in
            case tablesNextToCode_a5jIn of wild_00 {
              False -> fail_d5k0Y ghc-prim-0.6.1:GHC.Prim.void#;
              True ->
                (pc_REP_StgFunInfoExtraRev_arity pc_a5jIq,
                 pc_OFFSET_StgFunInfoExtraRev_arity pc_a5jIq)
            };
        rep_bytes_a5jIo :: Int
        [LclId]
        rep_bytes_a5jIo
          = case ds_d5k14 of wild_00 { (rep_bytes_a5jIo, offset_a5jIp) ->
            rep_bytes_a5jIo
            };
        offset_a5jIp :: Int
        [LclId]
        offset_a5jIp
          = case ds_d5k14 of wild_00 { (rep_bytes_a5jIo, offset_a5jIp) ->
            offset_a5jIp
            }; } in
      letrec {
        rep_a5jIm :: CmmType
        [LclId]
        rep_a5jIm = cmmBits (widthFromBytes rep_bytes_a5jIo); } in
      cmmToWord
        platform_a5jIk
        (cmmLoadIndex
           platform_a5jIk
           rep_a5jIm
           fun_info_a5jIl
           (div @ Int $dIntegral_a5jPb offset_a5jIp rep_bytes_a5jIo))

-- RHS size: {terms: 13, types: 3, coercions: 0, joins: 0/1}
infoTableNonPtrs :: Profile -> CmmExpr -> CmmExpr
[LclIdX]
infoTableNonPtrs
  = \ (profile_a5jIc :: Profile) (info_tbl_a5jId :: CmmExpr) ->
      letrec {
        platform_a5jIe :: Platform
        [LclId]
        platform_a5jIe = profilePlatform profile_a5jIc; } in
      GHC.Cmm.Expr.$WCmmLoad
        (cmmOffsetB
           platform_a5jIe info_tbl_a5jId (stdNonPtrsOffset profile_a5jIc))
        (bHalfWord platform_a5jIe)

-- RHS size: {terms: 13, types: 3, coercions: 0, joins: 0/1}
infoTablePtrs :: Profile -> CmmExpr -> CmmExpr
[LclIdX]
infoTablePtrs
  = \ (profile_a5jI9 :: Profile) (info_tbl_a5jIa :: CmmExpr) ->
      letrec {
        platform_a5jIb :: Platform
        [LclId]
        platform_a5jIb = profilePlatform profile_a5jI9; } in
      GHC.Cmm.Expr.$WCmmLoad
        (cmmOffsetB
           platform_a5jIb info_tbl_a5jIa (stdPtrsOffset profile_a5jI9))
        (bHalfWord platform_a5jIb)

-- RHS size: {terms: 13, types: 3, coercions: 0, joins: 0/1}
infoTableClosureType :: Profile -> CmmExpr -> CmmExpr
[LclIdX]
infoTableClosureType
  = \ (profile_a5jI6 :: Profile) (info_tbl_a5jI7 :: CmmExpr) ->
      letrec {
        platform_a5jI8 :: Platform
        [LclId]
        platform_a5jI8 = profilePlatform profile_a5jI6; } in
      GHC.Cmm.Expr.$WCmmLoad
        (cmmOffsetB
           platform_a5jI8 info_tbl_a5jI7 (stdClosureTypeOffset profile_a5jI6))
        (bHalfWord platform_a5jI8)

-- RHS size: {terms: 13, types: 3, coercions: 0, joins: 0/1}
infoTableSrtBitmap :: Profile -> CmmExpr -> CmmExpr
[LclIdX]
infoTableSrtBitmap
  = \ (profile_a5jI3 :: Profile) (info_tbl_a5jI4 :: CmmExpr) ->
      letrec {
        platform_a5jI5 :: Platform
        [LclId]
        platform_a5jI5 = profilePlatform profile_a5jI3; } in
      GHC.Cmm.Expr.$WCmmLoad
        (cmmOffsetB
           platform_a5jI5 info_tbl_a5jI4 (stdSrtBitmapOffset profile_a5jI3))
        (bHalfWord platform_a5jI5)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
infoTableConstrTag :: Profile -> CmmExpr -> CmmExpr
[LclIdX]
infoTableConstrTag = infoTableSrtBitmap

-- RHS size: {terms: 26, types: 8, coercions: 0, joins: 0/2}
infoTable :: Profile -> CmmExpr -> CmmExpr
[LclIdX]
infoTable
  = \ (profile_a5jI0 :: Profile) (info_ptr_a5jI1 :: CmmExpr) ->
      letrec {
        platform_a5jI2 :: Platform
        [LclId]
        platform_a5jI2 = profilePlatform profile_a5jI0; } in
      let {
        fail_d5k1j :: ghc-prim-0.6.1:GHC.Prim.Void# -> CmmExpr
        [LclId]
        fail_d5k1j
          = \ (ds_d5k1k [OS=OneShot] :: ghc-prim-0.6.1:GHC.Prim.Void#) ->
              cmmOffsetW
                platform_a5jI2 info_ptr_a5jI1 (ghc-prim-0.6.1:GHC.Types.I# 1#) } in
      case platformTablesNextToCode platform_a5jI2 of wild_00 {
        False -> fail_d5k1j ghc-prim-0.6.1:GHC.Prim.void#;
        True ->
          cmmOffsetB
            platform_a5jI2
            info_ptr_a5jI1
            (negate @ ByteOff $dNum_a5jPF (stdInfoTableSizeB profile_a5jI0))
      }

-- RHS size: {terms: 12, types: 3, coercions: 0, joins: 0/0}
entryCode :: Platform -> CmmExpr -> CmmExpr
[LclIdX]
entryCode
  = \ (platform_a5jHO :: Platform) (e_a5jHP :: CmmExpr) ->
      case platformTablesNextToCode platform_a5jHO of wild_00 {
        False -> GHC.Cmm.Expr.$WCmmLoad e_a5jHP (bWord platform_a5jHO);
        True -> e_a5jHP
      }

-- RHS size: {terms: 29, types: 14, coercions: 0, joins: 0/2}
wordAligned :: PtrOpts -> CmmExpr -> CmmExpr
[LclIdX]
wordAligned
  = \ (opts_a5jHJ :: PtrOpts) (e_a5jHK :: CmmExpr) ->
      letrec {
        platform_a5jHL :: Platform
        [LclId]
        platform_a5jHL = profilePlatform (po_profile opts_a5jHJ); } in
      let {
        fail_d5k1u :: ghc-prim-0.6.1:GHC.Prim.Void# -> CmmExpr
        [LclId]
        fail_d5k1u
          = \ (ds_d5k1v [OS=OneShot] :: ghc-prim-0.6.1:GHC.Prim.Void#) ->
              e_a5jHK } in
      case po_align_check opts_a5jHJ of wild_00 {
        False -> fail_d5k1u ghc-prim-0.6.1:GHC.Prim.void#;
        True ->
          GHC.Cmm.Expr.CmmMachOp
            (GHC.Cmm.MachOp.MO_AlignmentCheck
               (platformWordSizeInBytes platform_a5jHL)
               (wordWidth platform_a5jHL))
            (GHC.Base.build
               @ CmmExpr
               (\ (@ a_d5k1l)
                  (c_d5k1m :: CmmExpr -> a_d5k1l -> a_d5k1l)
                  (n_d5k1n :: a_d5k1l) ->
                  c_d5k1m e_a5jHK n_d5k1n))
      }

-- RHS size: {terms: 10, types: 2, coercions: 0, joins: 0/0}
closureInfoPtr :: PtrOpts -> CmmExpr -> CmmExpr
[LclIdX]
closureInfoPtr
  = \ (opts_a5jHM :: PtrOpts) (e_a5jHN :: CmmExpr) ->
      GHC.Cmm.Expr.$WCmmLoad
        (wordAligned opts_a5jHM e_a5jHN)
        (bWord (profilePlatform (po_profile opts_a5jHM)))

-- RHS size: {terms: 29, types: 12, coercions: 0, joins: 0/3}
getConstrTag :: PtrOpts -> CmmExpr -> CmmExpr
[LclIdX]
getConstrTag
  = \ (opts_a5jHQ :: PtrOpts) (closure_ptr_a5jHR :: CmmExpr) ->
      letrec {
        profile_a5jHU :: Profile
        [LclId]
        profile_a5jHU = po_profile opts_a5jHQ; } in
      letrec {
        platform_a5jHT :: Platform
        [LclId]
        platform_a5jHT = profilePlatform profile_a5jHU; } in
      letrec {
        info_table_a5jHS :: CmmExpr
        [LclId]
        info_table_a5jHS
          = infoTable
              profile_a5jHU (closureInfoPtr opts_a5jHQ closure_ptr_a5jHR); } in
      GHC.Cmm.Expr.CmmMachOp
        (GHC.Cmm.MachOp.MO_UU_Conv
           (halfWordWidth platform_a5jHT) (wordWidth platform_a5jHT))
        (GHC.Base.build
           @ CmmExpr
           (\ (@ a_d5k1w)
              (c_d5k1x :: CmmExpr -> a_d5k1w -> a_d5k1w)
              (n_d5k1y :: a_d5k1w) ->
              c_d5k1x
                (infoTableConstrTag profile_a5jHU info_table_a5jHS) n_d5k1y))

-- RHS size: {terms: 29, types: 12, coercions: 0, joins: 0/3}
cmmGetClosureType :: PtrOpts -> CmmExpr -> CmmExpr
[LclIdX]
cmmGetClosureType
  = \ (opts_a5jHV :: PtrOpts) (closure_ptr_a5jHW :: CmmExpr) ->
      letrec {
        profile_a5jHZ :: Profile
        [LclId]
        profile_a5jHZ = po_profile opts_a5jHV; } in
      letrec {
        platform_a5jHY :: Platform
        [LclId]
        platform_a5jHY = profilePlatform profile_a5jHZ; } in
      letrec {
        info_table_a5jHX :: CmmExpr
        [LclId]
        info_table_a5jHX
          = infoTable
              profile_a5jHZ (closureInfoPtr opts_a5jHV closure_ptr_a5jHW); } in
      GHC.Cmm.Expr.CmmMachOp
        (GHC.Cmm.MachOp.MO_UU_Conv
           (halfWordWidth platform_a5jHY) (wordWidth platform_a5jHY))
        (GHC.Base.build
           @ CmmExpr
           (\ (@ a_d5k1z)
              (c_d5k1A :: CmmExpr -> a_d5k1z -> a_d5k1z)
              (n_d5k1B :: a_d5k1z) ->
              c_d5k1A
                (infoTableClosureType profile_a5jHZ info_table_a5jHX) n_d5k1B))

-- RHS size: {terms: 6, types: 2, coercions: 0, joins: 0/0}
srtEscape :: Platform -> StgHalfWord
[LclIdX]
srtEscape
  = \ (platform_a5jHI :: Platform) ->
      toStgHalfWord platform_a5jHI (negate @ Integer $dNum_a5jQh 1)

-- RHS size: {terms: 20, types: 32, coercions: 0, joins: 0/3}
newStringLit
  :: forall info stmt.
     ByteString -> UniqSM (CmmLit, GenCmmDecl RawCmmStatics info stmt)
[LclIdX]
newStringLit
  = \ (@ info_a5jQm) (@ stmt_a5jQn) ->
      let {
        $dMonad_a5jQy :: Monad UniqSM
        [LclId]
        $dMonad_a5jQy = $dMonad_a5jQG } in
      let {
        $dMonadUnique_a5jQw :: MonadUnique UniqSM
        [LclId]
        $dMonadUnique_a5jQw = $dMonadUnique_a5jSr } in
      let {
        $dMonad_a5jQs :: Monad UniqSM
        [LclId]
        $dMonad_a5jQs = $dMonad_a5jQG } in
      \ (bytes_a5jHG :: ByteString) ->
        >>=
          @ UniqSM
          $dMonad_a5jQs
          @ GHC.Types.Unique.Unique
          @ (CmmLit, GenCmmDecl RawCmmStatics info_a5jQm stmt_a5jQn)
          (getUniqueM @ UniqSM $dMonadUnique_a5jQw)
          (\ (uniq_a5jHH :: GHC.Types.Unique.Unique) ->
             return
               @ UniqSM
               $dMonad_a5jQy
               @ (CmmLit, GenCmmDecl (GenCmmStatics 'True) info_a5jQm stmt_a5jQn)
               (mkByteStringCLit
                  @ 'True
                  @ info_a5jQm
                  @ stmt_a5jQn
                  (mkStringLitLabel uniq_a5jHH)
                  bytes_a5jHG))

-- RHS size: {terms: 46, types: 131, coercions: 0, joins: 0/0}
mkProfLits
  :: Platform
     -> ProfilingInfo -> UniqSM ((CmmLit, CmmLit), [RawCmmDecl])
[LclIdX]
mkProfLits
  = \ (platform_a5jHz :: Platform) (ds_d5k1C :: ProfilingInfo) ->
      case ds_d5k1C of wild_00 {
        NoProfilingInfo ->
          return
            @ UniqSM
            $dMonad_a5jQG
            @ ((CmmLit, CmmLit), [RawCmmDecl])
            ((zeroCLit platform_a5jHz, zeroCLit platform_a5jHz),
             ghc-prim-0.6.1:GHC.Types.[] @ RawCmmDecl);
        ProfilingInfo td_a5jHA cd_a5jHB ->
          >>=
            @ UniqSM
            $dMonad_a5jQQ
            @ (CmmLit,
               GenCmmDecl
                 RawCmmStatics
                 (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                 CmmGraph)
            @ ((CmmLit, CmmLit), [RawCmmDecl])
            (newStringLit
               @ (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
               @ CmmGraph
               td_a5jHA)
            (\ (ds_d5k1P
                  :: (CmmLit,
                      GenCmmDecl
                        RawCmmStatics
                        (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                        CmmGraph)) ->
               case ds_d5k1P of wild_00 { (td_lit_a5jHC, td_decl_a5jHD) ->
               >>=
                 @ UniqSM
                 $dMonad_a5jQY
                 @ (CmmLit,
                    GenCmmDecl
                      RawCmmStatics
                      (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                      CmmGraph)
                 @ ((CmmLit, CmmLit), [RawCmmDecl])
                 (newStringLit
                    @ (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                    @ CmmGraph
                    cd_a5jHB)
                 (\ (ds_d5k1K
                       :: (CmmLit,
                           GenCmmDecl
                             RawCmmStatics
                             (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                             CmmGraph)) ->
                    case ds_d5k1K of wild_00 { (cd_lit_a5jHE, cd_decl_a5jHF) ->
                    return
                      @ UniqSM
                      $dMonad_a5jR4
                      @ ((CmmLit, CmmLit),
                         [GenCmmDecl
                            RawCmmStatics
                            (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                            CmmGraph])
                      ((td_lit_a5jHC, cd_lit_a5jHE),
                       GHC.Base.build
                         @ (GenCmmDecl
                              RawCmmStatics
                              (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                              CmmGraph)
                         (\ (@ a_d5k1H)
                            (c_d5k1I
                               :: GenCmmDecl
                                    RawCmmStatics
                                    (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                                    CmmGraph
                                  -> a_d5k1H -> a_d5k1H)
                            (n_d5k1J :: a_d5k1H) ->
                            c_d5k1I td_decl_a5jHD (c_d5k1I cd_decl_a5jHF n_d5k1J)))
                    })
               })
      }

-- RHS size: {terms: 52, types: 39, coercions: 0, joins: 0/4}
mkStdInfoTable
  :: DynFlags
     -> (CmmLit, CmmLit) -> Int -> CmmLit -> CmmLit -> [CmmLit]
[LclIdX]
mkStdInfoTable
  = \ (dflags_a5jHq :: DynFlags)
      (ds_d5k20 :: (CmmLit, CmmLit))
      (cl_type_a5jHt :: Int)
      (srt_a5jHu :: CmmLit)
      (layout_lit_a5jHv :: CmmLit) ->
      case ds_d5k20 of wild_00
      { (type_descr_a5jHr, closure_descr_a5jHs) ->
      letrec {
        prof_info_a5jHx :: [CmmLit]
        [LclId]
        prof_info_a5jHx
          = let {
              fail_d5k2j :: ghc-prim-0.6.1:GHC.Prim.Void# -> [CmmLit]
              [LclId]
              fail_d5k2j
                = \ (ds_d5k2k [OS=OneShot] :: ghc-prim-0.6.1:GHC.Prim.Void#) ->
                    ghc-prim-0.6.1:GHC.Types.[] @ CmmLit } in
            case sccProfilingEnabled dflags_a5jHq of wild_00 {
              False -> fail_d5k2j ghc-prim-0.6.1:GHC.Prim.void#;
              True ->
                GHC.Base.build
                  @ CmmLit
                  (\ (@ a_d5k2a)
                     (c_d5k2b :: CmmLit -> a_d5k2a -> a_d5k2a)
                     (n_d5k2c :: a_d5k2a) ->
                     c_d5k2b type_descr_a5jHr (c_d5k2b closure_descr_a5jHs n_d5k2c))
            }; } in
      letrec {
        platform_a5jHw :: Platform
        [LclId]
        platform_a5jHw = targetPlatform dflags_a5jHq; } in
      letrec {
        tag_a5jHy :: CmmLit
        [LclId]
        tag_a5jHy
          = GHC.Cmm.Expr.$WCmmInt
              (fromIntegral
                 @ Int @ Integer $dIntegral_a5jRr $dNum_a5jRs cl_type_a5jHt)
              (halfWordWidth platform_a5jHw); } in
      ++
        @ CmmLit
        prof_info_a5jHx
        (GHC.Base.build
           @ CmmLit
           (\ (@ a_d5k23)
              (c_d5k24 :: CmmLit -> a_d5k23 -> a_d5k23)
              (n_d5k25 :: a_d5k23) ->
              c_d5k24
                layout_lit_a5jHv (c_d5k24 tag_a5jHy (c_d5k24 srt_a5jHu n_d5k25))))
      }

-- RHS size: {terms: 103, types: 99, coercions: 0, joins: 0/10}
mkLivenessBits
  :: DynFlags -> Liveness -> UniqSM (CmmLit, [RawCmmDecl])
[LclIdX]
mkLivenessBits
  = \ (dflags_a5jHf :: DynFlags) (liveness_a5jHg :: Liveness) ->
      letrec {
        n_bits_a5jHi :: Int
        [LclId]
        n_bits_a5jHi
          = length @ [] $dFoldable_a5jRE @ Bool liveness_a5jHg; } in
      letrec {
        platform_a5jHh :: Platform
        [LclId]
        platform_a5jHh = targetPlatform dflags_a5jHf; } in
      letrec {
        bitmap_a5jHj :: Bitmap
        [LclId]
        bitmap_a5jHj = mkBitmap platform_a5jHh liveness_a5jHg; } in
      letrec {
        small_bitmap_a5jHk :: StgWord
        [LclId]
        small_bitmap_a5jHk
          = let {
              ds_d5k2w :: [StgWord]
              [LclId]
              ds_d5k2w = bitmap_a5jHj } in
            let {
              fail_d5k2S :: ghc-prim-0.6.1:GHC.Prim.Void# -> StgWord
              [LclId]
              fail_d5k2S
                = \ (ds_d5k2T [OS=OneShot] :: ghc-prim-0.6.1:GHC.Prim.Void#) ->
                    panic
                      @ StgWord
                      (ghc-prim-0.6.1:GHC.CString.unpackCString# "mkLiveness"#) } in
            case ds_d5k2w of wild_00 {
              [] -> toStgWord platform_a5jHh 0;
              : b_a5jHn ds_d5k2R ->
                case ds_d5k2R of wild_00 {
                  __DEFAULT -> fail_d5k2S ghc-prim-0.6.1:GHC.Prim.void#;
                  [] -> b_a5jHn
                }
            }; } in
      letrec {
        bitmap_word_a5jHl :: StgWord
        [LclId]
        bitmap_word_a5jHl
          = .|.
              @ StgWord
              $dBits_a5jRY
              (toStgWord
                 platform_a5jHh
                 (fromIntegral
                    @ Int @ Integer $dIntegral_a5jS1 $dNum_a5jS2 n_bits_a5jHi))
              (shiftL
                 @ StgWord
                 $dBits_a5jS4
                 small_bitmap_a5jHk
                 (pc_BITMAP_BITS_SHIFT (platformConstants platform_a5jHh))); } in
      letrec {
        lits_a5jHm :: [CmmLit]
        [LclId]
        lits_a5jHm
          = ghc-prim-0.6.1:GHC.Types.:
              @ CmmLit
              (mkWordCLit
                 platform_a5jHh
                 (fromIntegral
                    @ Int @ Integer $dIntegral_a5jSc $dNum_a5jSd n_bits_a5jHi))
              (map
                 @ StgWord
                 @ CmmLit
                 (mkStgWordCLit platform_a5jHh)
                 bitmap_a5jHj); } in
      let {
        fail_d5k2u
          :: ghc-prim-0.6.1:GHC.Prim.Void# -> UniqSM (CmmLit, [RawCmmDecl])
        [LclId]
        fail_d5k2u
          = \ (ds_d5k2v [OS=OneShot] :: ghc-prim-0.6.1:GHC.Prim.Void#) ->
              return
                @ UniqSM
                $dMonad_a5jSG
                @ (CmmLit, [RawCmmDecl])
                (mkStgWordCLit platform_a5jHh bitmap_word_a5jHl,
                 ghc-prim-0.6.1:GHC.Types.[] @ RawCmmDecl) } in
      case > @ Int
             $dOrd_a5jSj
             n_bits_a5jHi
             (mAX_SMALL_BITMAP_SIZE platform_a5jHh)
      of wild_00 {
        False -> fail_d5k2u ghc-prim-0.6.1:GHC.Prim.void#;
        True ->
          >>=
            @ UniqSM
            $dMonad_a5jSn
            @ GHC.Types.Unique.Unique
            @ (CmmLit, [RawCmmDecl])
            (getUniqueM @ UniqSM $dMonadUnique_a5jSr)
            (\ (uniq_a5jHo :: GHC.Types.Unique.Unique) ->
               letrec {
                 bitmap_lbl_a5jHp :: CLabel
                 [LclId]
                 bitmap_lbl_a5jHp = mkBitmapLabel uniq_a5jHo; } in
               return
                 @ UniqSM
                 $dMonad_a5jSx
                 @ (CmmLit,
                    [GenCmmDecl
                       (GenCmmStatics 'True)
                       (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                       CmmGraph])
                 (GHC.Cmm.Expr.CmmLabel bitmap_lbl_a5jHp,
                  GHC.Base.build
                    @ (GenCmmDecl
                         (GenCmmStatics 'True)
                         (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                         CmmGraph)
                    (\ (@ a_d5k2l)
                       (c_d5k2m
                          :: GenCmmDecl
                               (GenCmmStatics 'True)
                               (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                               CmmGraph
                             -> a_d5k2l -> a_d5k2l)
                       (n_d5k2n :: a_d5k2l) ->
                       c_d5k2m
                         (mkRODataLits
                            @ 'True
                            @ (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                            @ CmmGraph
                            bitmap_lbl_a5jHp
                            lits_a5jHm)
                         n_d5k2n)))
      }

-- RHS size: {terms: 34, types: 12, coercions: 0, joins: 0/2}
makeRelativeRefTo :: Platform -> CLabel -> CmmLit -> CmmLit
[LclIdX]
makeRelativeRefTo
  = \ (platform_a5jH9 :: Platform)
      (info_lbl_a5jHa :: CLabel)
      (lit_a5jHb :: CmmLit) ->
      case platformTablesNextToCode platform_a5jH9 of wild_00 {
        False -> lit_a5jHb;
        True ->
          let {
            ds_d5k2U :: CmmLit
            [LclId]
            ds_d5k2U = lit_a5jHb } in
          let {
            fail_d5k3r :: ghc-prim-0.6.1:GHC.Prim.Void# -> CmmLit
            [LclId]
            fail_d5k3r
              = \ (ds_d5k3s [OS=OneShot] :: ghc-prim-0.6.1:GHC.Prim.Void#) ->
                  lit_a5jHb } in
          case ds_d5k2U of wild_00 {
            __DEFAULT -> fail_d5k3r ghc-prim-0.6.1:GHC.Prim.void#;
            CmmLabel lbl_a5jHc ->
              GHC.Cmm.Expr.CmmLabelDiffOff
                lbl_a5jHc
                info_lbl_a5jHa
                (ghc-prim-0.6.1:GHC.Types.I# 0#)
                (wordWidth platform_a5jH9);
            CmmLabelOff lbl_a5jHd off_a5jHe ->
              GHC.Cmm.Expr.CmmLabelDiffOff
                lbl_a5jHd info_lbl_a5jHa off_a5jHe (wordWidth platform_a5jH9)
          }
      }

-- RHS size: {terms: 9, types: 2, coercions: 0, joins: 0/0}
inlineSRT :: Platform -> Bool
[LclIdX]
inlineSRT
  = \ (platform_a5jH8 :: Platform) ->
      &&
        (==
           @ Arch
           $dEq_a5jSQ
           (platformArch platform_a5jH8)
           GHC.Platform.ArchOS.ArchX86_64)
        (platformTablesNextToCode platform_a5jH8)

-- RHS size: {terms: 50, types: 35, coercions: 0, joins: 0/4}
mkSRTLit
  :: Platform -> CLabel -> Maybe CLabel -> ([CmmLit], CmmLit)
[LclIdX]
mkSRTLit
  = \ (platform_a5jH2 :: Platform)
      (info_lbl_a5jH3 :: CLabel)
      (ds_d5k3t :: Maybe CLabel) ->
      let {
        platform_a5jH5 :: Platform
        [LclId]
        platform_a5jH5 = platform_a5jH2 } in
      let {
        platform_a5jH6 :: Platform
        [LclId]
        platform_a5jH6 = platform_a5jH2 } in
      case ds_d5k3t of wild_00 {
        Nothing ->
          (ghc-prim-0.6.1:GHC.Types.[] @ CmmLit,
           GHC.Cmm.Expr.$WCmmInt 0 (halfWordWidth platform_a5jH5));
        Just lbl_a5jH4 ->
          let {
            lbl_a5jH7 :: CLabel
            [LclId]
            lbl_a5jH7 = lbl_a5jH4 } in
          let {
            fail_d5k3O :: ghc-prim-0.6.1:GHC.Prim.Void# -> ([CmmLit], CmmLit)
            [LclId]
            fail_d5k3O
              = \ (ds_d5k3P [OS=OneShot] :: ghc-prim-0.6.1:GHC.Prim.Void#) ->
                  (GHC.Base.build
                     @ CmmLit
                     (\ (@ a_d5k3A)
                        (c_d5k3B :: CmmLit -> a_d5k3A -> a_d5k3A)
                        (n_d5k3C :: a_d5k3A) ->
                        c_d5k3B (GHC.Cmm.Expr.CmmLabel lbl_a5jH7) n_d5k3C),
                   GHC.Cmm.Expr.$WCmmInt 1 (halfWordWidth platform_a5jH6)) } in
          case inlineSRT platform_a5jH2 of wild_00 {
            False -> fail_d5k3O ghc-prim-0.6.1:GHC.Prim.void#;
            True ->
              (ghc-prim-0.6.1:GHC.Types.[] @ CmmLit,
               GHC.Cmm.Expr.CmmLabelDiffOff
                 lbl_a5jH4
                 info_lbl_a5jH3
                 (ghc-prim-0.6.1:GHC.Types.I# 0#)
                 (halfWordWidth platform_a5jH2))
          }
      }

-- RHS size: {terms: 17, types: 7, coercions: 0, joins: 0/0}
packIntsCLit :: Platform -> Int -> Int -> CmmLit
[LclIdX]
packIntsCLit
  = \ (platform_a5jGZ :: Platform)
      (a_a5jH0 :: Int)
      (b_a5jH1 :: Int) ->
      packHalfWordsCLit
        platform_a5jGZ
        (toStgHalfWord
           platform_a5jGZ
           (fromIntegral
              @ Int @ Integer $dIntegral_a5jSX $dNum_a5jSY a_a5jH0))
        (toStgHalfWord
           platform_a5jGZ
           (fromIntegral
              @ Int @ Integer $dIntegral_a5jT1 $dNum_a5jT2 b_a5jH1))

-- RHS size: {terms: 408, types: 606, coercions: 0, joins: 0/41}
mkInfoTableContents
  :: DynFlags
     -> CmmInfoTable
     -> Maybe Int
     -> UniqSM ([RawCmmDecl], InfoTableContents)
[LclIdX]
mkInfoTableContents
  = \ (dflags_a5jG3 :: DynFlags)
      (info_a5jG4 :: CmmInfoTable)
      (mb_rts_tag_a5jG9 :: Maybe Int) ->
      let {
        fail_d5k8y
          :: ghc-prim-0.6.1:GHC.Prim.Void#
             -> UniqSM ([RawCmmDecl], InfoTableContents)
        [LclId]
        fail_d5k8y
          = \ (ds_d5k8z [OS=OneShot] :: ghc-prim-0.6.1:GHC.Prim.Void#) ->
              panic
                @ (UniqSM ([RawCmmDecl], InfoTableContents))
                (ghc-prim-0.6.1:GHC.CString.unpackCString#
                   "mkInfoTableContents"#) } in
      case info_a5jG4 of wild_00
      { CmmInfoTable ds_d5k8t ds_d5k8u ds_d5k8v ds_d5k8w ds_d5k8x ->
      let {
        info_lbl_a5jG5 :: CLabel
        [LclId]
        info_lbl_a5jG5 = ds_d5k8t } in
      let {
        smrep_a5jG6 :: SMRep
        [LclId]
        smrep_a5jG6 = ds_d5k8u } in
      let {
        prof_a5jG7 :: ProfilingInfo
        [LclId]
        prof_a5jG7 = ds_d5k8v } in
      let {
        srt_a5jG8 :: Maybe CLabel
        [LclId]
        srt_a5jG8 = ds_d5k8w } in
      letrec {
        platform_a5jGa :: Platform
        [LclId]
        platform_a5jGa = targetPlatform dflags_a5jG3; } in
      letrec {
        mk_pieces_a5jGb
          :: ClosureTypeInfo
             -> [CmmLit]
             -> UniqSM (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])
        [LclId]
        mk_pieces_a5jGb
          = \ (ds_d5k8E :: ClosureTypeInfo) (_no_srt_a5jGe :: [CmmLit]) ->
              let {
                other_a5jGz :: ClosureTypeInfo
                [LclId]
                other_a5jGz = ds_d5k8E } in
              let {
                fail_d5k9N
                  :: ghc-prim-0.6.1:GHC.Prim.Void#
                     -> UniqSM (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])
                [LclId]
                fail_d5k9N
                  = \ (ds_d5k9O [OS=OneShot] :: ghc-prim-0.6.1:GHC.Prim.Void#) ->
                      pprPanic
                        @ (UniqSM (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl]))
                        $dIP_a5jV3
                        (ghc-prim-0.6.1:GHC.CString.unpackCString# "mk_pieces"#)
                        (ppr @ ClosureTypeInfo $dOutputable_a5jV5 other_a5jGz) } in
              case ds_d5k8E of wild_00 {
                __DEFAULT -> fail_d5k9N ghc-prim-0.6.1:GHC.Prim.void#;
                Constr con_tag_a5jGc con_descr_a5jGd ->
                  >>=
                    @ UniqSM
                    $dMonad_a5jTk
                    @ (CmmLit,
                       GenCmmDecl
                         RawCmmStatics
                         (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                         CmmGraph)
                    @ (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])
                    (newStringLit
                       @ (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                       @ CmmGraph
                       con_descr_a5jGd)
                    (\ (ds_d5k8N
                          :: (CmmLit,
                              GenCmmDecl
                                RawCmmStatics
                                (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                                CmmGraph)) ->
                       case ds_d5k8N of wild_00 { (descr_lit_a5jGf, decl_a5jGg) ->
                       return
                         @ UniqSM
                         $dMonad_a5jTq
                         @ (Maybe CmmLit, Maybe CmmLit, [CmmLit],
                            [GenCmmDecl
                               RawCmmStatics
                               (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                               CmmGraph])
                         (GHC.Maybe.Just
                            @ CmmLit
                            (GHC.Cmm.Expr.$WCmmInt
                               (fromIntegral
                                  @ GHC.Types.Basic.ConTagZ
                                  @ Integer
                                  $dIntegral_a5jTz
                                  $dNum_a5jTA
                                  con_tag_a5jGc)
                               (halfWordWidth platform_a5jGa)),
                          GHC.Maybe.Nothing @ CmmLit,
                          GHC.Base.build
                            @ CmmLit
                            (\ (@ a_d5k8K)
                               (c_d5k8L :: CmmLit -> a_d5k8K -> a_d5k8K)
                               (n_d5k8M :: a_d5k8K) ->
                               c_d5k8L descr_lit_a5jGf n_d5k8M),
                          GHC.Base.build
                            @ (GenCmmDecl
                                 RawCmmStatics
                                 (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                                 CmmGraph)
                            (\ (@ a_d5k8H)
                               (c_d5k8I
                                  :: GenCmmDecl
                                       RawCmmStatics
                                       (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                                       CmmGraph
                                     -> a_d5k8H -> a_d5k8H)
                               (n_d5k8J :: a_d5k8H) ->
                               c_d5k8I decl_a5jGg n_d5k8J))
                       });
                Fun arity_a5jGk ds_d5k9M ->
                  let {
                    arity_a5jGo :: GHC.Runtime.Heap.Layout.FunArity
                    [LclId]
                    arity_a5jGo = arity_a5jGk } in
                  case ds_d5k9M of wild_00 {
                    __DEFAULT -> fail_d5k9N ghc-prim-0.6.1:GHC.Prim.void#;
                    ArgSpec fun_type_a5jGl ->
                      let {
                        srt_label_a5jGm :: [CmmLit]
                        [LclId]
                        srt_label_a5jGm = _no_srt_a5jGe } in
                      letrec {
                        extra_bits_a5jGn :: [CmmLit]
                        [LclId]
                        extra_bits_a5jGn
                          = ghc-prim-0.6.1:GHC.Types.:
                              @ CmmLit
                              (packIntsCLit platform_a5jGa fun_type_a5jGl arity_a5jGk)
                              srt_label_a5jGm; } in
                      return
                        @ UniqSM
                        $dMonad_a5jUa
                        @ (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])
                        (GHC.Maybe.Nothing @ CmmLit, GHC.Maybe.Nothing @ CmmLit,
                         extra_bits_a5jGn, ghc-prim-0.6.1:GHC.Types.[] @ RawCmmDecl);
                    ArgGen arg_bits_a5jGp ->
                      let {
                        srt_label_a5jGq :: [CmmLit]
                        [LclId]
                        srt_label_a5jGq = _no_srt_a5jGe } in
                      letrec {
                        srt_lit_a5jGs :: CmmLit
                        [LclId]
                        srt_lit_a5jGs
                          = let {
                              ds_d5k9P :: [CmmLit]
                              [LclId]
                              ds_d5k9P = srt_label_a5jGq } in
                            case ds_d5k9P of wild_00 {
                              [] -> mkIntCLit platform_a5jGa (ghc-prim-0.6.1:GHC.Types.I# 0#);
                              : lit_a5jGt _rest_a5jGu ->
                                case &&
                                       debugIsOn
                                       (not (null @ [] $dFoldable_a5jUq @ CmmLit _rest_a5jGu))
                                of wild_00 {
                                  False -> lit_a5jGt;
                                  True ->
                                    assertPanic
                                      @ CmmLit
                                      (ghc-prim-0.6.1:GHC.CString.unpackCString#
                                         "E:\\\\ghc_inferTags\\\\compiler\\\\GHC\\\\Cmm\\\\Info.hs"#)
                                      (ghc-prim-0.6.1:GHC.Types.I# 262#)
                                }
                            }; } in
                      letrec {
                        slow_entry_a5jGr :: CmmLit
                        [LclId]
                        slow_entry_a5jGr
                          = GHC.Cmm.Expr.CmmLabel
                              (toSlowEntryLbl platform_a5jGa info_lbl_a5jG5); } in
                      >>=
                        @ UniqSM
                        $dMonad_a5jUB
                        @ (CmmLit, [RawCmmDecl])
                        @ (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])
                        (mkLivenessBits dflags_a5jG3 arg_bits_a5jGp)
                        (\ (ds_d5k9n :: (CmmLit, [RawCmmDecl])) ->
                           case ds_d5k9n of wild_00
                           { (liveness_lit_a5jGv, liveness_data_a5jGw) ->
                           letrec {
                             fun_type_a5jGx :: Int
                             [LclId]
                             fun_type_a5jGx
                               = let {
                                   fail_d5k9l :: ghc-prim-0.6.1:GHC.Prim.Void# -> Int
                                   [LclId]
                                   fail_d5k9l
                                     = \ (ds_d5k9m [OS=OneShot] :: ghc-prim-0.6.1:GHC.Prim.Void#) ->
                                         aRG_GEN_BIG } in
                                 case null @ [] $dFoldable_a5jUJ @ RawCmmDecl liveness_data_a5jGw
                                 of wild_00 {
                                   False -> fail_d5k9l ghc-prim-0.6.1:GHC.Prim.void#;
                                   True -> aRG_GEN
                                 }; } in
                           letrec {
                             extra_bits_a5jGy :: [CmmLit]
                             [LclId]
                             extra_bits_a5jGy
                               = ++
                                   @ CmmLit
                                   (GHC.Base.build
                                      @ CmmLit
                                      (\ (@ a_d5k96)
                                         (c_d5k97 :: CmmLit -> a_d5k96 -> a_d5k96)
                                         (n_d5k98 :: a_d5k96) ->
                                         c_d5k97
                                           (packIntsCLit platform_a5jGa fun_type_a5jGx arity_a5jGo)
                                           n_d5k98))
                                   (++
                                      @ CmmLit
                                      (case inlineSRT platform_a5jGa of wild_00 {
                                         False ->
                                           GHC.Base.build
                                             @ CmmLit
                                             (\ (@ a_d5k99)
                                                (c_d5k9a :: CmmLit -> a_d5k99 -> a_d5k99)
                                                (n_d5k9b :: a_d5k99) ->
                                                c_d5k9a srt_lit_a5jGs n_d5k9b);
                                         True -> ghc-prim-0.6.1:GHC.Types.[] @ CmmLit
                                       })
                                      (GHC.Base.build
                                         @ CmmLit
                                         (\ (@ a_d5k9c)
                                            (c_d5k9d :: CmmLit -> a_d5k9c -> a_d5k9c)
                                            (n_d5k9e :: a_d5k9c) ->
                                            c_d5k9d
                                              liveness_lit_a5jGv
                                              (c_d5k9d slow_entry_a5jGr n_d5k9e)))); } in
                           return
                             @ UniqSM
                             $dMonad_a5jUU
                             @ (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])
                             (GHC.Maybe.Nothing @ CmmLit, GHC.Maybe.Nothing @ CmmLit,
                              extra_bits_a5jGy, liveness_data_a5jGw)
                           })
                  };
                Thunk ->
                  let {
                    srt_label_a5jGh :: [CmmLit]
                    [LclId]
                    srt_label_a5jGh = _no_srt_a5jGe } in
                  return
                    @ UniqSM
                    $dMonad_a5jTF
                    @ (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])
                    (GHC.Maybe.Nothing @ CmmLit, GHC.Maybe.Nothing @ CmmLit,
                     srt_label_a5jGh, ghc-prim-0.6.1:GHC.Types.[] @ RawCmmDecl);
                ThunkSelector offset_a5jGi ->
                  let {
                    _no_srt_a5jGj :: [CmmLit]
                    [LclId]
                    _no_srt_a5jGj = _no_srt_a5jGe } in
                  return
                    @ UniqSM
                    $dMonad_a5jTP
                    @ (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])
                    (GHC.Maybe.Just
                       @ CmmLit (GHC.Cmm.Expr.$WCmmInt 0 (halfWordWidth platform_a5jGa)),
                     GHC.Maybe.Just
                       @ CmmLit
                       (mkWordCLit
                          platform_a5jGa
                          (fromIntegral
                             @ GHC.Runtime.Heap.Layout.SelectorOffset
                             @ Integer
                             $dIntegral_a5jTZ
                             $dNum_a5jU0
                             offset_a5jGi)),
                     ghc-prim-0.6.1:GHC.Types.[] @ CmmLit,
                     ghc-prim-0.6.1:GHC.Types.[] @ RawCmmDecl)
              }; } in
      let {
        fail_d5k8C
          :: ghc-prim-0.6.1:GHC.Prim.Void#
             -> UniqSM ([RawCmmDecl], InfoTableContents)
        [LclId]
        fail_d5k8C
          = \ (ds_d5k8D [OS=OneShot] :: ghc-prim-0.6.1:GHC.Prim.Void#) ->
              let {
                fail_d5k8A
                  :: ghc-prim-0.6.1:GHC.Prim.Void#
                     -> UniqSM ([RawCmmDecl], InfoTableContents)
                [LclId]
                fail_d5k8A
                  = \ (ds_d5k8B [OS=OneShot] :: ghc-prim-0.6.1:GHC.Prim.Void#) ->
                      let {
                        ds_d5k6x :: SMRep
                        [LclId]
                        ds_d5k6x = smrep_a5jG6 } in
                      case ds_d5k6x of wild_00 {
                        __DEFAULT -> fail_d5k8y ghc-prim-0.6.1:GHC.Prim.void#;
                        HeapRep ds_d5k7E ptrs_a5jGM nonptrs_a5jGN closure_type_a5jGO ->
                          letrec {
                            layout_a5jGP :: CmmLit
                            [LclId]
                            layout_a5jGP
                              = packIntsCLit platform_a5jGa ptrs_a5jGM nonptrs_a5jGN; } in
                          >>=
                            @ UniqSM
                            $dMonad_a5jW9
                            @ ((CmmLit, CmmLit), [RawCmmDecl])
                            @ ([RawCmmDecl], InfoTableContents)
                            (mkProfLits platform_a5jGa prof_a5jG7)
                            (\ (ds_d5k6P :: ((CmmLit, CmmLit), [RawCmmDecl])) ->
                               case ds_d5k6P of wild_00 { (prof_lits_a5jGQ, prof_data_a5jGR) ->
                               letrec {
                                 ds_d5k6G :: ([CmmLit], CmmLit)
                                 [LclId]
                                 ds_d5k6G = mkSRTLit platform_a5jGa info_lbl_a5jG5 srt_a5jG8;
                                 srt_label_a5jGS :: [CmmLit]
                                 [LclId]
                                 srt_label_a5jGS
                                   = case ds_d5k6G of wild_00
                                     { (srt_label_a5jGS, srt_bitmap_a5jGT) ->
                                     srt_label_a5jGS
                                     };
                                 srt_bitmap_a5jGT :: CmmLit
                                 [LclId]
                                 srt_bitmap_a5jGT
                                   = case ds_d5k6G of wild_00
                                     { (srt_label_a5jGS, srt_bitmap_a5jGT) ->
                                     srt_bitmap_a5jGT
                                     }; } in
                               >>=
                                 @ UniqSM
                                 $dMonad_a5jWm
                                 @ (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])
                                 @ ([RawCmmDecl], InfoTableContents)
                                 (mk_pieces_a5jGb closure_type_a5jGO srt_label_a5jGS)
                                 (\ (ds_d5k6B
                                       :: (Maybe CmmLit, Maybe CmmLit, [CmmLit], [RawCmmDecl])) ->
                                    case ds_d5k6B of wild_00
                                    { (mb_srt_field_a5jGU, mb_layout_a5jGV, extra_bits_a5jGW,
                                       ct_data_a5jGX) ->
                                    letrec {
                                      std_info_a5jGY :: [CmmLit]
                                      [LclId]
                                      std_info_a5jGY
                                        = mkStdInfoTable
                                            dflags_a5jG3
                                            prof_lits_a5jGQ
                                            (orElse
                                               @ Int mb_rts_tag_a5jG9 (rtsClosureType smrep_a5jG6))
                                            (orElse @ CmmLit mb_srt_field_a5jGU srt_bitmap_a5jGT)
                                            (orElse @ CmmLit mb_layout_a5jGV layout_a5jGP); } in
                                    return
                                      @ UniqSM
                                      $dMonad_a5jWx
                                      @ ([RawCmmDecl], ([CmmLit], [CmmLit]))
                                      (++ @ RawCmmDecl prof_data_a5jGR ct_data_a5jGX,
                                       (std_info_a5jGY, extra_bits_a5jGW))
                                    })
                               })
                      } } in
              let {
                ds_d5k4Y :: SMRep
                [LclId]
                ds_d5k4Y = smrep_a5jG6 } in
              case ds_d5k4Y of wild_00 {
                __DEFAULT -> fail_d5k8A ghc-prim-0.6.1:GHC.Prim.void#;
                StackRep frame_a5jGC ->
                  >>=
                    @ UniqSM
                    $dMonad_a5jVo
                    @ ((CmmLit, CmmLit), [RawCmmDecl])
                    @ ([RawCmmDecl], InfoTableContents)
                    (mkProfLits platform_a5jGa prof_a5jG7)
                    (\ (ds_d5k5C :: ((CmmLit, CmmLit), [RawCmmDecl])) ->
                       case ds_d5k5C of wild_00 { (prof_lits_a5jGD, prof_data_a5jGE) ->
                       letrec {
                         ds_d5k5t :: ([CmmLit], CmmLit)
                         [LclId]
                         ds_d5k5t = mkSRTLit platform_a5jGa info_lbl_a5jG5 srt_a5jG8;
                         srt_label_a5jGF :: [CmmLit]
                         [LclId]
                         srt_label_a5jGF
                           = case ds_d5k5t of wild_00 { (srt_label_a5jGF, srt_bitmap_a5jGG) ->
                             srt_label_a5jGF
                             };
                         srt_bitmap_a5jGG :: CmmLit
                         [LclId]
                         srt_bitmap_a5jGG
                           = case ds_d5k5t of wild_00 { (srt_label_a5jGF, srt_bitmap_a5jGG) ->
                             srt_bitmap_a5jGG
                             }; } in
                       >>=
                         @ UniqSM
                         $dMonad_a5jVB
                         @ (CmmLit, [RawCmmDecl])
                         @ ([RawCmmDecl], InfoTableContents)
                         (mkLivenessBits dflags_a5jG3 frame_a5jGC)
                         (\ (ds_d5k5o :: (CmmLit, [RawCmmDecl])) ->
                            case ds_d5k5o of wild_00
                            { (liveness_lit_a5jGH, liveness_data_a5jGI) ->
                            letrec {
                              rts_tag_a5jGK :: Int
                              [LclId]
                              rts_tag_a5jGK
                                = let {
                                    fail_d5k5m :: ghc-prim-0.6.1:GHC.Prim.Void# -> Int
                                    [LclId]
                                    fail_d5k5m
                                      = \ (ds_d5k5n [OS=OneShot]
                                             :: ghc-prim-0.6.1:GHC.Prim.Void#) ->
                                          let {
                                            fail_d5k5k :: ghc-prim-0.6.1:GHC.Prim.Void# -> Int
                                            [LclId]
                                            fail_d5k5k
                                              = \ (ds_d5k5l [OS=OneShot]
                                                     :: ghc-prim-0.6.1:GHC.Prim.Void#) ->
                                                  rET_BIG } in
                                          case null
                                                 @ []
                                                 $dFoldable_a5jVL
                                                 @ RawCmmDecl
                                                 liveness_data_a5jGI
                                          of wild_00 {
                                            False -> fail_d5k5k ghc-prim-0.6.1:GHC.Prim.void#;
                                            True -> rET_SMALL
                                          } } in
                                  let {
                                    ds_d5k51 :: Maybe Int
                                    [LclId]
                                    ds_d5k51 = mb_rts_tag_a5jG9 } in
                                  case ds_d5k51 of wild_00 {
                                    __DEFAULT -> fail_d5k5m ghc-prim-0.6.1:GHC.Prim.void#;
                                    Just tag_a5jGL -> tag_a5jGL
                                  }; } in
                            letrec {
                              std_info_a5jGJ :: [CmmLit]
                              [LclId]
                              std_info_a5jGJ
                                = mkStdInfoTable
                                    dflags_a5jG3
                                    prof_lits_a5jGD
                                    rts_tag_a5jGK
                                    srt_bitmap_a5jGG
                                    liveness_lit_a5jGH; } in
                            return
                              @ UniqSM
                              $dMonad_a5jVT
                              @ ([RawCmmDecl], ([CmmLit], [CmmLit]))
                              (++ @ RawCmmDecl prof_data_a5jGE liveness_data_a5jGI,
                               (std_info_a5jGJ, srt_label_a5jGF))
                            })
                       })
              } } in
      let {
        ds_d5k3T :: SMRep
        [LclId]
        ds_d5k3T = smrep_a5jG6 } in
      case ds_d5k3T of wild_00 {
        __DEFAULT -> fail_d5k8C ghc-prim-0.6.1:GHC.Prim.void#;
        RTSRep rts_tag_a5jGA rep_a5jGB ->
          mkInfoTableContents
            dflags_a5jG3
            (let {
               ds_d5k3W :: SMRep
               [LclId]
               ds_d5k3W = rep_a5jGB } in
             let {
               ds_d5k42 :: CmmInfoTable
               [LclId]
               ds_d5k42 = info_a5jG4 } in
             case ds_d5k42 of wild_00
             { CmmInfoTable ds_d5k3X ds_d5k3Y ds_d5k3Z ds_d5k40 ds_d5k41 ->
             GHC.Cmm.CmmInfoTable ds_d5k3X ds_d5k3W ds_d5k3Z ds_d5k40 ds_d5k41
             })
            (GHC.Maybe.Just @ Int rts_tag_a5jGA)
      }
      }

-- RHS size: {terms: 196, types: 354, coercions: 12, joins: 0/12}
mkInfoTable :: DynFlags -> CmmDeclSRTs -> UniqSM [RawCmmDecl]
[LclIdX]
mkInfoTable
  = \ (ds_d5ka0 :: DynFlags)
      (ds_d5ka1 :: GenCmmDecl RawCmmStatics CmmTopInfo CmmGraph) ->
      let {
        dflags_a5jFE :: DynFlags
        [LclId]
        dflags_a5jFE = ds_d5ka0 } in
      let {
        proc_a5jFF :: CmmDeclSRTs
        [LclId]
        proc_a5jFF = ds_d5ka1 } in
      case ds_d5ka1 of wild_00 {
        CmmProc infos_a5jFG entry_lbl_a5jFH live_a5jFI blocks_a5jFJ ->
          letrec {
            platform_a5jFK :: Platform
            [LclId]
            platform_a5jFK = targetPlatform dflags_a5jFE; } in
          letrec {
            do_one_info_a5jFL
              :: (GHC.Cmm.Dataflow.Label.Label, CmmInfoTable)
                 -> UniqSM
                      ([RawCmmDecl], (GHC.Cmm.Dataflow.Label.Label, GenCmmStatics 'True))
            [LclId]
            do_one_info_a5jFL
              = \ (ds_d5kbk :: (GHC.Cmm.Dataflow.Label.Label, CmmInfoTable)) ->
                  case ds_d5kbk of wild_00 { (lbl_a5jFM, itbl_a5jFN) ->
                  >>=
                    @ UniqSM
                    $dMonad_a5jX1
                    @ ([RawCmmDecl], InfoTableContents)
                    @ ([RawCmmDecl],
                       (GHC.Cmm.Dataflow.Label.Label, GenCmmStatics 'True))
                    (mkInfoTableContents
                       dflags_a5jFE itbl_a5jFN (GHC.Maybe.Nothing @ Int))
                    (\ (ds_d5kbn :: ([RawCmmDecl], InfoTableContents)) ->
                       case ds_d5kbn of wild_00 { (top_decls_a5jFO, ds_d5kbx) ->
                       case ds_d5kbx of wild_00 { (std_info_a5jFP, extra_bits_a5jFQ) ->
                       letrec {
                         info_lbl_a5jFR :: CLabel
                         [LclId]
                         info_lbl_a5jFR = cit_lbl itbl_a5jFN; } in
                       letrec {
                         rel_std_info_a5jFS :: [CmmLit]
                         [LclId]
                         rel_std_info_a5jFS
                           = map
                               @ CmmLit
                               @ CmmLit
                               (makeRelativeRefTo platform_a5jFK info_lbl_a5jFR)
                               std_info_a5jFP; } in
                       letrec {
                         rel_extra_bits_a5jFT :: [CmmLit]
                         [LclId]
                         rel_extra_bits_a5jFT
                           = map
                               @ CmmLit
                               @ CmmLit
                               (makeRelativeRefTo platform_a5jFK info_lbl_a5jFR)
                               extra_bits_a5jFQ; } in
                       return
                         @ UniqSM
                         $dMonad_a5jXn
                         @ ([RawCmmDecl],
                            (GHC.Cmm.Dataflow.Label.Label, GenCmmStatics 'True))
                         (top_decls_a5jFO,
                          (lbl_a5jFM,
                           $ @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
                             @ [CmmStatic]
                             @ (GenCmmStatics 'True)
                             (GHC.Cmm.CmmStaticsRaw @ 'True info_lbl_a5jFR)
                             ($ @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
                                @ [CmmLit]
                                @ [CmmStatic]
                                (map @ CmmLit @ CmmStatic GHC.Cmm.CmmStaticLit)
                                (++
                                   @ CmmLit
                                   (reverse @ CmmLit rel_extra_bits_a5jFT)
                                   rel_std_info_a5jFS))))
                       }
                       })
                  }; } in
          let {
            fail_d5kbi :: ghc-prim-0.6.1:GHC.Prim.Void# -> UniqSM [RawCmmDecl]
            [LclId]
            fail_d5kbi
              = \ (ds_d5kbj [OS=OneShot] :: ghc-prim-0.6.1:GHC.Prim.Void#) ->
                  >>=
                    @ UniqSM
                    $dMonad_a5jYv
                    @ ([[RawCmmDecl]],
                       [(GHC.Cmm.Dataflow.Label.Label, GenCmmStatics 'True)])
                    @ [RawCmmDecl]
                    (fmap
                       @ UniqSM
                       $dFunctor_a5jYz
                       @ [([RawCmmDecl],
                           (GHC.Cmm.Dataflow.Label.Label, GenCmmStatics 'True))]
                       @ ([[RawCmmDecl]],
                          [(GHC.Cmm.Dataflow.Label.Label, GenCmmStatics 'True)])
                       (unzip
                          @ [RawCmmDecl]
                          @ (GHC.Cmm.Dataflow.Label.Label, GenCmmStatics 'True))
                       (mapM
                          @ []
                          $dTraversable_a5jYF
                          @ UniqSM
                          @ (GHC.Cmm.Dataflow.Label.Label, CmmInfoTable)
                          @ ([RawCmmDecl],
                             (GHC.Cmm.Dataflow.Label.Label, GenCmmStatics 'True))
                          $dMonad_a5jYJ
                          do_one_info_a5jFL
                          ((mapToList
                              @ GHC.Cmm.Dataflow.Label.LabelMap
                              $dIsMap_a5jYM
                              @ CmmInfoTable
                              (info_tbls infos_a5jFG))
                           `cast` (([((,)
                                        (Sub (GHC.Cmm.Dataflow.Label.D:R:KeyOfLabelMap[0]))
                                        <CmmInfoTable>_R)_R])_R
                                   :: [(KeyOf GHC.Cmm.Dataflow.Label.LabelMap, CmmInfoTable)]
                                      ~R# [(GHC.Cmm.Dataflow.Label.Label, CmmInfoTable)]))))
                    (\ (ds_d5kaZ
                          :: ([[RawCmmDecl]],
                              [(GHC.Cmm.Dataflow.Label.Label, GenCmmStatics 'True)])) ->
                       case ds_d5kaZ of wild_00 { (top_declss_a5jG1, raw_infos_a5jG2) ->
                       return
                         @ UniqSM
                         $dMonad_a5jYQ
                         @ [RawCmmDecl]
                         (++
                            @ RawCmmDecl
                            (concat @ [] @ RawCmmDecl $dFoldable_a5jYV top_declss_a5jG1)
                            (GHC.Base.build
                               @ RawCmmDecl
                               (\ (@ a_d5kaW)
                                  (c_d5kaX :: RawCmmDecl -> a_d5kaW -> a_d5kaW)
                                  (n_d5kaY :: a_d5kaW) ->
                                  c_d5kaX
                                    (GHC.Cmm.CmmProc
                                       @ RawCmmStatics
                                       @ (GHC.Cmm.Dataflow.Label.LabelMap (GenCmmStatics 'True))
                                       @ CmmGraph
                                       (mapFromList
                                          @ GHC.Cmm.Dataflow.Label.LabelMap
                                          $dIsMap_a5jZ1
                                          @ (GenCmmStatics 'True)
                                          (raw_infos_a5jG2
                                           `cast` (([((,)
                                                        (Sub (Sym (GHC.Cmm.Dataflow.Label.D:R:KeyOfLabelMap[0])))
                                                        <GenCmmStatics 'True>_R)_R])_R
                                                   :: [(GHC.Cmm.Dataflow.Label.Label,
                                                        GenCmmStatics 'True)]
                                                      ~R# [(KeyOf GHC.Cmm.Dataflow.Label.LabelMap,
                                                            GenCmmStatics 'True)])))
                                       entry_lbl_a5jFH
                                       live_a5jFI
                                       blocks_a5jFJ)
                                    n_d5kaY)))
                       }) } in
          case not (platformTablesNextToCode (targetPlatform dflags_a5jFE))
          of wild_00 {
            False -> fail_d5kbi ghc-prim-0.6.1:GHC.Prim.void#;
            True ->
              let {
                ds_d5ka9 :: Maybe CmmInfoTable
                [LclId]
                ds_d5ka9 = topInfoTable @ RawCmmStatics @ CmmNode proc_a5jFF } in
              case ds_d5ka9 of wild_00 {
                Nothing ->
                  return
                    @ UniqSM
                    $dMonad_a5jXK
                    @ [GenCmmDecl
                         RawCmmStatics
                         (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                         CmmGraph]
                    (GHC.Base.build
                       @ (GenCmmDecl
                            RawCmmStatics
                            (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                            CmmGraph)
                       (\ (@ a_d5kad)
                          (c_d5kae
                             :: GenCmmDecl
                                  RawCmmStatics
                                  (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                                  CmmGraph
                                -> a_d5kad -> a_d5kad)
                          (n_d5kaf :: a_d5kad) ->
                          c_d5kae
                            (GHC.Cmm.CmmProc
                               @ RawCmmStatics
                               @ (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                               @ CmmGraph
                               (mapEmpty
                                  @ GHC.Cmm.Dataflow.Label.LabelMap $dIsMap_a5jXS @ RawCmmStatics)
                               entry_lbl_a5jFH
                               live_a5jFI
                               blocks_a5jFJ)
                            n_d5kaf));
                Just info_a5jFU ->
                  case info_a5jFU of wild_00
                  { CmmInfoTable ds_d5kaR ds_d5kaS ds_d5kaT ds_d5kaU ds_d5kaV ->
                  let {
                    info_lbl_a5jFV :: CLabel
                    [LclId]
                    info_lbl_a5jFV = ds_d5kaR } in
                  >>=
                    @ UniqSM
                    $dMonad_a5jXX
                    @ ([RawCmmDecl], InfoTableContents)
                    @ [RawCmmDecl]
                    (mkInfoTableContents
                       dflags_a5jFE info_a5jFU (GHC.Maybe.Nothing @ Int))
                    (\ (ds_d5kas :: ([RawCmmDecl], InfoTableContents)) ->
                       case ds_d5kas of wild_00 { (top_decls_a5jFW, ds_d5kaC) ->
                       case ds_d5kaC of wild_00 { (std_info_a5jFX, extra_bits_a5jFY) ->
                       letrec {
                         rel_extra_bits_a5jG0 :: [CmmLit]
                         [LclId]
                         rel_extra_bits_a5jG0
                           = map
                               @ CmmLit
                               @ CmmLit
                               (makeRelativeRefTo platform_a5jFK info_lbl_a5jFV)
                               extra_bits_a5jFY; } in
                       letrec {
                         rel_std_info_a5jFZ :: [CmmLit]
                         [LclId]
                         rel_std_info_a5jFZ
                           = map
                               @ CmmLit
                               @ CmmLit
                               (makeRelativeRefTo platform_a5jFK info_lbl_a5jFV)
                               std_info_a5jFX; } in
                       return
                         @ UniqSM
                         $dMonad_a5jYe
                         @ [RawCmmDecl]
                         (++
                            @ RawCmmDecl
                            top_decls_a5jFW
                            (GHC.Base.build
                               @ RawCmmDecl
                               (\ (@ a_d5kap)
                                  (c_d5kaq :: RawCmmDecl -> a_d5kap -> a_d5kap)
                                  (n_d5kar :: a_d5kap) ->
                                  c_d5kaq
                                    (GHC.Cmm.CmmProc
                                       @ RawCmmStatics
                                       @ (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                                       @ CmmGraph
                                       (mapEmpty
                                          @ GHC.Cmm.Dataflow.Label.LabelMap
                                          $dIsMap_a5jYl
                                          @ RawCmmStatics)
                                       entry_lbl_a5jFH
                                       live_a5jFI
                                       blocks_a5jFJ)
                                    (c_d5kaq
                                       (mkRODataLits
                                          @ 'True
                                          @ (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                                          @ CmmGraph
                                          info_lbl_a5jFV
                                          (ghc-prim-0.6.1:GHC.Types.:
                                             @ CmmLit
                                             (GHC.Cmm.Expr.CmmLabel entry_lbl_a5jFH)
                                             (++ @ CmmLit rel_std_info_a5jFZ rel_extra_bits_a5jG0)))
                                       n_d5kar))))
                       }
                       })
                  }
              }
          };
        CmmData sec_a5jFC dat_a5jFD ->
          return
            @ UniqSM
            $dMonad_a5jWH
            @ [GenCmmDecl
                 RawCmmStatics
                 (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                 CmmGraph]
            (GHC.Base.build
               @ (GenCmmDecl
                    RawCmmStatics
                    (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                    CmmGraph)
               (\ (@ a_d5ka4)
                  (c_d5ka5
                     :: GenCmmDecl
                          RawCmmStatics
                          (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                          CmmGraph
                        -> a_d5ka4 -> a_d5ka4)
                  (n_d5ka6 :: a_d5ka4) ->
                  c_d5ka5
                    (GHC.Cmm.CmmData
                       @ RawCmmStatics
                       @ (GHC.Cmm.Dataflow.Label.LabelMap RawCmmStatics)
                       @ CmmGraph
                       sec_a5jFC
                       dat_a5jFD)
                    n_d5ka6))
      }

-- RHS size: {terms: 91, types: 171, coercions: 0, joins: 0/13}
cmmToRawCmm
  :: forall a.
     DynFlags
     -> Stream IO CmmGroupSRTs a -> IO (Stream IO RawCmmGroup a)
[LclIdX]
cmmToRawCmm
  = \ (@ a_a5jZ4) ->
      let {
        $dMonad_a5k0a :: Monad UniqSM
        [LclId]
        $dMonad_a5k0a = $dMonad_a5jQG } in
      let {
        $dFoldable_a5k01 :: Foldable []
        [LclId]
        $dFoldable_a5k01 = $dFoldable_a5jRE } in
      let {
        $dMonadIO_a5jZX :: MonadIO IO
        [LclId]
        $dMonadIO_a5jZX = Control.Monad.IO.Class.$fMonadIOIO } in
      let {
        $dMonad_a5jZG :: Monad IO
        [LclId]
        $dMonad_a5jZG = GHC.Base.$fMonadIO } in
      let {
        $dMonad_a5k0d :: Monad IO
        [LclId]
        $dMonad_a5k0d = $dMonad_a5jZG } in
      let {
        $dMonad_a5k0i :: Monad IO
        [LclId]
        $dMonad_a5k0i = $dMonad_a5jZG } in
      let {
        $dFunctor_a5k0n :: Functor (Stream IO [RawCmmDecl])
        [LclId]
        $dFunctor_a5k0n
          = GHC.Data.Stream.$fFunctorStream
              @ IO @ [RawCmmDecl] $dMonad_a5jZG } in
      let {
        $dMonad_a5k0A :: Monad IO
        [LclId]
        $dMonad_a5k0A = $dMonad_a5jZG } in
      \ (dflags_a5jFp :: DynFlags)
        (cmms_a5jFq :: Stream IO CmmGroupSRTs a_a5jZ4) ->
        letrec {
          forceRes_a5jFr
            :: forall (t :: * -> *) a a. Foldable t => (a, t a) -> ()
          [LclId]
          forceRes_a5jFr
            = \ (@ (t_a5jZg :: * -> *))
                (@ a_a5jZe)
                (@ a_a5jZl)
                ($dFoldable_a5jZr :: Foldable t_a5jZg) ->
                let {
                  $dFoldable_a5jZh :: Foldable t_a5jZg
                  [LclId]
                  $dFoldable_a5jZh = $dFoldable_a5jZr } in
                letrec {
                  forceRes_a5jZp :: (a_a5jZe, t_a5jZg a_a5jZl) -> ()
                  [LclId]
                  forceRes_a5jZp
                    = \ (ds_d5kbN :: (a_a5jZe, t_a5jZg a_a5jZl)) ->
                        case ds_d5kbN of wild_00 { (uniqs_a5jFs, rawcmms_a5jFt) ->
                        case uniqs_a5jFs of uniqs_a5jFs { __DEFAULT ->
                        foldr
                          @ t_a5jZg
                          $dFoldable_a5jZh
                          @ a_a5jZl
                          @ ()
                          (\ (decl_a5jFu :: a_a5jZl) (r_a5jFv :: ()) ->
                             case decl_a5jFu of decl_a5jFu { __DEFAULT -> r_a5jFv })
                          ghc-prim-0.6.1:GHC.Tuple.()
                          rawcmms_a5jFt
                        }
                        }; } in
                forceRes_a5jZp; } in
        >>=
          @ IO
          $dMonad_a5jZG
          @ UniqSupply
          @ (Stream IO RawCmmGroup a_a5jZ4)
          (mkSplitUniqSupply (ghc-prim-0.6.1:GHC.Types.C# 'i'#))
          (\ (uniqs_a5jFw :: UniqSupply) ->
             letrec {
               do_one_a5jFx
                 :: UniqSupply -> [CmmDeclSRTs] -> IO (UniqSupply, [RawCmmDecl])
               [LclId]
               do_one_a5jFx
                 = \ (uniqs_a5jFy :: UniqSupply) (cmm_a5jFz :: [CmmDeclSRTs]) ->
                     $ @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
                       @ (IO (UniqSupply, [RawCmmDecl]))
                       @ (IO (UniqSupply, [RawCmmDecl]))
                       (withTimingSilent
                          @ IO
                          @ (UniqSupply, [RawCmmDecl])
                          $dMonadIO_a5jZX
                          dflags_a5jFp
                          (text
                             (ghc-prim-0.6.1:GHC.CString.unpackCString# "Cmm -> Raw Cmm"#))
                          (forceRes_a5jFr @ [] @ UniqSupply @ RawCmmDecl $dFoldable_a5k01))
                       (let {
                          ds_d5kbC :: ([RawCmmDecl], UniqSupply)
                          [LclId]
                          ds_d5kbC
                            = $ @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
                                @ (UniqSM [RawCmmDecl])
                                @ ([RawCmmDecl], UniqSupply)
                                (initUs @ [RawCmmDecl] uniqs_a5jFy)
                                (concatMapM
                                   @ UniqSM
                                   @ CmmDeclSRTs
                                   @ RawCmmDecl
                                   $dMonad_a5k0a
                                   (mkInfoTable dflags_a5jFp)
                                   cmm_a5jFz) } in
                        case ds_d5kbC of wild_00 { (b_a5jFA, uniqs'_a5jFB) ->
                        return
                          @ IO
                          $dMonad_a5k0d
                          @ (UniqSupply, [RawCmmDecl])
                          (uniqs'_a5jFB, b_a5jFA)
                        }); } in
             return
               @ IO
               $dMonad_a5k0i
               @ (Stream IO [RawCmmDecl] a_a5jZ4)
               (<$>
                  @ (Stream IO [RawCmmDecl])
                  @ (UniqSupply, a_a5jZ4)
                  @ a_a5jZ4
                  $dFunctor_a5k0n
                  (snd @ UniqSupply @ a_a5jZ4)
                  (Stream.mapAccumL_
                     @ IO
                     @ UniqSupply
                     @ [CmmDeclSRTs]
                     @ [RawCmmDecl]
                     @ a_a5jZ4
                     $dMonad_a5k0A
                     do_one_a5jFx
                     uniqs_a5jFw
                     cmms_a5jFq)))

-- RHS size: {terms: 8, types: 6, coercions: 0, joins: 0/0}
mkEmptyContInfoTable :: CLabel -> CmmInfoTable
[LclIdX]
mkEmptyContInfoTable
  = \ (info_lbl_a5jFo :: CLabel) ->
      GHC.Cmm.CmmInfoTable
        info_lbl_a5jFo
        (mkStackRep (ghc-prim-0.6.1:GHC.Types.[] @ Bool))
        GHC.Cmm.NoProfilingInfo
        (GHC.Maybe.Nothing @ CLabel)
        (GHC.Maybe.Nothing
           @ (GHC.Types.Var.Id, GHC.Types.CostCentre.CostCentreStack))

-- RHS size: {terms: 7, types: 5, coercions: 0, joins: 0/1}
po_profile :: PtrOpts -> Profile
[LclIdX[[RecSel]]]
po_profile
  = \ (ds_d5kbU :: PtrOpts) ->
      case ds_d5kbU of wild_00 { PtrOpts ds_d5kbV ds_d5kbW ->
      let {
        po_profile_B1 :: Profile
        [LclId]
        po_profile_B1 = ds_d5kbV } in
      po_profile_B1
      }

-- RHS size: {terms: 7, types: 5, coercions: 0, joins: 0/1}
po_align_check :: PtrOpts -> Bool
[LclIdX[[RecSel]]]
po_align_check
  = \ (ds_d5kbX :: PtrOpts) ->
      case ds_d5kbX of wild_00 { PtrOpts ds_d5kbY ds_d5kbZ ->
      let {
        po_align_check_B1 :: Bool
        [LclId]
        po_align_check_B1 = ds_d5kbZ } in
      po_align_check_B1
      }
end Rec }


